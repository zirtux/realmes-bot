/*ÔΩ°‚òÜ‚úº‚òÖ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅATEN√á√ÉO‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚òÖ‚úº
ùôÄùôê ùôéùòºùôâùòøùôçùôä ùòΩùôäùôè ùôâùòºùôä ùôãùôÄùôçùôàùôÑùôèùôä ùôçùôÄùôëùôÄùôâùòøùôÄùôç ùôäùôê ùôçùôÄùôãùòºùôéùôéùòºùôç ùôÄùôéùôéùòº ùôëùôÄùôçùôéùòºùôä.
ÔΩ°‚òÜ‚úº‚òÖ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅATEN√á√ÉO‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚òÖ‚úº*/

//====================‚â†‚â†===============\\

const { downloadContentFromMessage, relayWAMessage, mentionedJid, processTime, MediaType, Browser, MessageType, Presence, Mimetype, Browsers, delay, getLastMessageInChat, WA_DEFAULT_EPHEMERAL, generateWAMessageFromContent, proto, logger, prepareWAMessageMedia, makeInMemoryStore } = require('@whiskeysockets/baileys');

// ========[ M√ìDULOS E FUN√á√ïES ]======= \\

const { fs, Boom, chalk, axios, yts, crypto, util, P, linkfy, request, cheerio, ms, ffmpeg, webp_mp4, qrterminal, exec, spawn, execSync, moment, color, time, hora, date, getBuffer, convertSticker, recognize, fetchJson, fetchText, fetch, vip, getBase64, createExif, writeExifImg, addLimit, nit, addBanned, unBanned, BannedExpired, cekBannedUser, validmove, setGame, addComandosId, deleteComandos, getComandoBlock, getComandos, addComandos, palavrasANA, quizanimais, garticArchives, whatMusicAr, enigmaArchive, getpc, supre, wait, getExtension, generateMessageID, upload, getGroupAdmins, getMembros, sendPoll, getRandom, banner, banner2, banner3, temporizador, chyt, kyun, TimeCount, simih, botoff, colors, RSM_FUNC, infoSystem, os, arcloud, EmojiAPI, emoji, infoClima, insert, response, addFilter, isFiltered, mines, getMinesPositions, MinesHelp, ytdl, psycatgames, MultiDownload, AssemblyAI, level2, chaves, grupos, aluguel, obeso, countDays, timeDate, Limit_CMD, capitalizeFirstLetter, shuffle } = require('./exports.js');

// ======[ JS-MENUS/INFORMA√á√ïES ]====== \\

const { linguagem, mess, getInfo, destrava, destrava2, tabela, conselhob, fatos, randomCantadas, palavrasc, ban, joguinhodavelhajs, joguinhodavelhajs2, nescessario, setting, logoslink, ftmenu, premium, rgtake, muted, countMessage, sendVideoAsSticker, sendImageAsSticker, sendVideoAsSticker2, sendImageAsSticker2, sotoy, daily, comandos, limitefll, votacao, antispam, anotar, black_, enviarfiguUrl, getFileBuffer, DLT_FL, sleep, ANT_LTR_MD_EMJ, sabrpg, autorpg, bcbet, minerar, rg_pescaria, pescaria, cavalosrpg, elitepasse, coderpg, galosrpg, roubosrpg } = require('./exports.js');

//_-_-_-_-_-_-_-_-_-_-(INFOS)_-_-_-_-_-_--_-_-_-_-_-_-_-\\

var { antipv, antipv3, visualizarmsg, numero_dono1, numero_dono2, numero_dono3, numero_dono4, numero_dono5, numero_dono6, msgantipv1, msgantipv2, API_KEY_INVERTEXTO } = require("./settings/nescessario.json");

const music = JSON.parse(fs.readFileSync("./database/data/music.json"))

const { fundo1, fundo2, imgnazista, imggay, imgcorno, imggostosa, imggostoso, imgfeio, imgvesgo, imgbebado, imggado, matarcmd, deathcmd, beijocmd, chutecmd, tapacmd, rnkgay, rnkgado, rnkcorno, rnkgostoso, rnkgostosa, rnknazista, rnkotaku, rnkpau, suruba, minado_bomb, thumbnail } = require("./settings/links_img.json");

const { NomeDoBot, NickDono, prefix, API_KEY_sandro, channel, fotobot, SANDRO_MD, API_SANDRO_MD } = require("./settings/settings.json");

const { audio_menu, bom_dia, boa_tarde, boa_noite, corno, qviado } = require('./settings/media/audios.json')

const { Aki } = require('aki-api')
const jogo = {jogador: "", now: true}
const II = "```"; // Efeito para o texto, ou seja, usando 2 vezes a defini√ß√£o ${II} ocorre uma mudan√ßa em seu design.

const { mensagens, enviar, sortear } = require("./settings/message.js") // Mensagens do bot 

var numerodono_ofc = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "");

async function reiniciarSAB() {
file = require.resolve("./connect.js");
delete require.cache[file];
require(file);
}

var AsMsg = [];

// ABAIXO: IN√çCIO DE CONEX√ÉO

async function startConnect() {

module.exports = sandro = async(sandro, folderUserAuth) => {
module.exports = upsert = async(upsert, sandro) => {
async function startFunctionSab() {
const nmrdn_dono2 = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net";

var hora120 = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

RSM_FUNC(sandro, nmrdn_dono2, hora120, upsert);

for (const info of upsert?.messages || []) {

const from = info.key.remoteJid;
const isGroup = from.endsWith('@g.us');

const VRF_JSON_GRUPO = fs.existsSync(`./database/grupos/activation_gp/${from}.json`) ? true : false;

if(VRF_JSON_GRUPO) {
var jsonGp = JSON.parse(fs.readFileSync(`./database/grupos/activation_gp/${from}.json`));
}

if(VRF_JSON_GRUPO && jsonGp[0].x9 && info.messageStubType){
switch(info.messageStubType){
case 29:
await delay(1000);
sandro.sendMessage(info.key.remoteJid, {text: `*@${info.messageStubParameters[0].split("@")[0]}* foi promovido(a) ao cargo de adminstrador do grupo por: *@${info.participant.split("@")[0]}*.`, contextInfo: {forwardingScore: 50000, isForwarded: true, mentionedJid: [info.messageStubParameters[0], info.participant], remoteJid: info.key.remoteJid}});
break;
case 30:
await delay(1000);
sandro.sendMessage(info.key.remoteJid, {text: `O(a) adminstrador(a) *@${info.messageStubParameters[0].split("@")[0]}* foi rebaixado(a) √† membro comum por: *@${info.participant.split("@")[0]}*.`, contextInfo: {forwardingScore: 50000, isForwarded: true, mentionedJid: [info.messageStubParameters[0], info.participant], remoteJid: info.key.remoteJid}});
break;
}}
  
if(!info.message) return;
if(upsert.type == "append") return;  
const baileys = require('@whiskeysockets/baileys');
const type = baileys.getContentType(info.message);
const content = JSON.stringify(info.message);
const pushname = info.pushName ? info.pushName : '';
if(visualizarmsg) {
await sandro.readMessages([info.key]);
} else {
if(from == "status@broadcast") return;
}

global.prefix;
global.blocked;

const speed = require('performance-now');

///============body
var body = (type === 'conversation') ?
info.message.conversation : (type == 'imageMessage') ?
info.message.imageMessage.caption : (type == 'videoMessage') ?
info.message.videoMessage.caption : (type == 'extendedTextMessage') ?
info.message.extendedTextMessage.text : (type == 'buttonsResponseMessage') ?
info.message.buttonsResponseMessage.selectedButtonId : (info.message.listResponseMessage && info.message.listResponseMessage.singleSelectenviar.selectedRowId.startsWith(prefix) && info.message.listResponseMessage.singleSelectenviar.selectedRowId) ? info.message.listResponseMessage.singleSelectenviar.selectedRowId : (type == 'templateButtonenviarMessage') ?
info.message.templateButtonenviarMessage.selectedId : (type === 'messageContextInfo') ? (info.message.buttonsResponseMessage?.selectedButtonId || info.message.listResponseMessage?.singleSelectenviar.selectedRowId || info.text) : ''
////========

var Procurar_String = info.message?.conversation || info.message?.viewOnceMessageV2?.message?.imageMessage?.caption || info.message?.viewOnceMessageV2?.message?.videoMessage?.caption || info.message?.imageMessage?.caption || info.message?.videoMessage?.caption || info.message?.extendedTextMessage?.text || info.message?.viewOnceMessage?.message?.videoMessage?.caption || info.message?.viewOnceMessage?.message?.imageMessage?.caption || info.message?.documentWithCaptionMessage?.message?.documentMessage?.caption || info.message?.buttonsMessage?.imageMessage?.caption || ""

const args = body.trim().split(/ +/).slice(1);

const budy2 = body.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");

if(isGroup && fs.existsSync(`./database/grupos/activation_gp/${from}.json`) && jsonGp[0].multiprefix) {
var prefix = jsonGp[0]?.prefixos[jsonGp[0]?.prefixos?.indexOf(String(body)?.trim()?.charAt(0))] || jsonGp[0].prefixos[0]
}

if(isGroup && fs.existsSync(`./database/grupos/activation_gp/${from}.json`) && !jsonGp[0].multiprefix) {var prefix = setting.prefix} else if(!isGroup) {var prefix = setting.prefix};

var isCmd = body.trim().startsWith(prefix);

const sender = isGroup ? info.key.participant: from

const command = isCmd ? budy2.trim().slice(1).split(/ +/).shift().toLocaleLowerCase(): null;

const q_2 = budy2.trim().split(/ +/).slice(1).join(' ');

const q = args.join(' ');

var budy = (type === 'conversation') ? info.message?.conversation : (type === 'extendedTextMessage') ? info.message?.extendedTextMessage?.text : '';

var budy3 = budy.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");

var PR_String = Procurar_String.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");

const q_ofc = PR_String.trim().split(/ +/).slice(1).join(" ");


//======================================\\
try {var groupMetadata = isGroup ?  await sandro.groupMetadata(from): ""} catch {return}

const groupName = isGroup ? groupMetadata.subject : '';
// Verifique se est√° em um grupo e se a vari√°vel groupMetadata est√° definida

let groupDesc = '';

if (isGroup) {
  if (typeof groupMetadata !== 'undefined' && groupMetadata !== null) {
    groupDesc = groupMetadata.desc || ''; // Define a descri√ß√£o se existir, sen√£o vazio
  }
}

const messagesC = PR_String.slice(0).trim().split(/ +/).shift().toLowerCase();

const arg = body.substring(body.indexOf(' ') + 1);

const botNumber = await sandro.user.id.split(':')[0]+'@s.whatsapp.net';
const argss = body.split(/ +/g);
const testat = body;
const ants = body;

const groupMembers = isGroup ? groupMetadata.participants : ''

const isnit = nit.includes(sender) 

const issupre = supre.includes(sender)

const ischyt = chyt.includes(sender)

const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''

const somembros = isGroup ? getMembros(groupMembers) : ''

//======================================\\

const nmrdn = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net` || isnit

const numerodono = [`${nmrdn}`, `${numero_dono1}@s.whatsapp.net`, `${numero_dono2}@s.whatsapp.net`, `${numero_dono3}@s.whatsapp.net`, `${numero_dono4}@s.whatsapp.net`, `${numero_dono5}@s.whatsapp.net`, `${numero_dono6}@s.whatsapp.net`]

//=====================================\\

//=================> Fun√ß√µes de Grupo ü•ã

const dirGroup = `./database/grupos/activation_gp/${from}.json`

const nescj = "./settings/nescessario.json"

if(isGroup && !fs.existsSync(dirGroup)){
var data = [{
    name: groupName,
    groupId: from, 
    x9: false, 
    antiimg: false, 
    antivideo: false,
    antiaudio: false, 
    antisticker: false,
    antidoc: false,
    antictt: false,
    antiloc: false, 
    antilinkgp: false,
    antilinkhard: false, 
    antifake: false, 
    antiporn: false,
    Odelete: false, 
    antispam: false, 
    antinotas: false, 
    anticatalogo: false, 
    visuUnica: false, 
    registrarFIGUS: false, 
    soadm: false, 
    listanegra: [], 
    advertir: [], 
    prefixos: [`${setting.prefix}`],
    advertir2: [], 
    legenda_estrangeiro: "0",
    legenda_documento: "0", 
    legenda_video: "0",
    legenda_imagem: "0", 
    multiprefix: false, 
    forca_ofc: [{
        acertos: 0, 
        erros: 0, 
        palavra: [], 
        escreveu: [], 
        palavra_ofc: 0, 
        dica: 0, 
        tema: 0
      }], 
    ausentes: [], 
    forca_inc: false,  
    antipalavrao: {
        active: false,
        palavras: []
     },
     limitec: {
        active: false,
        quantidade: null
     },
    wellcome: [{
        bemvindo1: false,
        legendabv: "Ol√° #numerodele#, seja bem vindo (a) ao grupo: #nomedogp#",
        legendasaiu: 0
      },
      {
        bemvindo2: false,
        legendabv: "Ol√° #numerodele#, seja bem vindo (a) ao grupo: #nomedogp#",
        legendasaiu: 0
      }],
    simi1: false, 
    simi2: false,
    autosticker: false, 
    autoresposta: false,
    jogos: false, 
    level: false,
    bangp: false, 
    nsfw: false,
    aluguel: true
}]
    fs.writeFileSync(dirGroup, JSON.stringify(data, null, 2) + '\n')
}

const dataGp = isGroup ? JSON.parse(fs.readFileSync(dirGroup)) : undefined 

var DFNMULTIP = `./database/func/prefixo/multip_${from}.json`

function setGp(index){
fs.writeFileSync(dirGroup, JSON.stringify(index, null, 2) + '\n')}


function setNes(index){
fs.writeFileSync(nescj, JSON.stringify(index, null, 2) + '\n')}

function sets(index){
fs.writeFileSync(nescj, JSON.stringify(index, null, 2) + '\n')}

function ses(index){
fs.writeFileSync(nescj, JSON.stringify(index, null, 2) + '\n')}

//=====(ADMS/DONO/ETC..CONST)=======\\
const adivinha = info.key.id.length > 21 ? 'Android' : info.key.id.substring(0, 2) == '3A' ? 'iPhone' : 'WhatsApp Web';

const quoted = info.quoted ? info.quoted : info

const isBot = info.key.fromMe ? true : false

const SoDono = numerodono.includes(sender) || isBot || isnit || issupre || ischyt

dfndofc = setting.numerodono+"@s.whatsapp.net"

const isVip = vip.map(i => i.id).includes(sender) || SoDono

const DonoOficial = dfndofc.includes(sender) 

const isPremium = premium.map(i => i.id).includes(sender) || SoDono

const isBotGroupAdmins = groupAdmins.includes(botNumber) || false

const isGroupAdmins = groupAdmins.includes(sender) || false || DonoOficial

const isBanned = ban.includes(sender)

const isConsole = nescessario.consoleoff

const isVisualizar = nescessario.visualizarmsg

const isVerificado = nescessario.verificado

const isWelcomePrivate = nescessario.welcomepv

const isAudioMenu = nescessario.menu_audio

const isAntiPv = nescessario.antipv 

const isAntiPv3 = nescessario.antipv3

const isBotoff = nescessario.botoff

const listanegraG = nescessario.listanegraG

const isAnticall = nescessario.anticall

const TOKEN_GPT = nescessario.TOKEN_GPT

const isCmdPremium = nescessario.cmd_premium

const isBlockCmdG = nescessario.blockCmdG

const isChVip = isVip ? "‚úì": "X"

//============(FUN√á√ïES)============\\

const isJoguin = isGroup ? joguinhodavelhajs.includes(sender) : false

const isAntiImg = isGroup ? dataGp[0].antiimg : undefined

const isLimitCmd = isGroup ? dataGp[0]?.Limitar_CMD : undefined

const isAntiVid = isGroup ? dataGp[0].antivideo : undefined

const isAntiAudio = isGroup ? dataGp[0].antiaudio : undefined

const isAntiSticker = isGroup ? dataGp[0].antisticker : undefined

const Antidoc = isGroup ? dataGp[0].antidoc : undefined

const isAntiCtt = isGroup ? dataGp[0].antictt : undefined

const Antiloc = isGroup ? dataGp[0].antiloc : undefined

const isAntilinkgp = isGroup ? dataGp[0].antilinkgp : undefined

const isAntiLinkHard = isGroup ? dataGp[0].antilinkhard : undefined

const isAntiPorn = isGroup ? dataGp[0].antiporn : undefined

const isAntifake = isGroup ? dataGp[0].antifake : undefined

const IS_DELETE = nescessario.Odelete

const So_Adm = isGroup ? dataGp[0].soadm : undefined

const isX9VisuUnica = isGroup ? dataGp[0].visuUnica : undefined

const ADVT = isGroup ? dataGp[0].advertir: undefined

const ADVT2 = isGroup ? dataGp[0].advertir2: undefined

const isx9 = isGroup ? dataGp[0].x9 : undefined

const isMultiP = isGroup ? dataGp[0].multiprefix : undefined

const isAntiNotas = isGroup ? dataGp[0].antinotas : undefined

const isAnticatalogo = isGroup ? dataGp[0].anticatalogo : undefined

const isWelkom = isGroup ? dataGp[0].wellcome[0].bemvindo1 : undefined

const isWelkom2 = isGroup ? dataGp[0].wellcome[1].bemvindo2 : undefined

const isSimi = isGroup ? dataGp[0].simi1 : undefined

const isSimi2 = isGroup ? dataGp[0].simi2 : undefined

const isAutofigu = isGroup ? dataGp[0].autosticker : undefined

const isAutorepo = isGroup ? dataGp[0].autoresposta : undefined

const isModobn =  isGroup ? dataGp[0].jogos : undefined

const isLevelingOn = isGroup ? dataGp[0].level : undefined

const isBanchat = isGroup ? dataGp[0].bangp : undefined

const isNsfw = isGroup ? dataGp[0].nsfw : undefined

const isPalavrao = isGroup ? dataGp[0].antipalavrao.active : undefined

const isPalavras = isGroup ? dataGp[0].antipalavrao.palavras : undefined

const isAntiFlood = isGroup ? dataGp[0].limitec.active : undefined

const isLimitec = isGroup ? dataGp[0].limitec.quantidade : undefined

const isModoAluguel =  isGroup ? dataGp[0].aluguel : undefined

const isBotao = true

const isSabCityOFF = !JSON.stringify(autorpg).includes(from) || autorpg[autorpg.map(i => i.id).indexOf(from)].rpg

//============(VERIFICADOS)============\\

//QUOTED DA META AI
//SANDRO MD V11
const selinho = { 
"key": {
"participant": "13135550002@s.whatsapp.net",
"remoteJid": "status@broadcast", 
"fromMe": false, 
},
"message": {
"contactMessage": {
"displayName": "ùêíùêÄùêçùêÉùêëùêé ùêåùêÉ ùêï9", 
"vcard": `BEGIN:VCARD\nVERSION:3.0\nN:;Meta AI;;;\nFN:Meta AI\nitem1.TEL;waid=13135550002:13135550002\nitem1.X-ABLabel:Celular\nEND:VCARD`, 
"contextInfo": {
"forwardingScore": 1,
"isForwarded": true
}
}
}
}

const sabLive = {key: {participant: '0@s.whatsapp.net'}, message: {liveLocationMessage: {caption: `Usu√°rio: ${pushname}`}}} 

const sabPhoto = {key: {participant : '0@s.whatsapp.net'}, message: {imageMessage: {caption: pushname}}}

const sabVideo = {key: {participant : '0@s.whatsapp.net'},message: {videoMessage: {caption: pushname}}}

const sabContact = {key: {participant : '0@s.whatsapp.net'},message: {contactMessage: {displayName: `${pushname}`}}}

const sabDocument = {key: {participant : '0@s.whatsapp.net'}, message: {documentMessage: {caption: pushname}}} 

if(!isVerificado) {var selo = sabLive} else {var selo = info} 

// FUN√á√ïES DE MARCA√á√ïES ESSENCIAL \\

const menc_prt = info.message?.extendedTextMessage?.contextInfo?.participant

const menc_jid = args?.join(" ").replace("@", "") + "@s.whatsapp.net"

const menc_jid2 = info.message?.extendedTextMessage?.contextInfo?.mentionedJid

const sender_ou_n = q.includes("@") ? menc_jid : sender

const mrc_ou_numero = q.length > 6 && !q.includes("@") ? q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net` : menc_prt 
const menc_os2 = q.includes("@") ? menc_jid : menc_prt 

const marc_tds = q.includes("@") ? menc_jid : q.length > 6 && !q.includes("@") ? q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net` : menc_prt 

const menc_prt_nmr = q.length > 12 ? q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net` : menc_prt

////////////////////////////////////////////

global.gabolehtoxic = ("./gabolehtoxic.mp3")
//CRIPTOGRAFIA DE PONTA A PONTA 

////////////////////////////////////////////




var isUrl = (url) => {
if(linkfy.find(url)[0]) return true
return false
}

//if(info.key.fromMe) return

const reply = (teks) => {

sandro.sendMessage(from,

{text:teks, 

contextInfo:{ externalAdReply: 

{ showAdAttribution: true,

title: `${NomeDoBot}`,

body: `Nome: ${pushname}‚Ää`, 

previewType: "PHOTO",

thumbnailUrl: fotobot,

sourceUrl: channel, }}}, 

{ quoted: info})}

const identifyAtSign = (number) => {
return number.includes('@') ? txt.split('@')[1].replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : number.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net"
}

const divisores = (base) => {
  nmr = Number(base)
  caixa = []
  for(a = 0; a < nmr; a++) {
    for(b = 0; b < nmr; b++) {
      if(((a + 1) * (b + 1)) == nmr) caixa.push(a + 1)
    }
  }
  return caixa
}

const raiz = (base) => {
  nmr = Number(base)
  meta = nmr / 2
  total = 0
  for(i = 1; i < (meta + 1); i++) {
    if((i*i) == nmr) total += 1
  }
  if(total > 0) return true
  return false
}

const findRaiz = (base) => {
  nmr = Number(base)
  if(raiz(nmr)) {
    meta = nmr / 2
    caixa = []
    for(i = 1; i < (meta + 1); i++) {
      if((i*i) == nmr) caixa.push(i)
    }
    return caixa[0]
  } else return "O n√∫mero n√£o tem raiz"
}

const replyPeR = (texto) => {
  return new Promise((resolve) => {
setTimeout(() => {
sandro.sendMessage(from, { text: texto }, { quoted: info }).then(() => resolve()).catch((error) => {
console.log(JSON.stringify(error, null, 2));
resolve();
});
}, 1000);
});
};

const msgSemQuoted = (content, type, options = {}) => {
   const isFullUrl = (url) => new RegExp(/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)$/, 'gi').test(url);
const mediaKeys = ['image', 'video', 'sticker', 'audio', 'document', 'history', 'md-app-state'];
options[type || 'text'] = isFullUrl(content) && mediaKeys.includes(type) ? {url: content}: content;
return sandro.sendMessage(from, options).catch(e => {
reply("Erro ao enviar a mensagem..");
})
}


const time2 = moment().tz('America/Sao_Paulo').format('HH:mm:ss')
if(time2 > "00:00:00" && time2 < "05:00:00"){
    var tempo = 'Boa noite'
} if(time2 > "05:00:00" && time2 < "12:00:00"){
    var tempo = 'Bom dia'
} if(time2 > "12:00:00" && time2 < "18:00:00"){
    var tempo = 'Boa tarde'
} if(time2 > "18:00:00"){
    var tempo = 'Boa noite'
}

const sendSticker = (from, filename, info) => {
sandro.sendMessage(from, {sticker: {url: fileName}}, {quoted: selo})
}

const sendImage = (ytb) => {
sandro.sendMessage(from, {image: {url: ytb}}, {quoted:info})
}


const sendMess = (idGroup, textINFO) => {
sandro.sendMessage(idGroup, {text: textINFO})
}

const mentions = (teks, memberr, id) => {(id == null || id == undefined || id == false) ? sandro.sendMessage(from, {text: teks.trim(), mentions: memberr}) : sandro.sendMessage(from, {text: teks.trim(), mentions: memberr}, {quoted: info})
}
	
const mention = (teks= '', ms = info) => {
memberr = []
vy = teks.includes('\n') ? teks.split('\n') : [teks]
for(vz of vy){ for(zn of vz.split(' ')){
if(zn.includes('@'))memberr.push(parseInt(zn.split('@')[1])+'@s.whatsapp.net')
}}
sandro.sendMessage(from, {text: teks.trim(), mentions: memberr}, {quoted: ms}) 
}

const mentionSemQuoted = (teks= '', ms = info) => {
memberr = []
vy = teks.includes('\n') ? teks.split('\n') : [teks]
for(vz of vy){ for(zn of vz.split(' ')){
if(zn.includes('@'))memberr.push(parseInt(zn.split('@')[1])+'@s.whatsapp.net')
}}
sandro.sendMessage(from, {text: teks.trim(), mentions: memberr}) 
}

const mencionarIMG = (teks= '', Url, ms) => {
memberr = []
vy = teks.includes('\n') ? teks.split('\n') : [teks]
for(vz of vy){ for(zn of vz.split(' ')){
if(zn.includes('@'))memberr.push(parseInt(zn.split('@')[1])+'@s.whatsapp.net')
}}
sandro.sendMessage(from, {image: {url: Url}, caption: teks.trim(), mentions: memberr}, {quoted: ms}) 
}

const reagir = async (idgp, emj) => {
sandro.sendMessage(idgp, {react: {text: emj, key: info.key}} )
}

const verificarN = async(sla) => {
const [result] = await sandro.onWhatsApp(sla)
if(result == undefined) {
reply("Este usu√°rio n√£o √© existente no WhatsApp")
} else {
reply(`${sla} N√∫mero inserido √© existente no WhatsApp com o id: ${result.jid}`)
}
}

if(isGroup && isBotGroupAdmins && !isGroupAdmins && !SoDono && !info.key.fromMe) {
if(menc_jid2?.length >= groupMembers.length - 1) { 
sandro.sendMessage(from, {text: markingAllMember()})
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
sandro.groupParticipantsUpdate(from, [sender], "remove")
}
}

const enviarfigu = async (figu, tag) => {
sandro.sendMessage(from, {sticker: {url: figu}}, {quoted: tag})
}

if(isAutofigu && isGroup) {
async function autofiguf() {
setTimeout(async() => {    

if(budy.includes(`${prefix}sticker`) || budy.includes(`${prefix}s`) || budy.includes(`${prefix}stk`) || budy.includes(`${prefix}st`) || budy.includes(`${prefix}fsticker`) || budy.includes(`${prefix}f`) || budy.includes(`${prefix}fstiker`)) return

if(type == 'imageMessage') {
var pack = `‚Üß [ü§ñ] Criada por:\n‚Ä¢ ‚Ü≥ ${NomeDoBot}\n‚Äî\n‚Üß [üïµüèª‚Äç‚ôÇÔ∏è] Propriet√°rio:\n‚Ä¢ ‚Ü≥ ${NickDono}`
var author2 = `‚Üß [üë§] Feito por:\n‚Ä¢ ‚Ü≥ ${pushname}\n‚Äî\n‚Üß [‚òÅÔ∏è] Grupo:\n‚Ä¢ ‚Ü≥ ${groupName}`
owgi = await getFileBuffer(info.message.imageMessage, 'image')
let encmediaa = await sendImageAsSticker2(sandro, from, owgi, info, { packname:pack, author:author2})
DLT_FL(encmediaa)
}
if(type == 'videoMessage') {
if((isMedia && info.message.videoMessage.seconds < 10)) {
var pack = `‚Üß [ü§ñ] Criada por:\n‚Ä¢ ‚Ü≥ ${NomeDoBot}\n‚Äî\n‚Üß [üïµüèª‚Äç‚ôÇÔ∏è] Propriet√°rio:\n‚Ä¢ ‚Ü≥ ${NickDono}`
var author2 = `‚Üß [üë§] Feito por:\n‚Ä¢ ‚Ü≥ ${pushname}\n‚Äî\n‚Üß [‚òÅÔ∏è] Grupo:\n‚Ä¢ ‚Ü≥ ${groupName}`
owgi = await getFileBuffer(info.message.videoMessage, 'video')
let encmedia = await sendVideoAsSticker2(sandro, from, owgi, info, { packname:pack, author:author2})
DLT_FL(encmedia)
}
} 
}, 1000)
}
autofiguf().catch(e => {
console.log(e)
})
}

var nmrdnofc1 = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "")

if(isGroup && fs.existsSync(`./database/func/afk/afk-@${nmrdnofc1}.json`)) {
if(budy.indexOf(`@${nmrdnofc1}`) >= 0) {
const tabelin = JSON.parse(fs.readFileSync(`./database/func/afk/afk-@${nmrdnofc1}.json`));  
sandro.sendMessage(from, {text: mess.absenceRecordOwner(NickDono, tabelin)}, {quoted: selo})
}
}

if(isGroup && dataGp[0].ausentes?.length > 0 && menc_jid2?.length > 0 && JSON.stringify(dataGp[0].ausentes).includes(menc_jid2)) {
blue = [] 
for (i of menc_jid2) {
if(groupAdmins.indexOf(String(i)) != -1) blue.push(groupAdmins.indexOf(String(i)))
}
if(blue.length == 0) return
big = [] 
for ( i of blue) {
big.push(groupAdmins[i])
}
blr = []
for ( i = 0; i < big.length; i++) {
blr.push(dataGp[0].ausentes[dataGp[0].ausentes.map(i => i.id).indexOf(big[i])])
}
for ( i of blr) {
var blak = i
}

mention(mess.absenceRecordAdmin(blak))
}

if(isBotGroupAdmins && isGroupAdmins && body === "apaga") {
if(!menc_prt) return
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.message.extendedTextMessage.contextInfo.stanzaId, participant: menc_prt}})
}

if(SoDono && budy.includes("reiniciar-sab") || info.key.fromMe && budy.includes("reiniciar-sab")) {
fs.writeFileSync("./cnt-upd.json",JSON.stringify([], null, 2))
setTimeout(() => {
file = require.resolve("./connect.js")  
delete require.cache[file]
require(file)  
}, 500)
setTimeout(() => {
DLT_FL("./cnt-upd.json")
}, 1500)
}

if(!isPremium && nescessario.cmd_premium.includes(command)) return reply(enviar.msg.premium)


//========================================\\

//BAN GRUPO & BOT OFF
if(isGroup && isCmd && isBanchat && !SoDono) return

if(isGroup && isCmd && So_Adm && !SoDono && !isGroupAdmins) return

if(isBotoff && !SoDono) return

//=======================================\\

const sendStickerFromUrl = async(to, url) => {
try {
var names = Date.now() / 10000;
var download = function (uri, filename, callback) {
request.head(uri, function (err, res, body) {
request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
});
};
download(url, './sticker' + names + '.png', async function () {
console.log('Enviando sticker..');
let filess = './sticker' + names + '.png'
let asw = './sticker' + names + '.webp'
exec(`ffmpeg -i ${filess} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 ${asw}`, (err) => {
let media = fs.readFileSync(asw)
sandro.sendMessage(to, {sticker: media}, {sendEphemeral: true, contextInfo: { forwardingScore: 50, isForwarded: true}, quoted: selo}).catch(e => {
return reply(mess.error())
})
DLT_FL(filess)
DLT_FL(asw)
});
});
} catch {
return reply("Erro.. FNC")
}
}

//=========(isQuoted/consts)=============\\
const isImage = type == 'imageMessage'
const isVideo = type == 'videoMessage'
const isVisuU2 = type == 'viewOnceMessageV2'
const isAudio = type == 'audioMessage'
const isSticker = type == 'stickerMessage'
const isContact = type == 'contactMessage'
const isLocation = type == 'locationMessage'
const isProduct = type == 'productMessage'
const isMedia = (type === 'imageMessage' || type === 'videoMessage' || type === 'audioMessage' || type == "viewOnceMessage" || type == "viewOnceMessageV2")
typeMessage = body.substr(0, 50).replace(/\n/g, '')
if(isImage) typeMessage = "Image"
else if(isVideo) typeMessage = "Video"
else if(isAudio) typeMessage = "Audio"
else if(isSticker) typeMessage = "Sticker"
else if(isContact) typeMessage = "Contact"
else if(isLocation) typeMessage = "Location"
else if(isProduct) typeMessage = "Product"

const isQuotedMsg = type === 'extendedTextMessage' && content.includes('conversation')

const isQuotedMsg2 = type === 'extendedTextMessage' && content.includes('text')

const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')

const isQuotedVisuU = type === 'extendedTextMessage' && content.includes('viewOnceMessage')

const isQuotedVisuU2 = type === 'extendedTextMessage' && content.includes('viewOnceMessageV2')

const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')

const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')

const isQuotedDocW = type === 'extendedTextMessage' && content.includes('documentWithCaptionMessage')

const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')

const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')

const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage')

const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage')

const isQuotedProduct = type === 'extendedTextMessage' && content.includes('productMessage')
            
//////BLOCK CMD///////
//(CREDITOS AO KAUAN GAY)\\
if(isGroup){
const checar = getComandos(from)
if(checar === undefined) addComandosId(from)
}
if(isGroup && isCmd && !SoDono && !isnit && getComandoBlock(from).includes(command)) return reply('O comando foi bloqueado, entre em contato com a administra√ß√£o.')

///BLOCK CMD GLOBAL///
///(CR√âDITOS AO @SANDRO MD V11)///
if(isBlockCmdG.includes(command) && !SoDono) return reply('Ol√°, o comando est√° bloqueado para *uso global*, ou seja, todos os usu√°rios est√£o impossibilitados de usar ele.\n‚Äì\n‚Ä¢ Entre em contato com meu propriet√°rio para saber o motivo.')

////FIMMMMMMMMM/////

///// SISTEMA DE DINHEIRO /////
const { AdicionarGold, RemoverGold } = require("./arquivos/js/dinheiro.js")

///// FIMMMMMMMMMMMMM /////

const { color, bgcolor } = require('./arquivos/js/color.js')
const tipoMensagem = type == 'audioMessage' ? '√Åudio' : type == 'stickerMessage' ? 'Figurinha' : type == 'imageMessage' ? 'Imagem' : type == 'videoMessage' ? 'V√≠deo' : type == 'documentMessage' ? 'Documento' : type == 'contactMessage' ? 'Contato' : type == 'locationMessage' ? 'Localiza√ß√£o' ? 'Enquete' : 'pollCreationMessage' : 'Mensagem'

//CONSOLE DO TERMINAL
if(isConsole) {
if(isGroup && info.message?.reactionMessage?.text) {
console.log(colors.brightGreen(`
‚ï≠‚îÅ‚îÅ‚îÅ‚™© ${NomeDoBot} ‚™®‚îÅ‚îÅ‚îÅ
‚îÇ„Äî ${colors.brightYellow("USU√ÅRIO")} „Äï: ${pushname}
‚îÇ„Äî N√öMERO „Äï:„Äî ${colors.brightMagenta(sender.split("@")[0])} „Äï
‚îÇ„Äî ${isGroup ? colors.brightMagenta("GRUPO"): colors.brightMagenta("PRIVADO")} „Äï${isGroup ? `„Äî ${colors.cyan(groupName)} „Äï`: ""}
‚îÇ„Äî REA√á√ÉO „Äï:„Äî ${info.message.reactionMessage.text} „Äï
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ„ÄåÊÑõ„Äç‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`))  
} else if(isGroup && !isCmd) {
console.log(colors.brightGreen(`
‚ï≠‚îÅ‚îÅ‚îÅ‚™© ${NomeDoBot} ‚™®‚îÅ‚îÅ‚îÅ
‚îÇ„Äî ${colors.brightYellow("USU√ÅRIO")} „Äï: ${pushname}
‚îÇ„Äî N√öMERO „Äï:„Äî ${colors.brightMagenta(sender.split("@")[0])} „Äï
‚îÇ„Äî ${colors.brightMagenta("GRUPO")} „Äï:„Äî ${colors.cyan(groupName)} „Äï
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ„ÄåÊÑõ„Äç‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`))
} else if(isCmd && !isGroup) {
console.log(colors.brightGreen(`
‚ï≠‚îÅ‚îÅ‚îÅ‚™© ${NomeDoBot} ‚™®‚îÅ‚îÅ‚îÅ
‚îÇ„Äî ${colors.brightYellow("USU√ÅRIO")} „Äï: ${pushname}
‚îÇ„Äî N√öMERO „Äï:„Äî ${colors.brightMagenta(sender.split("@")[0])} „Äï
‚îÇ„Äî ${colors.red("PRIVADO")} „Äï 
‚îÇ„Äî COMANDO „Äï :„Äå ${command} „Äç
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ„ÄåÊÑõ„Äç‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  `)) 
} else if(isCmd && isGroup) {
console.log(colors.brightGreen(`
‚ï≠‚îÅ‚îÅ‚îÅ‚™© ${NomeDoBot} ‚™®‚îÅ‚îÅ‚îÅ
‚îÇ„Äî ${colors.brightYellow("USU√ÅRIO")} „Äï: ${pushname}
‚îÇ„Äî N√öMERO „Äï:„Äî ${colors.brightMagenta(sender.split("@")[0])} „Äï
‚îÇ„Äî ${colors.brightMagenta("GRUPO")} „Äï:„Äî ${colors.cyan(groupName)} „Äï
‚îÇ„Äî COMANDO „Äï:„Äå ${command} „Äç
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ„ÄåÊÑõ„Äç‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`))
} else {
console.log(colors.brightGreen(`
‚ï≠‚îÅ‚îÅ‚îÅ‚™© ${NomeDoBot} ‚™®‚îÅ‚îÅ‚îÅ
‚îÇ„Äî ${colors.brightYellow("USU√ÅRIO")} „Äï : ${pushname}
‚îÇ„Äî N√öMERO „Äï:„Äî ${colors.brightMagenta(sender.split("@")[0])} „Äï
‚îÇ„Äî ${colors.red("PRIVADO")} „Äï
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ„ÄåÊÑõ„Äç‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`))  
}
}

//menus
const { menu } = require("./menus/menu.js")
const { menudono } = require("./menus/menu.js")
const { adms } = require("./menus/menu.js")
const { menulogos } = require("./menus/menu.js")
const { brincadeiras } = require("./menus/menu.js")
const { figurinhas } = require("./menus/menu.js")
const { nsfw } = require("./menus/menu.js")
const { infodono } = require("./menus/menu.js")
const { menuprem } = require("./menus/menu.js")
const { efeitos } = require("./menus/menu.js")
const { semprefixo } = require("./menus/menu.js")
const { animes } = require("./menus/menu.js")
const { menulink } = require("./menus/menu.js")
const { rpgmenu } = require("./menus/menu.js")

///

// ========= || Jogo da Velha || ======== \\
async function joguinhodavelha() {
if(joguinhodavelhajs2.includes(from) || joguinhodavelhajs.includes(sender)) {
const cmde = budy.toLowerCase().split(" ")[0] || "";
let arrNum = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
if(fs.existsSync(`./arquivos/tictactoe/db/${from}.json`)) {
const boardnow = setGame(`${from}`);
if(budy == "Cex") return reply("why");
if(
budy.toLowerCase() == "s" ||
budy.toLowerCase() == "sim" ||
budy.toLowerCase() == "ok"
) {
if(boardnow.O == sender.replace("@s.whatsapp.net", "")) {
if(boardnow.status)
return reply(`O jogo j√° come√ßou antes!`);
const matrix = boardnow._matrix;
boardnow.status = true;
fs.writeFileSync(`./arquivos/tictactoe/db/${from}.json`,
JSON.stringify(boardnow, null, 2)
);
const chatAccept = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
                    
‚ùå : @${boardnow.X}
‚≠ï : @${boardnow.O}
               
Sua vez... : @${boardnow.turn == "X" ? boardnow.X : boardnow.O}

${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}
${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}
${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}
`;
mention(chatAccept);
}
} else if(
budy.toLowerCase() == "n" ||
budy.toLowerCase() == "n√£o" ||
budy.toLowerCase() == "no"
) {
if(boardnow.O == sender.replace("@s.whatsapp.net", "")) {
if(boardnow.status)
return reply(`O jogo j√° come√ßou!`);
DLT_FL(`./arquivos/tictactoe/db/${from}.json`);
mention(`@${boardnow.X} *_Infelizmente seu oponente n√£o aceitou o desafio ‚ùåüòï_*`)
joguinhodavelhajs.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha.json', JSON.stringify(joguinhodavelhajs))
joguinhodavelhajs2.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha2.json', JSON.stringify(joguinhodavelhajs2))
}
}
}

if(arrNum.includes(cmde)) {
const boardnow = setGame(`${from}`);
if(!boardnow.status) return reply(`Parece que seu oponente n√£o aceitou o desafio ainda...`)
if(
(boardnow.turn == "X" ? boardnow.X : boardnow.O) !=
     
sender.replace("@s.whatsapp.net", "")
)
return;
const moving = validmove(Number(budy), `${from}`);
const matrix = moving._matrix;
if(moving.isWin) {
if(moving.winner == "SERI") {
const chatEqual = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*
          
Jogo da velha termina empatado üòê
`;
reply(chatEqual);
DLT_FL(`./arquivos/tictactoe/db/${from}.json`);
joguinhodavelhajs.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha.json', JSON.stringify(joguinhodavelhajs)) 
joguinhodavelhajs2.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha2.json', JSON.stringify(joguinhodavelhajs2))
return;
}
const abt = Math.ceil(Math.random() + 4000)
const winnerJID = moving.winner == "O" ? moving.O : moving.X;
const looseJID = moving.winner == "O" ? moving.X : moving.O;
const limWin = Math.floor(Math.random() * 1) + 10;
const limLoose = Math.floor(Math.random() * 1) + 5;
const chatWon = `*üéÆ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏üïπÔ∏è*

O jogo da velha foi vencido pelo usu√°rio: @${winnerJID}..`;

sandro.sendMessage(from, {text: chatWon}, {quoted: selo,
mentions: [
moving.winner == "O" ?
moving.O + "@s.whatsapp.net" :
moving.X + "@s.whatsapp.net"]
});
setTimeout( () => {
if(fs.existsSync("./arquivos/tictactoe/db/" + from + ".json")) {
DLT_FL("./arquivos/tictactoe/db/" + from + ".json");
reply(`*üïπÔ∏èJOGO DA VELHA RESETADO...üïπÔ∏è*`);
} else {
console.log(colors.red(time, "red"), colors.magenta("[ EXPIRADO ]"), colors.red('Jogo da velha espirado..'));
}
joguinhodavelhajs.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha.json', JSON.stringify(joguinhodavelhajs))
joguinhodavelhajs2.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha2.json', JSON.stringify(joguinhodavelhajs2))
}, 300000) //5 minutos
reply(`Parab√©ns @${winnerJID} voc√™ ganhou o jogo da velha... ü•≥\nParab√©ns aos ambos jogadores, voc√™s foram bem, perder n√£o √© o fim, perder faz parte da vida.. N√£o desista!`)   
DLT_FL(`./arquivos/tictactoe/db/${from}.json`);
joguinhodavelhajs.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha.json', JSON.stringify(joguinhodavelhajs)) 
joguinhodavelhajs2.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha2.json', JSON.stringify(joguinhodavelhajs2))
} else {
const chatMove = `*„Äé üéÆ ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏ üïπÔ∏è „Äè*\n-\n‚ùå : @${moving.X}\n‚≠ï : @${moving.O}\n-\nAgora √© a vez do jogador: @${moving.turn == "X" ? moving.X : moving.O}\n-\n${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}\n${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}\n${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}`;
mention(chatMove);
}
} 
} 
}

// ==========[ NAMORO ]==========\\
const namoro1 = JSON.parse(fs.readFileSync("./database/func/namoro1.json"))

const namoro2 = JSON.parse(fs.readFileSync("./database/func/namoro2.json"))

//aceitar namoro
if(budy2.toLowerCase() === "s" || budy2.toLowerCase() === "sim") {
if(JSON.stringify(namoro2).includes(sender) && namoro2[namoro2.map(i => i.id).indexOf(sender)].idgp == from && isGroup) {
C14 = namoro2.map(i => i.id).indexOf(sender)
C12 = namoro1.map(i => i.usu1).indexOf(namoro2[C14].pedido + "@s.whatsapp.net")
namoro1[C12].namorados = true
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro1.push({usu1: sender, usu2: namoro2[C14].pedido, namorados: true, idgp: from, hora: hora, data: date})
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.splice(C14, 1)
fs.writeFileSync("./database/func/namoro2.json", JSON.stringify(namoro2))
mention(`ü•≥ Felicita√ß√µes @${namoro1[C12].usu1.split('@')[0]}! O (a) seu grande amor, @${sender.split('@')[0]}, aceitou o seu pedido de namoro.\nSeu par pode ser consultado no comando: ${prefix}minhadupla`)
}
}

//recusar namoro
if(budy2.toLowerCase() === "n" || budy2.toLowerCase().replace("√£", "a") === "nao") {
if(JSON.stringify(namoro2).includes(sender) && namoro2[namoro2.map(i => i.id).indexOf(sender)].idgp == from && isGroup) {
C14 = namoro2.map(i => i.id).indexOf(sender)
C12 = namoro1.map(i => i.usu1).indexOf(`${namoro2[C14].pedido}@s.whatsapp.net`)
mention(`Sinto muito @${namoro1[C12].usu1.split('@')[0]}! O (a) @${sender.split('@')[0]} n√£o te ama, deve est√° confuso(a) ou n√£o preparado(a) e por isso n√£o aceitou o seu pedido de namoro. üò¶`)
namoro1.splice(C12, 1)
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.splice(C14, 1)
fs.writeFileSync("./database/func/namoro2.json", JSON.stringify(namoro2))
}
}

//in√≠cio do akinator

const akinator = JSON.parse(fs.readFileSync("./database/grupos/games/akinator.json"))

if(JSON.stringify(akinator).includes(from) && akinator[akinator.map(i => i.id).indexOf(from)].jogador === sender && akinator[akinator.map(i => i.id).indexOf(from)].finish > 0) {
  if(budy2.toLowerCase() === "sim" || budy2.toLowerCase() === "s") {
    AB = akinator.map(i => i.id).indexOf(from)
    akinator.splice(AB, 1)
    fs.writeFileSync("./database/grupos/games/akinator.json", JSON.stringify(akinator, null, 2))
    reply(`Eu sabia cara, eu sou demais!`)
  } else if(budy2.toLowerCase().replace("√£", "a") === "nao" || budy2.toLowerCase() === "n") {
    AB = akinator.map(i => i.id).indexOf(from)
    akinator.splice(AB, 1)
    fs.writeFileSync("./database/grupos/games/akinator.json", JSON.stringify(akinator, null, 2))
    reply(`Poxa n√£o foi dessa vez... Quem sabe na pr√≥xima!Ô∏è`)
  }
}



if(JSON.stringify(akinator).includes(from) && akinator[akinator.map(i => i.id).indexOf(from)].jogador === sender && akinator[akinator.map(i => i.id).indexOf(from)].finish <= 0 && Number(akinator[akinator.map(i => i.id).indexOf(from)].dia) === Number(moment.tz('America/Sao_Paulo').format('DD')) && isGroup) {
  AB = akinator.map(i => i.id).indexOf(from)
  if(aki.progress <= 10) per = `„Äî *${aki.progress.toFixed(1)}%* „Äï[‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí]`
  if(aki.progress > 10) per = `„Äî *${aki.progress.toFixed(1)}%* „Äï[‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí]`
  if(aki.progress > 20) per = `„Äî *${aki.progress.toFixed(1)}%* „Äï[‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí]`
  if(aki.progress > 30) per = `„Äî *${aki.progress.toFixed(1)}%* „Äï[‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí]`
  if(aki.progress > 40) per = `„Äî *${aki.progress.toFixed(1)}%* „Äï[‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí]`
  if(aki.progress > 50) per = `„Äî *${aki.progress.toFixed(1)}%* „Äï[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí]`
  if(aki.progress > 60) per = `[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí] *${aki.progress.toFixed(1)}%*`
  if(aki.progress > 70) per = `[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí] *${aki.progress.toFixed(1)}%*`
  if(aki.progress > 80) per = `[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí] *${aki.progress.toFixed(1)}%*`
  if(aki.progress > 90) per = `[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí] *${aki.progress.toFixed(1)}%*`
  if(aki.progress >= 90 || aki.currentStep >= 90) {
      await aki.win()
      jogo.now = true
      akinator[AB].finish += 1
      fs.writeFileSync("./database/grupos/games/akinator.json", JSON.stringify(akinator, null, 2))
      sandro.sendMessage(from, {image: {url: aki.answers[0].absolute_picture_path }, caption: `„Äî ${aki.answers[0].name}: ${aki.answers[0].description} „Äï\n‚Äì\nüßôüèª‚Äç‚ôÇÔ∏è Hmm, acho que o seu personagem √© esse aqui... Acertei?\n‚Ä¢ ${II}Observa√ß√£o:{II} _Responda com "sim" ou "n√£o", sem as aspas._`}, {quoted: info})
    } else {
      if(budy2.toLowerCase() === "sim" || budy2.toLowerCase() === "s") {
        await aki.step("0")
        reply(`üßû‚Äç‚ôÇÔ∏è *ùêÄùêäùêàùêçùêÄùêìùêéùêë ùêêùêîùêÑùêíùêìùêàùêéùêçùêí:*\n‚Ä¢ Quest√£o: ${aki.question}\n‚Äì\nüìä: ${per}`)
      }
      if(budy2.toLowerCase().replace("√£", "a") === "nao" || budy2.toLowerCase() === "n") {
        await aki.step("1")
        reply(`üßû‚Äç‚ôÇÔ∏è *ùêÄùêäùêàùêçùêÄùêìùêéùêë ùêêùêîùêÑùêíùêìùêàùêéùêçùêí:*\n‚Ä¢ Quest√£o: ${aki.question}\n‚Äì\nüìä: ${per}`)
      }
      if(budy2.toLowerCase().replace("√£", "a") === "nao sei" || budy2.toLowerCase() === "nsei" || budy2.toLowerCase() === "n sei") {
        await aki.step("2")
        reply(`üßû‚Äç‚ôÇÔ∏è *ùêÄùêäùêàùêçùêÄùêìùêéùêë ùêêùêîùêÑùêíùêìùêàùêéùêçùêí:*\n‚Ä¢ Quest√£o: ${aki.question}\n‚Äì\nüìä: ${per}`)
      }
      if(budy2.toLowerCase() === "provavelmente sim" || budy2.toLowerCase() === "provavelmente s") {
        await aki.step("3")
        reply(`üßû‚Äç‚ôÇÔ∏è *ùêÄùêäùêàùêçùêÄùêìùêéùêë ùêêùêîùêÑùêíùêìùêàùêéùêçùêí:*\n‚Ä¢ Quest√£o: ${aki.question}\n‚Äì\nüìä: ${per}`)
      }
      if(budy2.toLowerCase() === "provavelmente nao" || budy2.toLowerCase() === "provavelmente n") {
        await aki.step("4")
        reply(`üßû‚Äç‚ôÇÔ∏è *ùêÄùêäùêàùêçùêÄùêìùêéùêë ùêêùêîùêÑùêíùêìùêàùêéùêçùêí:*\n‚Ä¢ Quest√£o: ${aki.question}\n‚Äì\nüìä: ${per}`)
      }
    }
}

//
// LOADING

async function carregamento() {
txt1 = `ùôæùöãùöùùöéùöóùöçùöò ùöõùöéùöúùöûùöïùöùùöäùöçùöòùöúÍ¶ΩÍ¶ºÃ∑‡ßß_\n_„Äé ü·¥è·¥Ä·¥Ö…™…¥…¢„Äè:`
var carre = [
`${txt1} ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô10%`,
`${txt1} ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô35%`,
`${txt1} ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äô51%`,
`${txt1} ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äô62%`,
`${txt1} ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äô80%`,
`${txt1} ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äô100%`,
`@${sender.split("@")[0]}_\n_‚Ä¢ Pesquisa realizada, Aguarde um pouco para ser enviado.._`]
let { key } = await sandro.sendMessage(from, {text: `Ok @${sender.split("@")[0]}_\n_‚Ä¢ Obtendo os resultados de sua pesquisa.._`, mentions: [sender]}, {quoted: selo})
for (let i = 0; i < carre.length; i++) {
await sandro.sendMessage(from, {text: carre[i], mentions: [sender], edit: key });
}
}
// ==========[ ANAGRAMA ]==========\\

if(isGroup && fs.existsSync(`./database/grupos/games/anagrama/${from}.json`)){
let dataA = JSON.parse(fs.readFileSync(`./database/grupos/games/anagrama/${from}.json`))
if(budy.slice(0,4).toUpperCase() == dataA.palavraOriginal.slice(0,4).toUpperCase() && budy.toUpperCase() != dataA.palavraOriginal) return reply('Est√° perto...')
if(budy.toUpperCase() == dataA.palavraOriginal) { sandro.sendMessage(from, {text: `üéâ Parab√©ns *${pushname}*, voc√™ acertou o anagrama apresentado.\nA palavra original era: *${dataA.resposta}*. Estou iniciando o pr√≥ximo jogo em 5s!`}, {"mentionedJid": [sender]}), fs.unlinkSync(`./database/grupos/games/anagrama/${from}.json`)		
setTimeout(async() => {
fs.writeFileSync(`./database/grupos/games/anagrama/${from}.json`, `${JSON.stringify(palavrasANA[Math.floor(Math.random() * palavrasANA.length)])}`)
dataAB = JSON.parse(fs.readFileSync(`./database/grupos/games/anagrama/${from}.json`))
sandro.sendMessage(from, {text: `üåüüò≤ Decifre a palavra embaralhada abaixo, qual ser√° a ordem correta?\n‚Äî\n‚Ä¢ Anagrama: *${shuffle(dataAB.palavraOriginal)}*\n‚Ä¢ Dica para ajudar a resolver o anagrama: *${dataAB.dica}*`}, {quoted: selo})
}, 5000)
}}

if(isGroup && fs.existsSync(`./database/grupos/games/quiz-animais/${from}.json`)){
let dQ = JSON.parse(fs.readFileSync(`./database/grupos/games/quiz-animais/${from}.json`))
if(budy.slice(0,4).toUpperCase() == dQ.original.slice(0,4).toUpperCase() && budy.toUpperCase() != dQ.original) return reply('est√° perto')
if(budy.toUpperCase() == dQ.original) { 
sandro.sendMessage(from,{text: `üéâ Parab√©ns *${pushname}*, voc√™ acertou! O animal era: *${dQ.resposta}*.\n‚Ä¢ Estou iniciando o pr√≥ximo jogo em 5s!`}, {"mentionedJid": [sender]}); fs.unlinkSync(`./database/grupos/games/quiz-animais/${from}.json`)		
setTimeout(async() => {
fs.writeFileSync(`./database/grupos/games/quiz-animais/${from}.json`, `${JSON.stringify(quizanimais[Math.floor(Math.random() * quizanimais.length)])}`)
dataQA = JSON.parse(fs.readFileSync(`./database/grupos/games/quiz-animais/${from}.json`))
wew = await getBuffer(dataQA.foto)
await sandro.sendMessage(from, {image: wew, caption: `ü§î Pergunta: ${dataQA.question}`}, {quoted: info})
}, 5000)
}
}

function gerarnum() {
  return Math.floor(Math.random() * 100) + 1;
  }

if(isGroup && fs.existsSync(`./database/grupos/games/gartic/${from}.json`)){
let perg_gartic = JSON.parse(fs.readFileSync(`./database/grupos/games/gartic/${from}.json`))
if(budy.slice(0,4).toUpperCase() == perg_gartic.resposta.slice(0,4).toUpperCase() && budy.toUpperCase() != perg_gartic.resposta) return reply('Est√° perto!')
if(budy.toUpperCase() == perg_gartic.resposta) { 
sandro.sendMessage(from,{text: `*DESCOBERTO!* Parab√©ns ${pushname}, iniciando o pr√≥ximo jogo em 5 segundos.`}, {"mentionedJid": [sender]}); fs.unlinkSync(`./database/grupos/games/gartic/${from}.json`)		
setTimeout(async() => {
fs.writeFileSync(`./database/grupos/games/gartic/${from}.json`, `${JSON.stringify(garticArchives[Math.floor(Math.random() * garticArchives.length)])}`)
let dataGartic2 = JSON.parse(fs.readFileSync(`./database/grupos/games/gartic/${from}.json`))
garticText = `üë©üèº‚Äçüè´ - A resposta √© representada por um(a): ${dataGartic2.pergunta}\nüìú - A resposta supostamente come√ßa com a(s) letra(s): "${dataGartic2.letra_inicial}"\nü§î - Hmmm, cont√©m tra√ßos? ${dataGartic2.contem_tra√ßos}\n‚Äì\n‚ùìÔ∏è - *N√£o sabe a resposta?* _Pe√ßa ao adm do grupo para usar o comando *${prefix}revelargartic* para revelar a resposta correta da afirma√ß√£o._`
wew = await getBuffer(`${dataGartic2.imagem}`)
await sandro.sendMessage(from, {image: wew, caption: garticText}, {quoted: selo})
}, 5000)
}
}

if(isGroup && fs.existsSync(`./database/grupos/games/enigma/${from}.json`)){
let enigmaData = JSON.parse(fs.readFileSync(`./database/grupos/games/enigma/${from}.json`))
if(budy.slice(0,4).toUpperCase() == enigmaData.respostaEne.slice(0,4).toUpperCase() && budy.toUpperCase() != enigmaData.respostaEne) return reply('Est√° perto!')
if(budy.toUpperCase() == enigmaData.respostaEne) { 
sandro.sendMessage(from,{text: `*ENIGMA RESOLVIDO!* Parab√©ns ${pushname}, iniciando o pr√≥ximo jogo em 5 segundos.`}, {"mentionedJid": [sender]}), fs.unlinkSync(`./database/grupos/games/enigma/${from}.json`)	
setTimeout(async() => {
fs.writeFileSync(`./database/grupos/games/enigma/${from}.json`, `${JSON.stringify(enigmaArchive[Math.floor(Math.random() * enigmaArchive.length)])}`)
enigmaD = JSON.parse(fs.readFileSync(`./database/grupos/games/enigma/${from}.json`))
enigmaTezt = `üìú - Resolva o seguinte enigma abaixo:\n‚Äì\n${enigmaD.charada}\n‚Äì\n‚ùìÔ∏è - *N√£o sabe a resposta?* _Pe√ßa ao adm do grupo para usar o comando *${prefix}revelarenigma* para revelar a resposta correta da enigma._`
wew = await getBuffer(`https://i.imgur.com/OqeFhHP.jpeg`)
await sandro.sendMessage(from, {image: wew, caption: enigmaTezt}, {quoted: selo})
}, 5000)
}
}

if(isGroup && fs.existsSync(`./database/grupos/games/wmusic/${from}.json`)){
whatMusic = JSON.parse(fs.readFileSync(`./database/grupos/games/wmusic/${from}.json`))
if(budy.slice(0,4).toUpperCase() == whatMusic.resposta.slice(0,4).toUpperCase() && budy.toUpperCase() != whatMusic.resposta) return reply('T√° perto hein! Tente novamente...')
if(budy.toUpperCase() == whatMusic.resposta) { 
sandro.sendMessage(from,{text: `‚Ä¢ Resposta Correta: *${whatMusic.resposta}*\nParab√©ns ${pushname}, iniciando o pr√≥ximo jogo em 5 segundos.`}, {"mentionedJid": [sender]}), fs.unlinkSync(`./database/grupos/games/wmusic/${from}.json`)		
setTimeout(async() => {
fs.writeFileSync(`./database/grupos/games/wmusic/${from}.json`, `${JSON.stringify(whatMusicAr[Math.floor(Math.random() * whatMusicAr.length)])}`)
wmusic = JSON.parse(fs.readFileSync(`./database/grupos/games/wmusic/${from}.json`))
textM = `üé∂üéß ùêñùêáùêÄùêì ùêåùêîùêíùêàùêÇ? üò±üí°\n‚Äì\n${wmusic.trechoMusic}\n‚Äì\nü§îüò± Qual m√∫sica pertence o trecho apresentado acima?\n‚Ä¢ ${II}Dica:${II} ${wmusic.dica}`
await sandro.sendMessage(from, {text: textM}, {quoted: selo})
}, 5000)
}
}

//=================================\\

function contar(frase, letraProcurada) { 
var total = 0; [...frase].forEach(letra => {
if(letra === letraProcurada) total++; 
}); 
return total; 
}

joguinhodavelha()

var minesId = []
for(let obj of mines) minesId.push(obj.id)
const isPlayMines = (await mines.find(obj => obj.id == from)) ? true : false
var minecor = ['a1', 'a2', 'a3', 'a4', 'a5', 'b1', 'b2', 'b3', 'b4', 'b5', 'c1', 'c2', 'c3', 'c4', 'c5', 'd1', 'd2', 'd3', 'd4', 'd5', 'e1', 'e2', 'e3', 'e4', 'e5']

// Objeto para armazenar as advert√™ncias dos usu√°rios
global.warnedUsers = global.warnedUsers || {};

if (isAntilinkgp && isGroup && isBotGroupAdmins && !isGroupAdmins) {
    if (Procurar_String.includes("chat.whatsapp.com/") || Procurar_String.includes("whatsapp.com/channel")) {
        if (isBot) return;

        link_dgp = await sandro.groupInviteCode(from);
        if (Procurar_String.match(link_dgp)) return reply('Link do nosso grupo, n√£o irei remover..');

        // Apagar a mensagem do usu√°rio
        await sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender }});

        // Verificar se o usu√°rio j√° foi advertido antes
        if (!global.warnedUsers[sender]) {
            global.warnedUsers[sender] = true; // Registrar advert√™ncia
            return sandro.sendMessage(from, { text: `‚ö†Ô∏è @${sender.split("@")[0]}, links e divulga√ß√£o n√£o s√£o permitidos! Esta √© sua √∫nica advert√™ncia. Caso envie novamente, ser√° removido do grupo.`, mentions: [sender] });
        }

        // Se o usu√°rio j√° foi advertido, ele ser√° removido
        delete global.warnedUsers[sender]; // Remover advert√™ncia ap√≥s remo√ß√£o

        if (!JSON.stringify(groupMembers).includes(sender)) return;

        // Remover o usu√°rio do grupo
        setTimeout(() => {
            sandro.groupParticipantsUpdate(from, [sender], 'remove');
        }, 1000);
    }
}

const groupIdscount = [];
for(let obj of countMessage) {
groupIdscount.push(obj.groupId);
}

// MUTAR USU√ÅRIO 
const GroupsMutedActived = []
for(let obj of muted) {
    GroupsMutedActived.push(obj.jid)
}
const isMuted = (isGroup && GroupsMutedActived.indexOf(from) >= 0) ? true : false
const NumbersMuted = isMuted ? muted[GroupsMutedActived.indexOf(from)].numbers : []
if(isMuted && NumbersMuted.indexOf(sender) >= 0){
setTimeout(async () => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 1000)
return
}

//====(CONTADOR-DE-MENSAGENS)=======\\
var numbersIds = []
if(isGroup && groupIdscount.indexOf(from) >= 0) {
var ind = groupIdscount.indexOf(from)
for(let obj of countMessage[ind].numbers) {numbersIds.push(obj.id)}
if(numbersIds.indexOf(sender) >=0) {
var indnum = numbersIds.indexOf(sender)
var RSM_CN = countMessage[ind].numbers[indnum]
type == "stickerMessage" ? "" : RSM_CN.messages += isCmd ? 0 : 1
type == "stickerMessage" ? "" : RSM_CN.cmd_messages += isCmd ? 1 : 0
type == "stickerMessage" ? "" : RSM_CN.aparelho = adivinha
RSM_CN.figus += type == "stickerMessage" ? 1 : 0
fs.writeFileSync('./settings/media/countmsg.json', JSON.stringify(countMessage, null, 2)+ '\n')
} else {
const messages = isCmd ? 0 : 1
const cmd_messages = isCmd ? 1 : 0
var figus = type == "stickerMessage" ? 1 : 0
countMessage[ind].numbers.push({
id: sender,
messages: messages,
cmd_messages: cmd_messages, 
aparelho: adivinha, 
figus: figus
})
fs.writeFileSync('./settings/media/countmsg.json', JSON.stringify(countMessage, null, 2) + '\n')
}
} else if(isGroup) {
countMessage.push({
groupId: from,
numbers: [{
id: sender,
messages: 2,
figus: 0,
cmd_messages: isCmd ? 1 : 0, 
aparelho: adivinha
}]
})
fs.writeFileSync('./settings/media/countmsg.json', JSON.stringify(countMessage, null, 2) + '\n')
}

// PARA LIMPAR OS DADOS DOS USU√ÅRIOS QUE J√Å SAIU DO GRUPO...
async function ClearMembersInactive() {
var RD_CNT = countMessage[countMessage.map(i => i.groupId).indexOf(from)].numbers
CNT1 = []; for ( i of groupMembers) {CNT1.push(i.id)} 
CNT = []; for ( i of RD_CNT) {
if(!CNT1.includes(i.id)) CNT.push(i)}
for ( i of CNT) {
RD_CNT.splice(RD_CNT.map(i => i.id).indexOf(i.id), 1)}
fs.writeFileSync("./settings/media/countmsg.json", JSON.stringify(countMessage, null, 2))
}

const pickRandom = (arr) => {
return arr[Math.floor(Math.random() * arr.length)]
}

//=========(EVAL-EXECU√á√ïES)=========\\

if(budy.startsWith('>')){
try {
if(info.key.fromMe) return 
if(!SoDono && !isnit && !issupre && !ischyt && !issupre && !ischyt) return
console.log('[', colors.cyan('EVAL'),']', colors.yellow(moment(info.messageTimestamp * 1000).format('DD/MM HH:mm:ss')), colors.green(budy))
return sandro.sendMessage(from, {text: JSON.stringify(eval(budy.slice(2)),null,'\t')}).catch(e => {
return reply(String(e))
})
} catch (e){
return reply(String(e))
}
}

if(budy.startsWith('(>')){
try {
if(info.key.fromMe) return   
if(!SoDono && !isnit && !issupre && !ischyt && !issupre && !ischyt) return 
var konsol = budy.slice(3)
Return = (sul) => {
var sat = JSON.stringify(sul, null, 2)
bang = util.format(sat)
if(sat == undefined){
bang = util.format(sul)
}
return sandro.sendMessage(from, {text: bang}, {quoted: selo})
}

sandro.sendMessage(from, {text: util.format(eval(`;(async () => { ${konsol} })()`))}).catch(e => { 
return reply(String(e))
})
console.log('\x1b[1;37m>', '[', '\x1b[1;32mEXEC\x1b[1;37m', ']', time, colors.green(">"), 'from', colors.green(sender.split('@')[0]), 'args :', colors.green(args.length))
} catch(e) {
return reply(String(e))
console.log(e)
}
}

if(body.startsWith('$')) {
if(info.key.fromMe) return 
if(!SoDono && !isnit) return 
exec(q, (err, stdout) => {
if(err) return reply(`${err}`)
if(stdout) {
reply(stdout)
}
})
}

//======================================\\


//======(ANTI-IMAGEM)========\\
if(isAntiImg && isBotGroupAdmins && type == 'imageMessage') {
if(info.key.fromMe) return
if(isGroupAdmins) return sandro.sendMessage(from, {text: mess.messageProhibitedDetAdmin()}, {quoted: info})
if(dataGp[0].legenda_imagem != "0") {
sandro.sendMessage(from, {text: dataGp[0].legenda_imagem}, {quoted: info})  
}
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify(groupMembers).includes(sender)) return  
sandro.groupParticipantsUpdate(from, [sender], 'remove')
}

//======(ANTI-STICKER)========\\
if(isAntiSticker && isBotGroupAdmins && type == 'stickerMessage') {
if(info.key.fromMe) return
if(isGroupAdmins) return sandro.sendMessage(from, {text: mess.messageProhibitedDetAdmin()}, {quoted: info})
sandro.sendMessage(from, {text: mess.messageProhibitedDetUser()}, {quoted: info})
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify(groupMembers).includes(sender)) return  
sandro.groupParticipantsUpdate(from, [sender], 'remove')
}

if(Antidoc && isBotGroupAdmins && type == 'documentMessage') {
if(info.key.fromMe) return
if(isGroupAdmins) return sandro.sendMessage(from, {text: mess.messageProhibitedDetAdmin()}, {quoted: info})
if(dataGp[0].legenda_documento != "0") {
sandro.sendMessage(from, {text: dataGp[0].legenda_documento}, {quoted: info}) 
}
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify(groupMembers).includes(sender)) return  
sandro.groupParticipantsUpdate(from, [sender], 'remove')
}

let isTrueFalse = Array('tiktok', 'facebook','instagram','twitter','ytmp3','ytmp4','play', 'playmix', 'play2', 'play3', 'playvid', 'playvid2').some(item => item === command)

if(isUrl(PR_String) && isAntiLinkHard && !isGroupAdmins && isBotGroupAdmins && !info.key.fromMe) {
if(Procurar_String.includes("chat.whatsapp.com")) {
link_dgp = await sandro.groupInviteCode(from)
if(Procurar_String.match(link_dgp)) return reply('Link do nosso grupo, n√£o irei remover.. ') 
}
if(isCmd && isTrueFalse) return
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
sandro.groupSettingUpdate(from, 'announcement')
setTimeout(() => {
sandro.groupSettingUpdate(from, 'not_announcement')
}, 1200)
if(!JSON.stringify(groupMembers).includes(sender)) return
sandro.groupParticipantsUpdate(from, [sender], 'remove')
}

// ANTI NOTAS FAKES ==================>

if(isAntiNotas && budy2.toString().match(/(üí≥|üíé|üí∏|üíµ|üí∑|üí∂|ü™ô|üí∞|ü§ë|‚öñÔ∏è)/gi) && isBotGroupAdmins && !isGroupAdmins && !SoDono && !info.message?.reactionMessage?.text && budy2.length > 20) {
let verificar = budy2.toString().match(/(üí≥|üíé|üí∏|üíµ|üí∑|üí∂|ü™ô|üí∞|ü§ë|‚öñÔ∏è)/gi)
if(verificar && budy.length < 100) return  
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify(groupMembers).includes(sender)) return  
sandro.groupParticipantsUpdate(from, [sender], 'remove')
}

//FINALZIN ===========================>


//======(ANTI-VIDEO)========\\

if(isAntiVid && isBotGroupAdmins && type == 'videoMessage') {
if(isGroupAdmins) return sandro.sendMessage(from,{text: mess.messageProhibitedDetAdmin()}, {quoted: info})
if(dataGp[0].legenda_video == "0") {
sandro.sendMessage(from, {text: mess.messageProhibitedDetUser()}, {quoted: info})
} else {
sandro.sendMessage(from, {text: dataGp[0].legenda_video}, {quoted: info})  
}
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify(groupMembers).includes(sender)) return
sandro.groupParticipantsUpdate(from, [sender], 'remove')
}

//======(ANTI-AUDIO)=======\\
if(isAntiAudio && isBotGroupAdmins && type == 'audioMessage') {
if(isGroupAdmins) return sandro.sendMessage(from, {text: mess.messageProhibitedDetAdmin()}, {quoted: info})
sandro.sendMessage(from, {text: mess.messageProhibitedDetUser()}, {quoted: info})
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify(groupMembers).includes(sender)) return
sandro.groupParticipantsUpdate(from, [sender], 'remove')
}

var enviarmen = mensagens[Math.floor(Math.random() * mensagens.length)] 

//========(ANTI_LIGAR)========\\

if(!isGroup && isAnticall) {
sandro.ws.on('CB:call', async (B) => {
var msgcallblock = `./database/func/call-msg_block-${sender}.json`  
if(!fs.existsSync(msgcallblock)) {
fs.writeFileSync(msgcallblock, JSON.stringify(mess.antiCalls(), null, 2))
var msgcallbl = JSON.parse(fs.readFileSync(msgcallblock))
if(B.content[0].tag == 'offer') {
sandro.sendMessage(B.content[0].attrs['call-creator'], { text: msgcallbl }).then(() => { 
sandro.updateBlockStatus(B.content[0].attrs['call-creator'], "block")
DLT_FL(msgcallblock)
})
}
}
})
}

//====================================\\

{var hora_ = moment.tz('America/Sao_Paulo').format('HH:mm');
var hora_2 = moment.tz('America/Sao_Paulo').format('mm');
for (i of black_) {
if(i.hora == hora_) {var blu_dc = true} else {var blu_dc = false}
}
if(blu_dc == true) {
for ( i of black_) {
if(i.hora == hora_) var ik = i}
for ( i of ik?.PUXAR) {
if(i.avisou == true) return
if(i.length == 0) return
sandro.sendMessage(i.idgp, {text: i.msg})
i.avisou = true 
fs.writeFileSync("./database/grupos/avisos.json", JSON.stringify(black_, null, 2))
}}; for ( i of black_) {
if(hora_2 >= i.hora.split(":")[1]+parseInt(1)) {
var ik2 = i
var ik_r = true} else {var ik_r = false}
}; if(ik_r == true) { 
for ( i of ik2.PUXAR) {
if(i.avisou == true) {
i.avisou = false
fs.writeFileSync("./database/grupos/avisos.json", JSON.stringify(black_, null, 2))}}}}

const tempo2 = moment().tz('America/Sao_Paulo').format('HH:mm:ss')

if(tempo2 < "23:59:00"){
var dizendoTempo = 'Boa noite'
}
if(tempo2 < "19:00:00"){
var dizendoTempo = 'Boa noite'
}
if(tempo2 < "18:00:00"){
var dizendoTempo = 'Boa tarde'
}
if(tempo2 < "15:00:00"){
var dizendoTempo = 'Boa tarde'
}
if(tempo2 < "10:00:00"){
var dizendoTempo = 'Bom dia'
}
if(tempo2 < "05:00:00"){
var dizendoTempo = 'Bom Amanhecer'
}
if(tempo2 < "03:00:00"){
var dizendoTempo = 'Boa Madrugada'
}

/* ANTIPV1 - Este anti pv bloqueia aqueles que encaminham mensagem no pv do bot.. */
var USUARIOS_BLOQ = []
if(isAntiPv && !USUARIOS_BLOQ.includes(sender)) {
if(!isGroup && !SoDono && !isnit && !isPremium){ 
await sleep(2500)
reply(msgantipv1.replace('#nome#', pushname))
setTimeout(async () => {
sandro.updateBlockStatus(sender, 'block')
}, 2000)
}
USUARIOS_BLOQ.push(sender);
} 


/* ANTIPV3 - Ignora todos os que falam ou usam os comandos no privado, exceto user premium e o propriet√°rio atual do bot. */
if(!isGroup && !isPremium && !SoDono && !info.key.fromMe && isAntiPv3) {return}

//====================================\\
var i9 = countMessage.map(i => i.groupId).indexOf(from)
var idgrupo = groupIdscount.indexOf(from)

var idusu = numbersIds?.indexOf(sender)

if(body != undefined && !info.message?.reactionMessage?.text && !JSON.stringify(level2).includes(sender) && isGroup) {
level2.push({id: sender, nick: pushname, level: 1, contador: 0, block: false})
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
}

if(body != undefined && !info.message?.reactionMessage?.text && JSON.stringify(level2).includes(sender) && level2[level2.map(i => i.id).indexOf(sender)].block == false && isGroup && isLevelingOn) {
AB = level2.map(i => i.id).indexOf(sender)
level2[AB].contador += 1
level2[AB].nick = pushname
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
switch(level2[AB].contador) {
case 100: case 200: case 300: case 400: case 500: case 600: case 700: case 800: case 900: case 1200: case 1500: case 1800: case 2100: case 2700: case 3300: case 3900: case 4500: case 5000: case 5500: case 6500: case 7500: case 9000: case 10500: case 12000: case 13500: case 15000: case 20000: case 25000: case 30000: case 35000: case 40000: case 50000: case 60000: case 70000: case 80000: case 90000: case 100000: case 150000: case 200000: case 300000: case 400000: case 500000: case 1000000: case 1500000: case 2000000: case 5000000:
var newlevel = level2[AB].contador + 1
if(newlevel < 100) newpatente = "Bronze I ü•â"
if(newlevel >= 100 && newlevel < 200) newpatente = "Bronze II ü•â"
if(newlevel >= 200 && newlevel < 300) newpatente = "Bronze III ü•â"
if(newlevel >= 300 && newlevel < 400) newpatente = "Prata I ü•à"
if(newlevel >= 400 && newlevel < 500) newpatente = "Prata II ü•à"
if(newlevel >= 500 && newlevel < 600) newpatente = "Prata III ü•à"
if(newlevel >= 600 && newlevel < 700) newpatente = "Ouro I ü•á"
if(newlevel >= 700 && newlevel < 800) newpatente = "Ouro II ü•á"
if(newlevel >= 800 && newlevel < 900) newpatente = "Ouro III ü•á"
if(newlevel >= 900 && newlevel < 1200) newpatente = "Ouro IV ü•á"
if(newlevel >= 1200 && newlevel < 1500) newpatente = "Platina I üåÄ"
if(newlevel >= 1500 && newlevel < 1800) newpatente = "Platina II üåÄ"
if(newlevel >= 1800 && newlevel < 2100) newpatente = "Platina III üåÄ"
if(newlevel >= 2100 && newlevel < 2700) newpatente = "Platina IV üåÄ"
if(newlevel >= 2700 && newlevel < 3300) newpatente = "Diamante I üíé"
if(newlevel >= 3300 && newlevel < 3900) newpatente = "Diamante II üíé"
if(newlevel >= 3900 && newlevel < 4500) newpatente = "Diamante III üíé"
if(newlevel >= 4500 && newlevel < 5000) newpatente = "Diamante IV üíé"
if(newlevel >= 5000 && newlevel < 5500) newpatente = "Paladino I üîÆ"
if(newlevel >= 5500 && newlevel < 6500) newpatente = "Paladino II üîÆ"
if(newlevel >= 6500 && newlevel < 7500) newpatente = "Paladino III üîÆ"
if(newlevel >= 7500 && newlevel < 9000) newpatente = "Paladino IV üîÆ"
if(newlevel >= 9000 && newlevel < 10500) newpatente = "Mestre I ‚ù§Ô∏è‚Äçüî•"
if(newlevel >= 10500 && newlevel < 12000) newpatente = "Mestre II ‚ù§Ô∏è‚Äçüî•"
if(newlevel >= 12000 && newlevel < 13500) newpatente = "Mestre III ‚ù§Ô∏è‚Äçüî•"
if(newlevel >= 13500 && newlevel < 15000) newpatente = "Mestre IV ‚ù§Ô∏è‚Äçüî•"
if(newlevel >= 15000 && newlevel < 20000) newpatente = "Mestre V ‚ù§Ô∏è‚Äçüî•"
if(newlevel >= 20000 && newlevel < 25000) newpatente = "Desafiante I üëë"
if(newlevel >= 25000 && newlevel < 30000) newpatente = "Desafiante II üëë"
if(newlevel >= 30000 && newlevel < 35000) newpatente = "Desafiante III üëë"
if(newlevel >= 35000 && newlevel < 40000) newpatente = "Desafiante IV üëë"
if(newlevel >= 40000 && newlevel < 50000) newpatente = "Desafiante V üëë"
if(newlevel >= 50000 && newlevel < 60000) newpatente = "Usu√°rio Superior I üéì"
if(newlevel >= 60000 && newlevel < 70000) newpatente = "Usu√°rio Superior II üéì"
if(newlevel >= 70000 && newlevel < 80000) newpatente = "Mestre Supremo I ü™Ñ"
if(newlevel >= 80000 && newlevel < 90000) newpatente = "Mestre Supremo II ü™Ñ"
if(newlevel >= 90000 && newlevel < 100000) newpatente = "Mestre Supremo III ü™Ñ"
if(newlevel >= 100000 && newlevel < 150000) newpatente = "Conquistador I ‚öíÔ∏è"
if(newlevel >= 150000 && newlevel < 200000) newpatente = "Conquistador II ‚öíÔ∏è"
if(newlevel >= 200000 && newlevel < 300000) newpatente = "Conquistador III ‚öíÔ∏è"
if(newlevel >= 300000 && newlevel < 400000) newpatente = "Desbravador I üõ∞Ô∏è"
if(newlevel >= 400000 && newlevel < 500000) newpatente = "Desbravador II üõ∞Ô∏è"
if(newlevel >= 500000 && newlevel < 1000000) newpatente = "Desbravador III üõ∞Ô∏è"
if(newlevel >= 1000000 && newlevel < 1500000) newpatente = "Grande Mestre I ü™©"
if(newlevel >= 1500000 && newlevel < 2000000) newpatente = "Grande Mestre II ü™©"
if(newlevel >= 2000000 && newlevel < 5000000) newpatente = "Grande Mestre III ü™©"
if(newlevel >= 5000000 && newlevel < 10000000) newpatente = "Supremacy X ‚öúÔ∏è"
if(newlevel >= 10000000) newpatente = "Veterano üé©"
level2[AB].level += 1
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
sandro.sendMessage(from, {text: `*üéâ LEVEL UP! üéñÔ∏è*\nParab√©ns *@${sender.split("@")[0]}*, voc√™ acaba de subir de level.\n‚Ä¢ O novo level foi alcan√ßado por completar *${level2[AB].contador} XP.*\n‚Ä¢ Sua nova patente foi desbloqueada, voc√™ agora √© *${newpatente}*`, mentions: [sender]}, {quoted: selo})
break
case 10000000:
BC = level2.map(i => i.id).indexOf(sender)
level2[BC].level += 1
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
reply(`üéâ Parab√©ns ${pushname}, voc√™ completou com sucesso 10M de XP, possuindo assim o t√≠tulo de *Veterano üé©*\n‚Äì\n‚Ä¢ Todos os n√≠veis daqui pra frente ser√£o contados a cada 1M de XP... Nossa equipe se orgulha de coroar voc√™, depois de tanto esfor√ßo e desempenho, ap√≥s muito tempo de uso de nosso sistemas. ${tempo}!`)
break
case 10000000: case 11000000: case 12000000: case 13000000: case 14000000: case 15000000: case 16000000: case 17000000: case 18000000: case 19000000: case 20000000: case 21000000: case 22000000: case 23000000: case 24000000: case 25000000: case 26000000: case 27000000: case 28000000: case 29000000: case 30000000:
CD = level2.map(i => i.id).indexOf(sender)
level2[CD].level += 1
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
sandro.sendMessage(from, {text: `*üéâ SUPREME LEVEL UP! üéñÔ∏è*\nMeus parab√©ns querido usu√°rio veterano *@${sender.split("@")[0]}*.\n‚Ä¢ Sua experi√™ncia acaba de levar a quantidade total de XP √† triplicar. Agora voc√™ tem *${level2[CD].contador} XP*\n‚Äì\n*Obs:* Sua patente atual continua sendo a mesma, pois voc√™ chegou √† maior.`, mentions: [sender]}, {quoted: selo})
break
}
}

const VerificarJSON = (json, value) => {
if(JSON.stringify(json).includes(value)) return true
return false
}

const toUpdateDay = JSON.parse(fs.readFileSync("./database/usuarios/SystemRPG/attday.json"));
const datinhadodia = moment.tz('America/Sao_Paulo').format('DD/MM/YYYY')

if(body != undefined && isGroup && isSabCityOFF && VerificarJSON(sabrpg, sender)) {
var i8 = sabrpg.map(i => i.id).indexOf(sender)
if(!VerificarJSON(toUpdateDay, sender)) {
toUpdateDay.push({id: sender, data: datinhadodia})
fs.writeFileSync(`./database/usuarios/SystemRPG/attday.json`, JSON.stringify(toUpdateDay))
sabrpg[i8].money += 25
fs.writeFileSync(`./database/usuarios/SystemRPG/sabrpg.json`, JSON.stringify(sabrpg))
mention(`Ol√° *@${sender.split("@")[0]}*, voc√™ recebeu *R$ 25.00* pela sua primeira mensagem do dia. Al√©m disso, diversos jogos para se entreter no grupo! ü§ëüí±\n‚Äî‚Äî\n‚Ä¢ Use o comando *${prefix}Menucity*, lhe desejo boa sorte e divirta-se!`)
} else {
var AB = toUpdateDay.map(i => i.id).indexOf(sender)
if(toUpdateDay[AB].data != datinhadodia) {
toUpdateDay[AB].data = datinhadodia
fs.writeFileSync(`./database/usuarios/SystemRPG/attday.json`, JSON.stringify(toUpdateDay))
sabrpg[i8].money += 25
fs.writeFileSync(`./database/usuarios/SystemRPG/sabrpg.json`, JSON.stringify(sabrpg))
mention(`Ol√° *@${sender.split("@")[0]}*, voc√™ recebeu *R$ 25.00* pela sua primeira mensagem do dia. Al√©m disso, diversos jogos para se entreter no grupo! ü§ëüí±\n‚Äî‚Äî\n‚Ä¢ Use o comando *${prefix}Menucity*, lhe desejo boa sorte e divirta-se!`)
} 
}
}

if(isX9VisuUnica) {
try{
if(JSON.stringify(info).includes("videoMessage")) {
var vio = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var viewImage = vio?.imageMessage || info.message?.imageMessage || vio?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage || vio?.viewOnceMessage?.message?.imageMessage
var viewVideo = vio?.videoMessage || info.message?.videoMessage || vio?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage || vio?.viewOnceMessage?.message?.videoMessage
viewVideo.viewOnce = false
viewVideo.video = {url: viewVideo.url}
viewVideo.caption += "\n\nüëÅÔ∏è *REVELANDO ONE VISION* üëÅÔ∏è"
sandro.sendMessage(from, viewVideo, {quoted: info})
} else if(JSON.stringify(info).includes("imageMessage")) {
var vio = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var viewImage = vio?.imageMessage || info.message?.imageMessage || vio?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage || vio?.viewOnceMessage?.message?.imageMessage
var viewVideo = vio?.videoMessage || info.message?.videoMessage || vio?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage || vio?.viewOnceMessage?.message?.videoMessage
viewImage.viewOnce = false
viewImage.image = {url: viewImage.url}
viewImage.caption += "\n\nüëÅÔ∏è *REVELANDO ONE VISION* üëÅÔ∏è"
sandro.sendMessage(from, viewImage, {quoted: info})
} else if(info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.viewOnceMessageV2Extension?.message?.audioMessage) {
var viewAudio = info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.viewOnceMessageV2Extension?.message?.audioMessage
viewAudio.viewOnce = false
viewAudio.ptt = true
media = await getFileBuffer(viewAudio, `audio`)
sandro.sendMessage(from, {audio: media}, {quoted: info})
}
} catch(e){
console.log(e)
reply(`Erro`)
}}

/////\\\\\\//////\\\\\\////\\\\////\\\///\\\///\\\\

/////\\\\\\//////\\\\\\////\\\\////\\\///\\\///\\\\

const isVotoDuelo = isGroup ? votacao.includes(from) : false

const AdicionarVoto = async(IDGRUPO, R1, R2, R3, R4, mention) => {
votacao.push(IDGRUPO)
fs.writeFileSync(`./database/func/votacao/p_votos/${IDGRUPO}.json`, `[]`)
fs.writeFileSync(`./database/func/votacao/votos/${IDGRUPO}.json`, `[]`)
fs.writeFileSync('./database/func/votacao/voting.json', JSON.stringify(votacao))
await sleep(2000)
const otos = JSON.parse(fs.readFileSync(`./database/func/votacao/votos/${IDGRUPO}.json`))
otos.push({razao: R1 ? R1 : '-', votos: R2.trim() + '@s.whatsapp.net', votos2: R3.trim() + '@s.whatsapp.net', duracao: R4})
fs.writeFileSync(`./database/func/votacao/votos/${IDGRUPO}.json`, JSON.stringify(otos))
setTimeout(async function() {
let voto = JSON.parse(fs.readFileSync(`./database/func/votacao/p_votos/${IDGRUPO}.json`))
let verdade = voto.filter(V1 => V1.votacao == '01')
let falso = voto.filter(V2 => V2.votacao == '02')
if(verdade.length == falso.length) return mention(`*üò±üó≥Ô∏è VOTA√á√ÉO EMPATADA! üó≥Ô∏èüò±*\n‚Ä¢ Os 2 usu√°rios terminaram em empate, com a mesma pontua√ß√£o de votos.\nEnt√£o a decis√£o est√° na m√£o dos adms, se vai refazer a vota√ß√£o, ou decidir o ganhador de alguma forma.\n‚Äî\n‚Ä¢ [1] Total de Votos do Usu√°rio da Cor Vermelha ( @${otos[0].votos.split('@')[0]} ): *${verdade.length}*\n‚Ä¢ [2] Total de Votos do Usu√°rio da Cor Azul ( @${otos[0].votos2.split('@')[0]} ): *${falso.length}*`)
mention(`*‚ùå VOTA√á√ÉO ENCERRADA! üó≥Ô∏è*\n‚Ä¢ Soma total de todos os membros que realizaram seus votos: *${verdade.length + falso.length}*\n‚Äî\n‚Ä¢ Quantidade de Votos que Usu√°rio Vermelho recebeu ( @${otos[0].votos.split('@')[0]} ): *${verdade.length}*\n‚Ä¢ Quantidade de Votos que o Usu√°rio Azul recebeu ( @${otos[0].votos2.split('@')[0]} ): *${falso.length}*\n‚Äî\nüéâüåü *@${verdade.length > falso.length ? otos[0].votos.split('@')[0] : otos[0].votos2.split('@')[0]}* acaba de ganhar a vota√ß√£o! Parab√©ns ao ganhador e aos ambos participantes... Se voc√™ n√£o ganhou, n√£o fique com raiva um dia voc√™ ganha! Confie em si pr√≥prio!`)
fs.unlinkSync(`./database/func/votacao/votos/${IDGRUPO}.json`) /* Remover.. */
fs.unlinkSync(`./database/func/votacao/p_votos/${IDGRUPO}.json`) /* Remover.. */
fs.writeFileSync("./database/func/votacao/voting.json", JSON.stringify(votacao)) /* Modificar.. */
}, R4*60*1000)
}

const DeletarVotos = (IDGRUPO) => {
processo = votacao.indexOf(IDGRUPO)
while(processo >= 0) {
votacao.splice(processo, 1)
processo = votacao.indexOf(IDGRUPO)
}
fs.writeFileSync(`./database/func/votacao/voting.json`, JSON.stringify(votacao)) /* Adicionar.. */
fs.unlinkSync(`./database/func/votacao/votos/${IDGRUPO}.json`) /* Remover.. */
fs.unlinkSync(`./database/func/votacao/p_votos/${IDGRUPO}.json`) /* Remover.. */
}

if(fs.existsSync(`./database/func/votacao/p_votos/${from}.json`)) {
if (budy2 === '1'){
let voto = JSON.parse(fs.readFileSync(`./database/func/votacao/p_votos/${from}.json`))
let _votos = JSON.parse(fs.readFileSync(`./database/func/votacao/votos/${from}.json`))
let filtro = voto.map(v => v.participante)
let id_voto = sender ? sender : '0@s.whatsapp.net'
if(filtro.includes(id_voto)) {
return mentions(`Ol√° @${sender.split('@')[0]}, n√£o √© poss√≠vel votar duas vezes.`, filtro, true)
} else {
voto.push({participante: id_voto, votacao: '01'})
fs.writeFileSync(`./database/func/votacao/p_votos/${from}.json`,JSON.stringify(voto))
let _p = []
let _voto = `*üó≥Ô∏è VOTA√á√ÉO üåü* - Informa√ß√µes de usu√°rio(s) que participaram:\n‚Äî\n*@${_votos[0].votos.split('@')[0]} VS @${_votos[0].votos2.split('@')[0]}*\n‚Ä¢ Participante [1] : @${_votos[0].votos.split('@')[0]}\n‚Ä¢ Participante [2] : @${_votos[0].votos2.split('@')[0]}\n‚Äî\n‚Ä¢ Quant. de votos contabilizados: *${voto.length}*\n‚Ä¢ Tempo definido pelo admin para o encerramento: *${_votos[0].duracao} min(s).*\n‚Äî\n‚Ä¢ Voto(s) Contabilizado(s) do(s) Usu√°rio(s):\n‚Äî‚Äî\n`
for(let i = 0; i < voto.length; i++) {
_voto +=  `‚Ä¢ O(a) participante *@${voto[i].participante.split('@')[0]}* votou no integrante *(${voto[i].votacao})*.\n`
_p.push(voto[i].participante)
}
_p.push(_votos[0].votos, _votos[0].votos2)
mentions(_voto,_p,true)
}
} else if (budy2 === '2'){
const voto = JSON.parse(fs.readFileSync(`./database/func/votacao/p_votos/${from}.json`))
let _votos = JSON.parse(fs.readFileSync(`./database/func/votacao/votos/${from}.json`))
let filtro = voto.map(v => v.participante)
let id_voto = sender ? sender : '0@s.whatsapp.net'
if(filtro.includes(id_voto)) {
return mentions(`Ol√° @${sender.split('@')[0]}, n√£o √© poss√≠vel votar duas vezes.`, filtro, true)
} else {
voto.push({participante: id_voto, votacao: '02'})
fs.writeFileSync(`./database/func/votacao/p_votos/${from}.json`,JSON.stringify(voto))
let _p = []
let _voto = `*üó≥Ô∏è VOTA√á√ÉO üåü* - Informa√ß√µes de usu√°rio(s) que participaram:\n‚Äì\n*@${_votos[0].votos.split('@')[0]} VS @${_votos[0].votos2.split('@')[0]}*\n‚Ä¢ Participante [1] : @${_votos[0].votos.split('@')[0]}\n‚Ä¢ Participante [2] : @${_votos[0].votos2.split('@')[0]}\n‚Äì\n‚Ä¢ Quant. de votos contabilizados: *${voto.length}*\n‚Ä¢ Tempo definido pelo admin para o encerramento: *${_votos[0].duracao} min(s).*\n‚Äî\n‚Ä¢ Voto(s) Contabilizado(s) do(s) Usu√°rio(s):\n‚Äî‚Äî\n`
for(let i = 0; i < voto.length; i++) {
_voto += `‚Ä¢ O(a) participante *@${voto[i].participante.split('@')[0]}* votou no integrante *(${voto[i].votacao})*.\n`
_p.push(voto[i].participante)
}
_p.push(_votos[0].votos, _votos[0].votos2)
mentions(_voto,_p,true)
}}}	

if (isx9 && type === "pinInChatMessage") {
duration = info.message?.messageContextInfo?.messageAddOnDurationInSecs;
fixedTime = (duration) => (duration === 0) ? "0" : (duration >= 30 * 24 * 60 * 60) ? "30d" : (duration >= 7 * 24 * 60 * 60) ? "7d" : (duration >= 24 * 60 * 60) ? "24h" : duration;
action = fixedTime(duration) === "0" ? 'desfixar uma mensagem' : `fixar uma mensagem por *${fixedTime(duration)}*`;
await sandro.sendMessage(from, {text: `O admin *@${sender.split("@")[0]}* acabou de ${action}.`, mentions: [sender]})
}

/////\\\\\\//////\\\\\\////\\\\////\\\///\\\///\\\\

if(isCmd && isBanned) return reply(mess.bannedUser())

const totalhit = JSON.parse(fs.readFileSync('./database/data/totalcmd.json'))
const CmdUsedBOT = () => {
totalhit[0].totalcmd += 1
fs.writeFileSync('./database/data/totalcmd.json', JSON.stringify(totalhit))
}
if (isCmd) CmdUsedBOT()

const reqcmd = JSON.parse(fs.readFileSync('./database/data/totalcmd.json'))

var palavrasfr = JSON.parse(fs.readFileSync("./database/grupos/palavras_forca.json"))

var palavrasfrc = palavrasfr[Math.floor(Math.random() * palavrasfr.length)]

var ALT_FR = palavrasfrc.plvr.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");

async function rv_forca() {
var blue = []; 
for (let i = 0; i < ALT_FR.length; i++) {
if(ALT_FR[i] == ' ') {
blue.push(' ')
} else {
blue.push('_')
}
} 
dataGp[0].forca_ofc = [{
    acertos: 0, 
    erros: 0, 
    palavra: blue, 
    escreveu: [], 
    palavra_ofc: ALT_FR, 
    dica: palavrasfrc.dica, 
    tema: palavrasfrc.tema
}]
dataGp[0].forca_inc = false
setGp(dataGp)
}

if (isGroup && isCmd && !isGroupAdmins && !SoDono && !isPremium && dataGp[0]?.Limitar_CMD) {
  
var TEMPO_A = Math.floor(Date.now() / 1000) 
 
var ID_G = Limit_CMD.findIndex(i => i.idgp === from)
var ID_U = Limit_CMD[ID_G]?.ids.findIndex(i => i.id === sender)

if(!JSON.stringify(Limit_CMD).includes(from) || ID_G < 0 && ID_U < 0) {
Limit_CMD.push({idgp: from, ids: [{id: sender, tempo: TEMPO_A}]})
fs.writeFileSync("./database/func/limitarcmd.json", JSON.stringify(Limit_CMD, null, 2));
} else if(ID_G >= 0 && ID_U < 0) {
Limit_CMD[ID_G].ids.push({id: sender, tempo: TEMPO_A})
fs.writeFileSync("./database/func/limitarcmd.json", JSON.stringify(Limit_CMD, null, 2));
}

if(ID_G >= 0 && ID_U >= 0) {
var TEMPO_D = Limit_CMD[ID_G].ids[ID_U].tempo;

var TEMPO_M = TEMPO_A - TEMPO_D

var TEMPO_D2 = parseInt(dataGp[0]?.Limit_tempo) || 60

if(TEMPO_M < TEMPO_D2) {
return reply(nescessario.TEMPO_DE_CMD.replaceAll("#tempocmd#", TimeCount(TEMPO_M)).replaceAll("#tempo#", TEMPO_D2))
} else {
Limit_CMD[ID_G].ids[ID_U].tempo = TEMPO_A
fs.writeFileSync("./database/func/limitarcmd.json", JSON.stringify(Limit_CMD, null, 2));
}
}
}

sandro.sendImageAsSticker = async (jid, path, options = {}) => {
    let buff = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
    let buffer
        if (options && (options.packname || options.author)) {
         buffer = await writeExifImg(buff, options)
            } else {
         buffer = await imageToWebp(buff)
        }
    await sandro.sendMessage(jid, { sticker: { url: buffer }, ...options})
    return buffer
}

//====

sandro.sendImageMentions = (photo, text, mem, ids) => {(ids == null || ids == undefined || ids == false) ? sandro.sendMessage(from, {image: photo, caption: text.trim(), contextInfo: { "mentionedJid": mem}}) : sandro.sendMessage(from, {image: photo, caption: text.trim(), contextInfo: {"mentionedJid": mem}})
}

sandro.sendInteractiveTXT = async(idChat, mainText = '', footerText = '', quotedMessage = {}, buttonsParams = {}) => {
    try {
        await sandro.relayMessage(idChat, {interactiveMessage: {body: {text: mainText}, footer: {text: footerText}, contextInfo: quotedMessage, nativeFlowMessage: buttonsParams}}, {});
    } catch(errorMessage) {
        await reply(String(errorMessage));
    }
}

sandro.sendInteractiveIMG = async(imageDir, ChatID, definedText = '', footer = '', contextMessageInfo = {}, buttonsParams = {}) => {
    try {
        create = await prepareWAMessageMedia({image: fs.readFileSync(imageDir)}, {upload: sandro.waUploadToServer});
        imageCreate = create.imageMessage;
        await sandro.relayMessage(ChatID, {interactiveMessage: {header: {hasMediaAttachment: true, imageMessage: imageCreate}, headerType: 'IMAGE', body: {text: definedText}, footer: {text: footer}, contextInfo: contextMessageInfo, nativeFlowMessage: buttonsParams}}, {});
     } catch(errorMessage) {
         return reply(String(errorMessage));
    }
 }
 
 //==


let isCodeKey = Array('aluguel', 'alugueis', 'alugar', 'alugarbot', 'lojinha', 'dono').some(i => i === command)

if(isModoAluguel && isCmd && !SoDono && !isCodeKey) {
if(!JSON.stringify(grupos).includes("sandrobot")) {
grupos.push({id: "sandrobot", gps: []})
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))}
if(!JSON.stringify(grupos).includes(from)) {
grupos.push({id: from, limite: 5, validado: false})
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
}
AB = grupos.map(i => i.id).indexOf(from)
if(grupos[AB].validado == false) {
if(grupos[AB].limite <= 1) {
grupos.splice(AB, 1)
fs.writeFileSync("./database/grupos/grupos.json", JSON.stringify(grupos, null, 2))
reply(`Visto que os senhores n√£o se v√™em interessados em adquirir uma chave, estou saindo do grupo...`)
await sleep(3000)
return sandro.groupLeave(from)
} else {
grupos[AB].limite -= 1
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
return mention(`Ops, esse grupo n√£o est√° registrado no meu Banco de Dados.\n Por favor, caso esteja alugado ou deseja adquirir uma chave de ativa√ß√£o, entre em contato com o meu dono: *@${nmrdn.split('@')[0]}*`)
}}}

if(chaves.length > 0) {caixa = []
for(k of chaves) {
if(budy2.toUpperCase() === k.key) {
caixa.push(k.key)
}
}
if(VerificarJSON(chaves, caixa[0])) {
AD = chaves.map(i => i.key).indexOf(caixa[0])
timeday = chaves[AD].dias
pessoa = chaves[AD].cliente
infinity = chaves[AD].dias > 0 ? false : true
if(!VerificarJSON(grupos, "sandrobot")) {
grupos.push({id: "sandrobot", gps: []})
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
}
if(!VerificarJSON(grupos, from)) {
grupos.push({id: from, limite: 5, validado: true})
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
} else {
GP = grupos.map(i => i.id).indexOf(from)
grupos[GP].validado = true
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
}
if(infinity == false) {
if(chaves[AD].tipo == 1 && isGroup) {
if(!VerificarJSON(aluguel, from)) {
aluguel.push({id: from, nome: groupName, tempo: timeday, totalRent: timeday, cliente: pessoa, save: Number(moment.tz('America/Sao_Paulo').format('DD')), cortesia: false})
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
chaves.splice(AD, 1)
fs.writeFileSync("./database/grupos/aluguel/chaves.json", JSON.stringify(chaves, null, 2))
reply(`üåüüõí O grupo foi registrado com sucesso ao aluguel! *Qualquer d√∫vida entre em contato com meu dono.*`)
await sleep(2000)
sandro.sendMessage(nmrdn, {text: `‚ö†Ô∏èüõí C√≥digo de aluguel foi validado no grupo com sucesso! Registrado no nome de *@${pessoa.split('@')[0]}*\n‚Ä¢ Grupo registrado: *${groupName}*`, mentions: [pessoa]})
} else {
AB = aluguel.map(i => i.id).indexOf(from)
aluguel[AB].cortesia = false
aluguel[AB].nome = groupName
aluguel[AB].totalRent = aluguel[AB].tempo + timeday
aluguel[AB].tempo += timeday
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
chaves.splice(AD, 1)
fs.writeFileSync("./database/grupos/aluguel/chaves.json", JSON.stringify(chaves, null, 2))
reply(`+${timeday} dia${Number(timeday) > 1 ? 's' : ''} adicionado${Number(timeday) > 1 ? 's' : ''} para o grupo em meu banco de dados.`)
await sleep(2000)
sandro.sendMessage(nmrdn, {text: `‚ö†Ô∏èüõí C√≥digo de aluguel foi validado no grupo com sucesso! Registrado no nome de *@${pessoa.split('@')[0]}*\n‚Ä¢ Grupo registrado: *${groupName}*`, mentions: [pessoa]})
}
}
        
if(chaves[AD].tipo == 2 && isGroup) {
CD = grupos.map(i => i.id).indexOf("sandrobot")
if(!VerificarJSON(grupos[CD].gps, from)) {
if(!VerificarJSON(aluguel, from)) {
grupos[CD].gps.push({id: from})
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
aluguel.push({id: from, nome: groupName, tempo: 24, totalRent: 24, cliente: sender, save: Number(moment.tz('America/Sao_Paulo').format('mm')), cortesia: true})
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
reply(`‚úÖÔ∏èüåü C√≥digo Card Cortesia validado com sucesso! 24h liberadas neste grupo contando a partir de agora.`)
await sleep(2000)              
sandro.sendMessage(nmrdn, {text: `‚ö†Ô∏èüåüÔ∏è C√≥digo *Card Cortesia* foi validado no grupo, registrado no nome de *@${pessoa.split('@')[0]}*.\n‚Ä¢ Grupo registrado: *${groupName}*`, mentions: [pessoa]})
} else reply("[!] Este grupo j√° est√° registrado em meu banco de dados.")
} else reply("[!] J√° foi validado neste m√™s uma cortesia neste grupo.")
}
} else {
if(chaves[AD].tipo == 1 && isGroup) {
chaves.splice(AD, 1)
fs.writeFileSync("./database/grupos/aluguel/chaves.json", JSON.stringify(chaves, null, 2))
reply(`[!] O grupo foi salvo no meu banco de dados com sucesso!`)
}}}}

// Fun√ß√£o para carregar os dados do Tinder do arquivo
function loadTinderData() {
    try {
        if (!fs.existsSync('./tinder.json')) {
            return {}; // Retorna um objeto vazio caso o arquivo n√£o exista
        }

        const data = fs.readFileSync('./tinder.json', 'utf8');
        return JSON.parse(data); // Retorna os dados como objeto
    } catch (error) {
        console.error('Erro ao carregar os dados do Tinder:', error);
        return {}; // Retorna um objeto vazio em caso de erro
    }
}

// Fun√ß√£o para salvar os dados do Tinder no arquivo
function saveTinderData(data) {
    try {
        fs.writeFileSync('./tinder.json', JSON.stringify(data, null, 2), 'utf8');
    } catch (error) {
        console.error('Erro ao salvar os dados do Tinder:', error);
    }
}
// √çNICIO: CASES / COMANDOS COM PREFIXO:
switch(command){

case 'figuflork':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function figuflorks() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figuflork`} })}
for (i = 0; i < q; i++) {
await sleep(680)
figuflorks()
}
break

case 'figuanime':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function eitamunjsjsjw() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figuanime`} })}
for (i = 0; i < q; i++) {
await sleep(680)
eitamunjsjsjw()
}
break

case 'figucoreana':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function eitamunjs() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figucoreana`} })}
for (i = 0; i < q; i++) {
await sleep(680)
eitamunjs()
}
break

case 'figubebe':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function eitamundormsjsos() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figubebe`} })}
for (i = 0; i < q; i++) {
await sleep(680)
eitamundormsjsos()
}
break

case 'figudesenho':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function eitamundormsjow() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figudesenho`} })}
for (i = 0; i < q; i++) {
await sleep(680)
eitamundormsjow()
}
break

case 'figuanimais':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function eitamundormysu() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figuanimais`} })}
for (i = 0; i < q; i++) {
await sleep(680)
eitamundormysu()
}
break

case 'figuengracada':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function eitamundormoo() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figuengracada`} })}
for (i = 0; i < q; i++) {
await sleep(680)
eitamundormoo()
}
break

case 'figuroblox':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function eitamundorms() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figuroblox`} })}
for (i = 0; i < q; i++) {
await sleep(680)
eitamundorms()
}
break

case 'figuraiva':
if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!")
if (!Number(args[0]) || Number(q.trim()) > 10) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 10..")
async function eitamundorm() {
sandro.sendMessage(from, { sticker: { url: `https://carisys.online/api/sticker/figuraiva`} })}
for (i = 0; i < q; i++) {
await sleep(680)
eitamundorm()
}
break

case 'serie1':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Arcane:* https://overflix.online/series/arcane/`)
break

case 'serie2':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Stranger Things:* https://overflix.online/series/stranger-things-gratis-hd/`)
break

case 'serie3':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Soldados ou Zumbis:* https://overflix.online/series/s-o-z-soldados-ou-zumbis/`)
break

case 'serie4':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Senhor dos Aneis:* https://overflix.online/series/o-senhor-dos-aneis-os-aneis-de-poder-online-hd-gratis/`)
break

case 'serie5':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Riverdale:* https://overflix.online/series/riverdale-online-gratis-hd-full/`)
break

case 'serie6':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *A casa do drag√£o:* https://overflix.online/series/a-casa-do-dragao-online-gratis-hd/`)
break

case 'serie7':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Sintonia:* https://overflix.online/series/sintonia-online-gratis/`)
break

case 'serie8':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Chucky:* https://overflix.online/series/chucky-a-serie/`)
break

case 'serie9':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Flash:* https://overflix.online/series/flash-hd-online-gratis/`)
break

case 'serie10':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Game of Thrones:* https://overflix.online/series/game-of-thrones-hd-online-gratis/`)
break

case 'serie11':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Legados:* https://overflix.online/series/legados-gratis-hd-online/`)
break

case 'serie12':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *The Good Doctor:* https://overflix.online/series/the-good-doctor-o-bom-doutor-hd-online/`)
break

case 'serie13':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *The Walking Dead:* https://overflix.online/series/the-walking-dead/`)
break

case 'serie14':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Peaky Blinders:* https://overflix.online/series/peaky-blinders-sangue-apostas-e-navalhas/`)
break

case 'serie15':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Diarios de um vampiro:* https://overflix.online/series/diarios-de-um-vampiro/`)
break

case 'serie16':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Gavi√£o Arqueiro:* https://overflix.online/series/gaviao-arqueiro-full-online-gratis/`)
break 

case 'serie17':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Westworld:* https://overflix.online/series/westworld-hd-gratis-online/`)
break

case 'serie18':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *L√∫cifer:* https://overflix.online/series/lucifer-online-hd/`)
break

case 'serie19':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Lobo Adolecentes:* https://overflix.online/series/lobo-adolescente/`)
break

case 'serie20':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *La Casa de Papel:* https://overflix.online/series/la-casa-de-papel/`)
break

case 'serie21':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Cobra Kai:* https://overflix.online/series/cobra-kai-online-gratis-hd/`)
break

case 'serie22':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Love Victor:* https://overflix.online/series/love-victor-gratis-online-hd/`)
break

case 'serie23':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Vikings:* https://overflix.online/series/vikings-hd/`)
break

case 'serie24':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Cavaleiro da Lua:* https://overflix.online/series/cavaleiro-da-lua-online-gratis-hd-full/`) 
break

case 'serie25':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Fear The Walking Dead:* https://overflix.online/series/fear-the-walking-dead/`)
break

case 'serie26':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Rick Morty:* https://overflix.online/series/rick-morty/`)
break

case 'serie27':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Round 6:* https://overflix.online/series/round-6-online-gratis-hd-full/`)
break

case 'serie28':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Carnival Row:* https://overflix.online/series/carnival-row-online-hd/`)
break

case 'serie29':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Dark:* https://overflix.online/series/dark/`)
break

case 'serie30':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Arqueiro:* https://overflix.online/series/arqueiro/`)
break 

case 'serie31':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Eu Nunca:* https://overflix.online/series/eu-nunca/`) 
break

case 'serie32':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *The Last Kingdom:* https://overflix.online/series/the-last-kingdom/`) 
break

case 'serie33':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *O livro de Boba Fett:* https://overflix.online/series/o-livro-de-boba-fett-hd-online-gratis-full/`)
break

case 'serie34':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Ragnarok:* https://overflix.online/series/ragnarok/`)
break 

case 'serie35':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *OS 100:* https://overflix.online/series/os-100/`)
break

case 'serie36':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *FBI:* https://overflix.online/series/fbi/`)
break

case 'serie37':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Extracurricular:* https://overflix.online/series/extracurricular/`)
break

case 'serie38':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Halo:* https://overflix.online/series/halo-online-gratis/`)
break

case 'serie39':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Warrior Nun:* https://overflix.online/series/warrior-nun-online-completo/`)
break

case 'serie40':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Anne With:* https://overflix.online/series/anne-with-an-e/`)
break

case 'serie41':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Patrulha do destino:* https://overflix.online/series/patrulha-do-destino-online/`)
break

case 'serie42':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Dinastia:* https://overflix.online/series/dinastia/`)
break

case 'serie43':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Watchmen:* https://overflix.online/series/watchmen/`)
break

case 'serie44':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Lovecraft Country:* https://overflix.online/series/lovecraft-country-dublado-legendado-online-hd-gratis/`)
break





case 'filme1':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Brinquedos do terror:* https://overflix.online/filmes/brinquedos-do-terror/`)

break

case 'filme2':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Homem Aranha sem volta pra casa:* https://drive.google.com/file/d/1jNUcLsJqRNcrYD_pMkrUc066TIEWhFRf/view?usp=drivesdk`)

break

case 'filme3':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Cidade perdida:* https://overflix.online/filmes/cidade-perdida-online/`)

break

case 'filme4':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Thor amor e trov√£o:* https://overflix.online/filmes/thor-amor-e-trovao-hd-gratis-online/`)

break

case 'filme5':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Pinoquio 2:* https://overflix.online/filmes/pinoquio-2/`)

break

case 'filme6':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Rua do Medo - Parte 1:* https://overflix.online/filmes/rua-do-medo-1994-parte-1/`)

break

case 'filme7':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Na mente do dem√¥nio:* https://overflix.online/filmes/na-mente-do-demonio/`)

break

case 'filme8':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *O homem nas trevas:* https://overflix.online/filmes/o-homem-nas-trevas-2-online-hd/`)

break

case 'filme9':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

*Compilados de Terror:* https://overflix.online/?s=Terror`)

break

case 'filme10':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Halloween Kills: O terror continua:* https://overflix.online/filmes/halloween-kills-o-terror-continua/`)

break

case 'filme11':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}


O predador a ca√ßada: https://overflix.online/filmes/o-predador-a-cacada/`)

break

case 'filme12':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Os primeiros passos de Groot:* https://overflix.online/filmes/os-primeiros-passos-de-groot/`)

break

case 'filme13':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *T√° chovendo hamb√∫rguer 2:* https://overflix.online/filmes/ta-chovendo-hamburguer-2/`)

break

case 'filme14':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Minions a origem do gru:* https://overflix.online/filmes/minions-2-a-origem-de-gru/`)

break

case 'filme15':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *The Sandman:* https://overflix.online/series/the-sandman-online-hd-gratis/`)

break

case 'filme16':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *The Batman:* https://photos.app.goo.gl/F6zsDNxipwYdxS9s9`)

break


case 'filme17':
reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *As branquelas:* https://drive.google.com/file/d/1avm4yXd2tg1lZKy00yZRknboNv2Dxqpi/view?usp=drivesdk`)

break

case 'filme18':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Interestelar:* https://drive.google.com/file/d/10nSkrlV_TwkqtyFJ_h-c3GlLx-E7nqz9/view?usp=drivesdk`)

break

case 'filme19':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Um olhar do para√≠so:* https://drive.google.com/file/d/102IWrzkbMAYDxkPmwMuHDuKFK3HGVFWF/view?usp=drivesdk`)

break

case 'filme20':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Barbie:* https://drive.google.com/drive/folders/1-yFkZrcyph8b1l4yrPpD7oaF5DHD7wss`)

break

case 'filme21':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Maze Runner:* https://photos.app.goo.gl/D68AJD4SgQmvMyjY7`)

break

case 'filme22':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Mad Max:* https://photos.app.goo.gl/88nQZhtu7v3ZWbNe6`)

break

case 'filme23':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Homem Aranha:* https://photos.app.goo.gl/mLzQtYumEfMpYQ4p7`)

break

case 'filme24':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Sherlock Homes:* https://photos.app.goo.gl/Eg5dJLspQhcaznAv5`)

break

case 'filme25':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Cinquenta tons de cinza:* https://photos.app.goo.gl/3QoCnRNfwJ83KBau6`)

break

case 'filme26':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Crep√∫sculo:* https://photos.app.goo.gl/9etPkcZVG42Ngzm29`)

break

case 'filme27':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Bad Boys:* https://photos.app.goo.gl/sVdfEwLKzg4sghxx6`)

break

case 'filme28':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Vingadores:* https://photos.app.goo.gl/uQRWCRbrLc5yPgPi8`)

break

case 'filme29':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Velozes e Furiosos:* https://photos.app.goo.gl/dSJPea6tf5QEZMK77`)

break

case 'filme30':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Batman (1989 - 2016):* https://photos.app.goo.gl/x1ZywBqZFNoijUkA6`)

break

case 'filme31':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *As vantagens de ser invis√≠vel:* https://drive.google.com/file/d/12cnRyPwcXDTbbU26MF7wXhz9cnotdEoX/view?usp=drivesdk`)

break

case 'filme32':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Moana:* https://drive.google.com/file/d/1aHVoN-kWxIvdQBi9a6OMSqXws7q674Cr/view?usp=drivesdk`)

break

case 'filme33':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Programa√ß√£o para princesas:* https://drive.google.com/file/d/1aHVoN-kWxIvdQBi9a6OMSqXws7q674Cr/view?usp=drivesdk`)

break

case 'filme34':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *As cr√¥nicas de N√°rnia:* https://drive.google.com/folderview?id=1QYz_a12LMrs0Trz2RyfcsrkoNYLsjpdg`)

break

case 'filme35':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Culpa √© das estrelas:* https://drive.google.com/file/d/1ADMJxVpf0RLTJZBpjj_lb0KRGb_OQHs1/view`)

break

case 'filme36':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Garota infernal:* https://drive.google.com/file/d/1cGSEO0tEPg44Yt1AcVXpNgdzMOXXZ64F/view?usp=drivesdk`)

break

case 'filme37':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Verdade ou Desafio:* https://drive.google.com/file/d/1mzr_E-OmjQpwouBx2oOo3y4qZStxN-2Z/view?usp=drivesdk`)

break

case 'filme38':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Com amor, Simon:* https://drive.google.com/file/d/1mzr_E-OmjQpwouBx2oOo3y4qZStxN-2Z/view?usp=drivesdk`)

break

case 'filme39':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *After 1:* https://drive.google.com/file/d/1YX8pGsFAY1vrKu8rl96VdN8-vhpUQ2mY/view?usp=drivesdk`)

break

case 'filme40':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *A 5 passos de voc√™:* https://drive.google.com/file/d/132_vwYz5zXMQORAhWmTwQHlLZ47Tpu7V/view?usp=drivesdk`)

break

case 'filme41':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Hannah Montana:* https://drive.google.com/file/d/1Fx1Dn-JV8LOsfiBYL8-ihdz4b2fVnNbg/view?usp=drivesdk`)

break

case 'filme42':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Ponte para Terabitia:* https://drive.google.com/file/d/1F0iFKt2xgglz7pldUuMaE5gxLs55Ta7T/view?usp=drivesdk`)

break

case 'filme43':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Sr. & Sra. Smith:* https://drive.google.com/file/d/1bJsB7wjvU7WWuFSJzwcz0VKQ6vz2UMlA/view?usp=drivesdk`)

break

case 'filme44':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Um la√ßo de amor:* https://drive.google.com/file/d/17x2Um_DDg7Px2y1EINwpA8jLdgDx-AeM/view?usp=drivesdk`)

break

case 'filme45':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Transformers:* https://drive.google.com/folderview?id=10QVCb14pAWod2rQ67n1BlLocP71yF8Ez`)

break

case 'filme46':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Oito mulheres e um segredo:* https://drive.google.com/file/d/1jNUcLsJqRNcrYD_pMkrUc066TIEWhFRf/view?usp=drivesdk`)

break

case 'filme47':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *A garota do trem:* https://drive.google.com/file/d/10nc2orAOhI_fLHWLCJfffuFVuUlKo158/view?usp=drivesdk`)

break

case 'filme48':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Nerve:* https://drive.google.com/file/d/1kbS-l4Af_PR_wFmykYAE_pq6qwfORWjD/view?usp=drivesdk`)

break

case 'filme49':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Esquadr√£o 6:* https://drive.google.com/file/d/13voArwUsQMgC3o7Q0ZIf87MKjQb3laU6/view?usp=drivesdk`)

break

case 'filme50':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

*A chegada:* https://drive.google.com/file/d/17ZTQ4VaUwM_m7immHx4XDWvR_fc1K0Vt/view?usp=drivesdk`)

break

case 'filme51':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Jumanji: Bem vindo a Selva:* https://drive.google.com/file/d/1j5puYj2JzBgDcH0QKIR__UY1o1Zvs022/view?usp=drivesdk`)

break

case 'filme52':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Monte Carlo:* https://drive.google.com/file/d/1GmN34mKHGd5rp82cX3LVv4mAzz1XoVbB/view?usp=drivesdk`)

break

case 'filme53':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Nasce uma estrela:* https://drive.google.com/file/d/1t8ZLbRMDsUhnzGMbjDie-7jTKDNxy7xF/view?usp=drivesdk`)

break

case 'filme54':

await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Mist√©rio no Mediterr√¢neo:* https://drive.google.com/file/d/1J4JMLzT6qSgYl1nX75RIEPc4DVc7G9FS/view?usp=drivesdk`)

break

case 'filme55':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé• *Norbit:* https://drive.google.com/file/d/1UkgrI-fM6rOAHmFEaABtJQP_Lx6jantD/view?usp=drivesdk`)
break



case 'app1':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

 üìÇ *Youtube Premium Tema Dark:* http://www.mediafire.com/file/x98arvls146n5i5/YouTube+Premium+15.43.32.apk/file
`)
break

case 'app2':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *Youtube Premium Tema Black:* http://www.mediafire.com/file/ourocauwy1hc3v1/YouTube+Black.apk/file
`)
break
case 'app3':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *YouCut Pro:* https://www.mediafire.com/file/5y6rp0t6ffgvnpm/YouCut-Pro-1.452.1119-SK_BR_CANAL.apk/file
`)
break
case 'app4':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *PicsArt Premium:* https://www.mediafire.com/file/dd1ej4z78uvdui8/base.apk/file
`)
break
case 'app5':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *Snaptube Premium:* http://www.mediafire.com/file/lfdc3ptkhear0w0/Snaptube_Premium_BY_FlashStudio.apk/file
`)
break
case 'app6':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *KineMaster Pro:* https://www.mediafire.com/file/itxxeuct5efo075/Kinemaster_Premium_Download_2021.apk/file
`)
break
case 'app7':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *Netflix Pirata:* https://apkmstore.blogspot.com/2020/06/download-apk-mediaflix-plus.html?m=1
`)
break
case 'app8':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *PowerDirector PRO:* https://www.mediafire.com/file/1et7hx53dwgjk89/PowerDirector_Premium_v9.2.0_ATUALIZADO_2021_PRO.om.apk/file
`)
break

case 'app9':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *Spotify Premium:* https://www.mediafire.com/file/5ajeu8dysva0pso/SPOTIFY_PREMIUM_100%2525_M%25C3%259ASICA_OFFLINE.apk/file`)
break

case 'app10':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *Remini Pro:* https://techgara.com/download/mod/remini-pro-31633-1357/`)
break

case 'app11':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *Alight Motion:* https://www.mediafire.com/file/k0vgr9dx2dwkrvj/Alight+Motion+(4.0)+Carllos10k.apk/file`)
break

case 'app12':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üìÇ *Instagram Pro:* https://www.mediafire.com/file/pyl152gv0wzt6l5/InstaPro_v9.35_Prim%25C3%25A1rio_By.SamMods_.apk/file`)
break

case 'jogo1':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Minecraft:* https://www.mediafire.com/file/w9sms627ql2np6i/Minecraft_1.16.221.01_ByHT.apk/file
`)
break
case 'jogo2':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *DragonBall Z - Dokkan:* https://www.mediafire.com/file/015ibjiljfkv7uo/Dokkan_v4_12_1_MOD.apk/file
`)
break
case 'jogo3':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *GTA SanAndreas:* https://www.mediafire.com/file/ln6r3kx0ie77r9t/GTA_San_Andreas_2021.zip/file
`)
break
case 'jogo4':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *GTA SA - Legendado em Portugu√™s:* http://www.mediafire.com/file/7op13aup1ll7m9y/GTA_SA_COM_TRADU%25C3%2587%25C3%2583O_PT-BR.zip/file
`)
break
case 'jogo5':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *GTA SA com Mod Cleo:* http://www.mediafire.com/file/d8cfwzctx95x0dx/GTA_SA_v2.00_Mod_Cleo.zip/file
`)
break
case 'jogo6':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *GTA SA Online:* https://www.mediafire.com/file/0xccd5m0zwqstag/GTA_SA_ONLINE_SAMP_ByHT.zip/file
`)
break
case 'gpsamp':
await reply(`Ol√° ${pushname}, aqui est√° o seu o grupo, espero que voc√™ goste!
üî• *Grupo Ofc:* https://chat.whatsapp.com/JDEH0eU70z2LLU4FywshzY
`)
break
case 'discord':
await reply(`Ol√° ${pushname}, aqui est√° o seu o nosso discord, espero que voc√™ goste!
üî• *Discord Ofc:* https://discord.gg/wwUPDy89
`)
break
case 'jogo7':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *GTA SuperLite + Mod Cleo:* http://www.mediafire.com/file/wdkg8pmndtihil3/GTA_SA_super_lite_mod_cleo_ByHT.zip/file
`)
break
case 'jogo8':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *LastDay on Eart Survival:* https://www.mediafire.com/file/k4pr6awvr5eb1ak/Last%20Day%20on%20Earth%201.17.7-mod.apk/file 
`)
break
case 'jogo9':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Bomber Friends MOD:* https://www.mediafire.com/file/dir8pwrb1mpm57w/Bomber_Friends_v4.10_MOD.apk/file
`)
break
case 'jogo10':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Arcade Hunter:* https://www.mediafire.com/file/ugcdaclnpodtxxs/Arcade_Hunter-Sword%252CGun%252C_and_Magic_1.11.0-mod.apk/file
`)
break
case 'jogo11':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Defesa de Zombie Ocioso:* https://www.mediafire.com/file/8422sjofw1cdnka/Zombie+Idle+Defense+1.5.79.229MOD-t.apk/file
`)
break
case 'jogo12':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Pac-Man:* https://www.mediafire.com/file/gxwy01ni99pcur2/PAC-MAN+9.2.7.10150MOD-t.apk/file
`)
break
case 'jogo13':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Car Driving School Simulator - APK:* https://www.mediafire.com/file/r6aps8mn6wqoabj/Car+Driving+School+Simulator+3.1.0.283MOD-t.apk/file
üé≥ _Obrigat√≥rio instalar o OBB:_
¬†https://www.mediafire.com/file/hcsb5tpr7byh8fg/com.boombitgames.DrivingSchoolParking.zip/file
`)
break
case 'jogo14':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Cyber Fighters Premium:* https://www.mediafire.com/file/4tmv2cdahvqamlx/Cyber+Fighters+Premium+1.11.35.68MOD-t.apk/file
`)
break
case 'jogo15':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥Ô∏è *Drag Racing:* https://www.mediafire.com/file/g88v399ks1fpnfq/drag-racing-mod_2.0.37.rar/file
`)
break
case 'jogo16':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Mr. Brow:* https://www.mediafire.com/file/i0ii099sejk9fnk/Mr+Bow+4.15.75MOD-t.apk/file
`)
break
case 'jogo17':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Airport City:* https://www.mediafire.com/file/vuupmpp3r03lso0/Airport+City+8.7.18.101418MOD-t.apk/file
`)
break
case 'jogo18':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Crash Bandicoot:* https://www.mediafire.com/file/nyx8rjqn5m51o3r/Crash+Bandicoot+Mobile+v0.7.6242+Mod.apk/file 
`)
break
case 'jogo19':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Real Steel World Robot Boxing (APK+OBB):* https://www.mediafire.com/file/zcnsxb55mldn51e/Real+Steel+World+Robot+Boxing+v54.54.126+Mod.apk/file
`)
break
case 'jogo20':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Anger of Sticker:* https://www.mediafire.com/file/zfmqmszkhbgoem2/anger-of-stick-5-mod_1.1.39.apk/file
`)
break
case 'jogo21':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Angry Birds 2 (APK+OBB)*
https://www.mediafire.com/file/uwnurszwrdbv5ge/angrybirds2-2481.apk/file
`)
break
case 'jogo22':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥Ô∏è *Especial Force Group 2 (CS):* https://www.mediafire.com/file/uwf5cq9u8tjg44x/specialforcesgroup2-421.apk/file
`)
break
case 'jogo23':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥Ô∏è *Roblox:* https://apkadmin.com/k05ck2q6ioo1/ROBLOX_v2.459.415955_MOD_MENU.apk.html
`)
break
case 'jogo24':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Critical Striker:* https://www.mediafire.com/file/7yqmk1gn4wrieri/CRITICAL_STRIKE.zip/file
`)
break
case 'jogo25':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Dream League Soccer:* http://www.mediafire.com/file/yuw9n5d4phzz5wg/Dream_League_Soccer_2019_v6.13-mod.apk/file
`)
break
case 'jogo26':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Clash of Clans:* http://www.mediafire.com/file/aoaem76tyg0hvfv/Clash_Of_Clans_v13.675.6_MOD.apk/file
`)
break
case 'jogo27':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Criminal Case Paris:* http://www.mediafire.com/fil...e/i5pbv8d7yjbbtly/Criminal%20Case%20Paris%20v2.36.1-mod.apk/file
`)
break

case 'jogo28':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Drift Max World:* https://www.mediafire.com/file/hqui6asekutsocq/DRIFT+MAX+WORLD+DINHEIRO+INFINITO.zip/file`)
break

case 'jogo29':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Downhill Masters:* https://www.mediafire.com/file/9cdgreyc8amkto9/Downhill_Masters_v1.0.59_MOD.apk/file`)
break
case 'jogosamp':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

‚òï IP DO SERVIDOR DO MEU CRIADOR: 23.88.73.88:11627

üé≥ *SA-MP:* https://play.google.com/store/apps/details?id=ru.unisamp_mobile.launcher`)
break

case 'jogo30':
await reply(`Ol√° ${pushname}, aqui est√° o seu pedido, espero que voc√™ goste!
ü™Ä *N√∫mero:* @${sender.split("@")[0]}

üé≥ *Monopoly:* https://www.mediafire.com/file/q5jfi61xwbqiu2x/Monopoly-v1-7-11-mod.zip/file`)
break

case 'waifu': {
    try {
        const jsonFilePath = './armor/waifu.json';
        const jsonData = fs.readFileSync(jsonFilePath, 'utf8');
        const imageUrls = JSON.parse(jsonData);
        const randomIndex = Math.floor(Math.random() * imageUrls.length);
        const selectedImageUrl = imageUrls[randomIndex];
        await sandro.sendMessage(from, { image: { url: selectedImageUrl }, caption: 'Aqui est√° a imagem!' }, { quoted: info });
    } catch (e) {
        console.log(e);
        reply('Erro ao enviar a imagem. Por favor, tente novamente.');
    }
    break;
}

case 'pegadinha': {
    try {
        const pegadinhas = require('./armor/pegadinhas.json');
        const randomIndex = Math.floor(Math.random() * pegadinhas.length);
        const pegadinha = pegadinhas[randomIndex];
        const mensagem = `
*Pegadinha do Dia!*

üíú${pegadinha}

Para mais pegadinhas, digite *${prefix}pegadinhas* novamente.
        `;
        await sandro.sendMessage(from, { text: mensagem }, { quoted: info });
    } catch (e) {
        console.log(e);
        reply('üö® *Erro ao carregar pegadinhas.* üö®\nPor favor, tente novamente mais tarde.');
    }
    break;
}

case 'regras':
case 'regrasgp':
case 'regrasgrupo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins && !SoDono) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
reply(`_*Regras do grupo leia com aten√ß√£o*_

*_üè∑Ô∏è Nome do Grupo:_* *${groupName}*


${groupDesc}`)
break

case 'info-s':
reply(`SANDRO BOT E MEU CRIADOR`)
break

case 'fullhd': case 'hd':
if((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
imagem = await downloadContentFromMessage(post, 'image')
base64 = Buffer.from([])
try {

function uploadhd(midia) {
return new Promise(async (resolve, reject) => {
try {
let { ext } = await fromBuffer(midia);
let form = new FormData();
form.append('reqtype', 'fileupload');
form.append('fileToUpload', midia, 'tmp.' + ext);
await fetch('https://catbox.moe/user/api.php', {
method: 'POST',
body: form
})
.then(response => response.text())
.then(link => {
resolve(link.trim());
})
.catch(erro => reject(erro));
} catch (erro) {
return console.log(erro);
}
});
}
// Feito por sandro JS 
for await(const send of imagem) { base64 = Buffer.concat( [ base64, send ] ) }

await sandro.sendMessage(from, {text: "Auterando a qualidade da imagem pra *HD*."},{quoted: info });
let Urlimage = await uploadhd(base64)
let reminiUrl = await getBuffer(`https://carisys.online/api/outros/remini?url=${Urlimage}`)
await sandro.sendMessage(from, {image: reminiUrl}, {quoted: info})
} catch (e) {
await sandro.sendMessage(from, {text:"Ocorreu um erro ao deixar a imagem em *HD*."}, {quoted: info });
}
} else {
await sandro.sendMessage(from, {text: "Mencione uma imagem para atribu√≠r o *HD*."}, {quoted: info });
}
break

case 'slaaau':
reply(`${tempo2}`)
break
case 'addrent': case 'rgrent':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isGroup) return reply(enviar.msg.grupo)
if(!JSON.stringify(grupos).includes(from)) {
  grupos.push({id: from, limite: 5, validado: true})
  fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
}
if(!JSON.stringify(aluguel).includes(from)) {
if(!q.includes('/')) return reply(`Voc√™ vai colocar o n√∫mero da pessoa que alugou e ap√≥s isso uma barra ( / ). Ap√≥s a barra, coloque a quantidade de dias que este alugou para seu grupo. Ex:
${prefix+command} ${nmrdn.split('@')[0]}/30`)
barra = q.replace(" /", "/").replace("/ ", "/").replace(" / ", "/")
var [nmr, dias] = barra.split('/')
if(!Number(dias)) return reply(`Apenas n√∫meros pfvr`)
sandrobot = nmr.includes('@') ? nmr.split('@')[1].replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : nmr.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net"
const [checkwpp] = await sandro.onWhatsApp(sandrobot.split('@')[0])
if(checkwpp == undefined) {
return reply(`O n√∫mero ${sandrobot.split('@')[0]} n√£o √© v√°lido no whatsapp...`)
}
if(Number(dias) <= 0) return reply(`√â necess√°rio ao menos 1 dia de aluguel n√©.`)
if(dias.includes('.')) return reply("N√£o use n√∫meros decimais.")
aluguel.push({id: from, nome: groupName, tempo: Number(dias) + 1, totalRent: Number(dias) + 1, cliente: sandrobot, save: Number(moment.tz('America/Sao_Paulo').format('DD')), cortesia: false})
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
reply(`Grupo adicionado ao aluguel com sucesso.`)
} else {
if(!Number(args[0])) return reply(`Coloque quantos dias mais ser√£o adicionados ao aluguel deste grupo!`)
hehe = Number(args[0])
AB = aluguel.map(i => i.id).indexOf(from)
aluguel[AB].cortesia = false
aluguel[AB].nome = groupName
aluguel[AB].totalRent = aluguel[AB].tempo + hehe
aluguel[AB].tempo += hehe
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
reply(`+${args[0]} dia${Number(args[0]) > 1 ? 's' : ''} adicionado${Number(args[0]) > 1 ? 's' : ''} para este grupo.`)
}
break

case 'tirarrent':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isGroup) return reply(enviar.msg.grupo)
if(!Number(args[0])) return reply(`Apenas n√∫meros pfvr`)
if(!JSON.stringify(aluguel).includes(from)) return reply(`ID inexistente`)
AB = aluguel.map(i => i.id).indexOf(from)
aluguel[AB].cortesia = false
aluguel[AB].nome = groupName
aluguel[AB].tempo -= Number(args[0])
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
reply(`${args[0]} dia${Number(args[0]) > 1 ? 's' : ''} fo${Number(args[0]) > 1 ? 'ram' : 'i'} retirado${Number(args[0]) > 1 ? 's' : ''} deste grupo.`)
break

case 'delrent': case 'rmrent':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isGroup) return reply(enviar.msg.grupo)
if(!q) {
if(!JSON.stringify(aluguel).includes(from)) return reply(`ID inexistente`)
GP = grupos.map(i => i.id).indexOf(from)
grupos.splice(GP, 1)
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
AB = aluguel.map(i => i.id).indexOf(from)
aluguel.splice(AB, 1)
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
reply(`O registro desse grupo foi deletado com sucesso do meu banco de dados.`)
} else {
if(!Number(args[0]) || Number(args[0]) < 0 || Number(args[0]) > Number(aluguel.length + 1)) return reply(`Retorne um n√∫mero v√°lido... Olhe na ${prefix}listrent e veja o n√∫mero`)
BC = Number(args[0]) - 1
GP = grupos.map(i => i.id).indexOf(aluguel[BC].id)
grupos.splice(GP, 1)
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
aluguel.splice(BC, 1)
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
reply(`O registro desse grupo foi deletado com sucesso do meu banco de dados.`)
}
break

case 'cortesia24':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isGroup) return reply(enviar.msg.grupo)
if(JSON.stringify(aluguel).includes(from)) return reply(`Grupo j√° registrado...`)
if(!JSON.stringify(grupos).includes(from)) {
  grupos.push({id: from, limite: 5, validado: true})
  fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
}
aluguel.push({id: from, nome: groupName, tempo: 24, totalRent: 24, cliente: nmrdn, save: Number(moment.tz('America/Sao_Paulo').format('mm')), cortesia: true})
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
reply(`üí≥ Cart√£o verde validado! 24h liberadas neste grupo contando a partir de agora.`)
break

case 'listrent': case 'lista-aluguel':
if(!SoDono) return reply(enviar.msg.grupo)
if(aluguel.length > 0) {
var getGroups = await sandro.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
ingfoo.sort((a, b) => (a[0] < b.length))
for (g = 0; g < ingfoo.length; g++){
if(JSON.stringify(aluguel).includes(ingfoo[g].id)) {
sandrobot = aluguel.map(m => m.id).indexOf(ingfoo[g].id)
aluguel[sandrobot].nome = ingfoo[g].subject
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
}
}
txt = `[Total: *${aluguel.length}*] - Lista dos grupos alugados:\n‚Äî\n`
for(i = 0; i < aluguel.length; i++) {
hmm = aluguel[i].tempo
txt += `*[${i + 1}]* Grupo: *${aluguel[i].nome}*\n`
if(aluguel[i].cortesia == false) {
txt += `‚Ä¢ Tempo Restante: *${hmm} dia${hmm > 1 ? 's' : ''}*\n‚Ä¢ Cliente: *wa.me/${aluguel[i].cliente.split('@')[0]}*\n‚Äî\n`
} else {
txt += `_O grupo est√° usando o cart√£o cortesia, ou seja, 24h de uso foram liberadas._\n‚Äî\n`
}
}
reply(txt)
} else {
reply(`N√£o existe nenhum grupo registrado em aluguel senhor(a).`)
}
break

case 'lastrent':
if(!SoDono) return reply(Res_SoDono)
if(aluguel.length > 0) {
sandrobot = aluguel.map(i => i)
rank = sandrobot.sort((a, b) => (a.tempo < b.tempo) ? -1 : 0)
txt = "‚Ä¢ Top 3 grupos com o aluguel mais pr√≥ximo de acabar:\n‚Äî\n"
for(i = 0; i < 3; i++) {
if(rank[i].cortesia == false) {
hmm = rank[i].tempo
txt += `*[${i + 1}]* Grupo: *${rank[i].nome}*\n‚Ä¢ Tempo Restante: ${hmm} dia${hmm > 1 ? 's' : ''}\n‚Ä¢ Cliente: *wa.me/${rank[i].cliente.split('@')[0]}*\n‚Äî\n`
}
}
reply(txt)
} else {
reply(`N√£o existe nenhum grupo registrado em aluguel senhor(a).`)
}
break

case 'print': case 'printdesite':
    if (!q.trim()) {
        return reply(`Faltando a URL do site que quer tirar print. Exemplo: ${prefix + command} https://google.com\n\nN√£o esque√ßa do https se o site tiver, ou http se n√£o for um site com SSL.`);
    }

    // Valida√ß√£o de URL
    const urlRegex = /^(https?:\/\/[^\s$.?#].[^\s]*)$/;
    if (!urlRegex.test(q.trim())) {
        return reply("Por favor, forne√ßa uma URL v√°lida come√ßando com http ou https.");
    }

    try {
        reply(`Enviando no PV, por motivo de seguran√ßa...`);
        sandro.sendMessage(sender, { 
            image: { 
                url: `https://api.bronxyshost.com.br/api-bronxys/print_de_site?url=${q.trim()}&apikey=${API_SANDRO_MD}` 
            } 
        }, { quoted: info });
    } catch (error) {
        return reply("Erro ao processar o comando.");
    }
    break;

case 'calendario':
case 'dados':
setTimeout(() => {reagir(from, "üìÖ")}, 300)
var getGroups = await sandro.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
ingfoo.sort((a, b) => (a[0] < b.length))
hora16 = moment.tz('America/Sao_Paulo').format('HH:MM:SS')
date16 = moment.tz('America/Sao_Paulo').format('DD/MM/YYYY')
day = `${tempo}, ${pushname}!\n‚Ä¢ Grupo: *${isGroup ? groupName : "Privado"}*\n‚Ä¢ Data & Hora: *${date16} ${tempo2}*\n‚Ä¢ Nome do Bot: *${NomeDoBot}*\n‚Ä¢ Propriet√°rio: *${NickDono}*\n‚Ä¢ Estou operando atualmente em *${ingfoo.length}* grupos.`
if(JSON.stringify(aluguel).includes(from)) {
AB = aluguel.map(i => i.id).indexOf(from)
numsei = aluguel[AB].tempo / aluguel[AB].totalRent * 100
if(numsei < 10) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô`
if(numsei >= 10) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô`
if(numsei >= 20) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô`
if(numsei >= 30) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô`
if(numsei >= 40) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô`
if(numsei >= 50) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äô`
if(numsei >= 60) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí„Äô`
if(numsei >= 70) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äô`
if(numsei >= 80) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äô`
if(numsei >= 90) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí„Äô`
if(numsei >= 95) sandrobot = `${numsei.toFixed(0)}%„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äô`
hmm = aluguel[AB].tempo
if(aluguel[AB].cliente == sender || SoDono) {
  matheusSabe = `‚Ä¢ `
  if(aluguel[AB].cortesia == false) {
matheusSabe += `${hmm} dia${hmm > 1 ? 's' : ''} restantes`} else {matheusSabe += hmm > 1 ? `${hmm} horas` : `Alguns minutos`}
matheusSabe += ` at√© o fim do contrato.`
} else {matheusSabe = ``}
day += `\n‚Äî‚Äî\nüîã *Bateria restante para uso:*\n${sandrobot} ${matheusSabe}`}
reply(`${day}`)
break

case 'lojinha':
  try {
    const imagemUrl = fotobot; 
    const dptr = `TABELA DE PRE√áOS PARA ALUGUEL DE *GRUPOS* E *VIP*
    
Plano Semanal (7 dias): R$ 17,00

Plano Quinzenal (14 dias): R$ 22,00

Plano Mensal (30 dias): R$ 28,00

Plano Bimestral (60 dias): R$ 60,00

Plano Vital√≠cio (Mais Popular): R$ 120,00

Desbloqueio de Bot (Descriptografado): R$ 50,00


*Escolha o plano ideal e aproveite nossos benef√≠cios exclusivos!*

> ${NomeDoBot}`;

    // Envia o desafio com a imagem para o usu√°rio
    sandro.sendMessage(from, { image: { url: imagemUrl }, caption: dptr }, { quoted: selo });
  } catch (e) {
    console.log("Erro no comando 'desafio':", e);
  }
  break;


case 'aluguel': 
case 'alugueis': 
case 'alugar': 
case 'alugarbot': 
case 'loja':
reply(`Digite *${prefix}lojinha* para entrar em contato com meu propriet√°rio e liberar o acesso em seu grupo.\n‚Ä¢ Os valores s√£o passados por ele, n√£o tenho nenhuma informa√ß√£o registrada sobre isso.`)
break

case 'mycoderent': //by sandrobot
txt = `üîë Suas chaves de ativa√ß√£o:\n‚Äî\n`
nmr = 0
for(i of chaves) {if(i.cliente == sender) {txt += `\n‚Ä¢ ${i.key}`; nmr += 1}}
if(nmr <= 0) return reply("Voc√™ n√£o possui nenhuma chave de ativa√ß√£o.")
reply(isGroup ? "Por seguran√ßa lhe enviei em seu privado o que foi solicitado." : "Aguarde, estou enviando o que foi solicitado...")
sendMess(sender, txt)
break

case 'codelistrent'://by sandrobot
if(!SoDono) return reply(enviar.msg.donosmt)
txt = `[Total: *${i.chaves}*] - Lista de C√≥digos registrado(s) para aluguel:`
caixa = []
for(i of chaves) {
txt += `\n‚Äî\n‚Ä¢ Chave: *${i.key}*\n‚Ä¢ Cliente que realizou a solicita√ß√£o: *@${i.cliente.split('@')[0]}*\n‚Ä¢ Expira√ß√£o: ${nmr > 0 ? `${i.dias} dia${i.dias > 1 ? 's' : ''}` : `N√£o cont√©m dias para a expira√ß√£o, √© infinito.`}`
caixa.push(i.cliente)
}
if(caixa <= 0) return reply("N√£o existe nenhuma chave registrada em meu banco de dados.")
reply(isGroup ? "Por motivos de seguran√ßa, enviei em seu privado..." : "Aguarde, estou enviando o que foi solicitado!")
sandro.sendMessage(sender, {text: txt, mentions: caixa})
break

case 'gerarcoderent':
if(!SoDono) return reply(enviar.msg.donosmt)
barra = q.replace(' /', '/').replace('/ ', '/').replace(' / ', '/')
var [v1, v2] = barra.split('/')
if(!q.includes('/')) return reply(`Voc√™ vai colocar o n√∫mero da pessoa que alugou e ap√≥s isso uma barra ( / ). Ap√≥s a barra, coloque a quantidade de dias que este alugou para seu grupo.\n‚Ä¢ Exemplo: *${prefix+command} ${nmrdn.split('@')[0]}/30*`)
sandrobot = v1.toLowerCase() == "me" ? sender : v1.includes('@') ? v1.split('@')[1].replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : v1.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net"
const [checkkeygp] = await sandro.onWhatsApp(sandrobot.split('@')[0])
if(checkkeygp == undefined) {
return reply(`O n√∫mero *${sandrobot.split('@')[0]}* n√£o √© v√°lido no whatsapp.`)
}
nmr = Number(v2) > 0 ? Number(v2) : 0
idks = `G${v2}-`
idks += `${Number(from.replace("-", "").slice(2, 8)) * Number(sandrobot.slice(2, 8))}`
idks += `M${nmr}H-${Number(moment.tz('America/Sao_Paulo').format('DDMMYY')) + Number(moment.tz('America/Sao_Paulo').format('HHmmss'))}B`
chaves.push({key: idks, tipo: 1, dias: nmr, cliente: sandrobot, valor: 0})//tipo 1 = aluguel de grupo
fs.writeFileSync("./database/grupos/aluguel/chaves.json", JSON.stringify(chaves, null, 2))
mention(`üîëüåü C√≥digo de ativa√ß√£o do servi√ßo gerado com sucesso! Segue abaixo a chave:\n-> *${idks}*\n‚Äî‚Äî\n‚Ä¢ Quantidade de dias: *${nmr > 0 ? `${nmr} dia${nmr > 1 ? 's' : ''}` : `‚àû INFINITO`}*\n‚Ä¢ Usu√°rio(a) que alugou: *@${sandrobot.split('@')[0]}*`)
break

case 'gerarcodecort'://by sandrobot
if(!SoDono) return reply(enviar.msg.donosmt)
cort = 24 
idks = `G${cort}-`
idks += `${Number(from.replace("-", "").slice(2, 8)) * Number(sender.slice(2, 8))}`
idks += `E${Number(cort/2).toFixed(0)}R-${Number(moment.tz('America/Sao_Paulo').format('DDMMYY')) + Number(moment.tz('America/Sao_Paulo').format('HHmmss'))}A`
chaves.push({key: idks, tipo: 2, dias: 24, cliente: sender, valor: 0})//tipo 3 = cortesia
fs.writeFileSync("./database/grupos/aluguel/chaves.json", JSON.stringify(chaves, null, 2))
reply(`üõíüåü O c√≥digo cortesia foi gerado com sucesso! Segue abaixo a chave de ativa√ß√£o do mesmo:\n-> *${idks}*`)
break

case 'delcoderent':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!JSON.stringify(chaves).includes("sandrobot")) return reply(`N√£o h√° keys registradas`)
if(!q) return reply(`Cad√™ o c√≥digo de aluguel que voc√™ deseja apagar?`)
if(!JSON.stringify(chaves).includes(q)) return reply("O c√≥digo n√£o foi encontrado em nosso banco de dados, √© inexistente!")
AD = chaves.map(i => i.key).indexOf(q)
chaves.splice(AD, 1)
fs.writeFileSync("./database/grupos/aluguel/chaves.json", JSON.stringify(chaves, null, 2))
reply(`[!] O c√≥digo *${q}* foi deletado do sistema com sucesso.`)
break
 
case 'duelo': 
case 'votacao': 
case 'voting':
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isGroup) return reply('O comando s√≥ pode ser utilizado em grupo(s).')
if (args.length === 0) return reply(`Siga a exemplifica√ß√£o abaixo do comando para obter uma execu√ß√£o positiva!\n‚Ä¢ ${prefix+command} @tag1/@tag2/1\n\t- *Lembre-se* que o 1 apresentado no exemplo √© o tempo de ocorr√™ncia da vota√ß√£o, ou seja, ap√≥s 1 minuto passado os votos n√£o seram mais aceitos.`)
txt = args.join(' ')
nmr = txt.split('/')[0].replace('@' ,  '').replace(' ', '').replace(' ', '').replace(' ', '')
nmr2 = txt.split('/')[1].replace('@' ,  '').replace(' ', '').replace(' ', '').replace(' ', '')
tempo = txt.split('/')[2]
if(!Number(tempo)) return reply('Ops, insira o tempo o qual voc√™ deseja encerrar a vota√ß√£o.')
try {ppimg = await sandro.profilePictureUrl(`${nmr}@s.whatsapp.net`)} catch(erro) {ppimg = 'https://i.imgur.com/OqeFhHP.jpeg'}
try {ppimg2 = await sandro.profilePictureUrl(`${nmr2}@s.whatsapp.net`)} catch(erro) {ppimg2 = 'https://i.imgur.com/OqeFhHP.jpeg'}
bl = await getBuffer(ppimg); bl_up = await upload(bl)
bl2 = await getBuffer(ppimg2); bl_up2 = await upload(bl2)
BLAP = await getBuffer(`https://eruakorl.sirv.com/josival-aleatory/vs.jpg?text.0.text=1- ${nmr}&text.0.position.gravity=southwest&text.0.position.x=6%25&text.0.position.y=-2%25&text.0.size=32&text.0.color=ff0000&text.0.font.family=Source%20Serif%20Pro&text.0.font.weight=700&text.0.font.style=italic&text.0.background.opacity=100&text.1.text=2- ${nmr2}&text.1.position.x=-7%25&text.1.position.y=-2%25&text.1.size=32&text.1.color=0022ff&text.1.font.family=Source%20Serif%20Pro&text.1.font.weight=700&text.1.font.style=italic`); bl_upd = await upload(BLAP)
blup = await getBuffer(`https://yurimodz-apis.xyz/api/canvas/duelo?foto1=${bl_up}&foto2=${bl_up2}&fundo=${bl_upd}`)
sandro.sendMessage(from, {image: blup, caption: `*üó≥Ô∏è VOTA√á√ÉO INICIADA! üåü*\n‚Äî\n*@${nmr}* VS *@${nmr2}*\n‚Äî\n‚Ä¢ Para realizar seu voto use os seguintes n√∫meros *1 ou 2*, _exemplo abaixo:_\n‚Ä¢ Caso voc√™ deseja votar na op√ß√£o *1*, _voc√™ envia 1 no grupo_, caso seja o *2*, √© s√≥ voc√™ mudar os algarismos!\n*√â f√°cil n√©?* Agora √© s√≥ seguir o exemplo acima! Vote com consci√™ncia.\n‚Äì\n‚ö†Ô∏è S√≥ √© permitido votar uma √∫nica vez, portanto preste aten√ß√£o em quem vai votar, pois n√£o √© poss√≠vel alterar o voto.\n- Nenhum usu√°rio deve atrapalhar a vota√ß√£o, quem enviar mensagem sem esta participando do mesmo, estar√° descumprindo as regras e poder√° ser banido do grupo.\n‚Äî\n‚Ä¢ N√£o vote por afinidade ao integrante, vote pela qualidade das respostas.`, mentions: [nmr+'@s.whatsapp.net', nmr2+'@s.whatsapp.net']}, {quoted: selo})
AdicionarVoto(from, "-", nmr, nmr2, tempo, mention)
break

case 'zerar_votacao': 
case 'cancel_voting':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply("Apenas o administrador do grupo pode realizar a a√ß√£o..")
if(!fs.existsSync(`./database/func/votacao/p_votos/${from}.json`)) return reply(`N√£o existe nenhuma arquivo de vota√ß√£o com id do grupo.`)
DeletarVotos(from) /* Deletar os arquivos */
reply("‚Ä¢ Vota√ß√£o resetada / cancelada com sucesso, como foi solicitado!")
break

case 'rm_aviso':
case 'rm_avisos':  
if(!isGroup) return reply(enviar.msg.grupo)  
if(!isGroupAdmins) return reply(enviar.msg.adm)
for ( i of black_) {var RDFA = i}
if(!JSON.stringify(RDFA.PUXAR).includes(from)) return reply(mess.noWarning(prefix))
RDFA.PUXAR.splice(RDFA.PUXAR.indexOf(from))
fs.writeFileSync("./database/grupos/avisos.json", JSON.stringify(black_, null, 2))
reply(mess.warningRemoved())
break

case 'rg_aviso':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)  
var [hr, ms] = q.trim().split("|")
if(!q.trim().includes(":") && !q.trim().includes("|")) return reply(mess.warningSyntax(prefix))
var i5 = black_?.map(i => i?.hora)?.indexOf(hr)
if(JSON.stringify(black_[i5]?.PUXAR)?.includes(from)) {
black_[i5].PUXAR.splice(black_[i5].PUXAR.map(i => i.idgp).indexOf(from))
fs.writeFileSync("./database/grupos/avisos.json", JSON.stringify(black_, null, 2))
setTimeout(() => {
reply(mess.sucessDeleteWarning(prefix))
}, 500)
} else if(!JSON.stringify(black_).includes(hr)) {
black_.push({hora: hr, PUXAR: [{idgp: from, msg: ms, avisou: false}]})
fs.writeFileSync("./database/grupos/avisos.json", JSON.stringify(black_, null, 2))
reply(mess.sucessWarning())
} else if(!JSON.stringify(black_[i5].PUXAR).includes(from)) {
black_[i5].PUXAR.push({idgp: from, msg: ms, avisou: false})
fs.writeFileSync("./database/grupos/avisos.json", JSON.stringify(black_, null, 2))
reply(mess.sucessWarning())
}
break

case "idgp":
reply(`ID DO GRUPO: ${from}`)
break

case 'iddogrupo':
if(!SoDono) return reply(enviar.msg.donosmt)
reply(from)
break

//=========== [ √çNICIO JOGOS ] ========= //

case 'addpalavras_forca':
case 'addpalavras_f':  
if(!SoDono) return reply(enviar.msg.donosmt)
var [ttl, tema, dc] = q.toLowerCase().trim().split("|")
if(!q.includes("|")) return reply(mess.FormWrong_AddWordsForca1(prefix))
if(q.lastIndexOf("|") < 0) return reply(mess.FormWrong_AddWordsForca2(prefix))
kir = []
for (i of palavrasfr) {kir.push(i.plvr)}
if(kir.indexOf(ttl.toLowerCase().trim()) >= 0) return reply(mess.inUseWords_Forca())
palavrasfr.push({plvr: ttl, tema: tema, dica: dc})
fs.writeFileSync("./database/grupos/palavras_forca.json", JSON.stringify(palavrasfr, null, 2))
reply(mess.sucessAddWord_Forca())
break 

case 'rmpalavra_f':
case 'rmpalavra_forca':  
if(!SoDono) return reply(enviar.msg.donosmt) 
var i5 = palavrasfr.map( i => i.plvr).indexOf(q.trim().toLowerCase())
palavrasfr.splice(i5, 1)
fs.writeFileSync("./database/grupos/palavras_forca.json", JSON.stringify(palavrasfr, null, 2))
reply(mess.sucessRemWord_Forca())
break

case 'rv-forca': case 'resetforca': 
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isGroup) return reply(enviar.msg.grupo)
if(dataGp[0].forca_inc == false) return reply(mess.gameForcaNotStarted(prefix))
rv_forca()
reply(mess.sucessResetForca(prefix))
break
  
case 'mostrar_forca':
case 'ver_forca':  
case 'iniciar_forca':  
case 'jogodaforca':  
if(!isGroup) return reply(enviar.msg.grupo)
try {
if(dataGp[0].forca_inc) return reply(mess.forcaInProgress(prefix))
if(!dataGp[0].forca_inc) {
rv_forca()
var DM_FR = dataGp[0].forca_ofc[0]
dataGp[0].forca_inc = true
setGp(dataGp)
await sleep(300)
linha_fr = " "
for (i of DM_FR.palavra){linha_fr += ` ${i}`}
reply(mess.forcaStarted(DM_FR, linha_fr, prefix)) 
}
} catch (e) {
console.log(e)
}
break

case 'r-forca':
case 'r-f':
if(!isGroup) return reply(enviar.msg.grupo)  
if(!dataGp[0].forca_inc) return reply(mess.gameForcaNotStarted(prefix))
if(!q.toLowerCase().trim()) return reply("Digite a letra que deseja responder..")
var q2 = q_2.trim().toLowerCase()
if(ANT_LTR_MD_EMJ(q2) || Number(q2)) return reply("N√£o pode letras modificadas, nem emoji, nem n√∫meros..")
if(q.trim().length == 2) return reply("Digite letra por letra para tentar adivinhar, ou acerte a palavra toda, boa sorte...")
DM_FR = dataGp[0].forca_ofc[0]
if(DM_FR.escreveu.indexOf(q2) >= 0) return reply("Esta letra j√° foi utilizada..")
var ERRQ = DM_FR.palavra_ofc.includes(q2) ? 0 : 1
var ERROS = dataGp[0].forca_ofc[0].erros
DM_FR.escreveu.push(q2); setGp(dataGp)
PSC = [] 
if(DM_FR.palavra_ofc.indexOf(q2) >= 0) {
for (i = 0; i < DM_FR.palavra_ofc.length; i++) {
if(DM_FR.palavra_ofc[i] == q2) {
PSC.push(i)
DM_FR.acertos += 1
}}
setGp(dataGp)
for ( i of PSC){
DM_FR.palavra[i] = q2; setGp(dataGp)}
}
await sleep(300)
linha_fr = " "
for ( i of DM_FR.palavra){linha_fr += ` ${i}`}
letra_ut = " "
for ( i of DM_FR.escreveu){letra_ut += `${i}, `}
if(q.length > 2) {reply("Humm, espertinho quer acertar a palavra toda")}
await sleep(500)
if(DM_FR.palavra_ofc.indexOf(q2) >= 0 || q2.length > 2 && q2 == DM_FR.palavra_ofc) {
reply(`${q2.length > 2 ? `Voc√™ acertou a palavra toda e ganhou bom menino(a), irei resetar o jogo...` : DM_FR.acertos == DM_FR.palavra_ofc.length ? `Parab√©ns, toda palavra foi conclu√≠da : < ${DM_FR.palavra_ofc} > irei resetar o jogo..`:`Voc√™ acertou uma letra e ganhou continue assim..`}`)
if(q2.length > 2 || DM_FR.acertos == DM_FR.palavra_ofc.length){return rv_forca()}
await sleep(200)
reply(mess.forcaStartedRespond(DM_FR, ERROS, ERRQ, linha_fr, letra_ut))
} else {
reply(`${q2.length > 2 ? `Infelizmente voc√™ perdeu, errou a palavra toda, deveria ter tentado letra por letra n√©, irei resetar o jogo..` :ERROS+ERRQ == 6 ? `Aa, voc√™ completou 6 Erros, e perdeu irei resetar o jogo..` : `Voc√™ Errou, e perdeu üò•..`}`)
dataGp[0].forca_ofc[0].erros += 1
setGp(dataGp)
if(q2.length > 2 || ERROS+ERRQ == 6){return rv_forca()}
await sleep(200)
reply(RST_T)
}
break

case 'quando':  
if (args.length < 1) return reply('Digite a pergunta!')
const meupirul = ['Hoje', 'Amanh√£', 'Nunca', 'dia', 'semana', 'm√™s', 'ano']
const meupirul2 = ['dias', 'semanas', 'meses', 'anos']
randomm = meupirul[Math.floor(Math.random() * meupirul.length)]
random2 = `${Math.floor(Math.random() * 11) + 1}`
if (randomm == 'Hoje' || randomm == 'Amanh√£' || randomm == 'Nunca') {
texto = `Pergunta: ${body.slice(1)}\nResposta: ${randomm}`
} else if (random2 == 1) {
texto = `Pergunta: ${body.slice(1)}\nResposta:  1 ${randomm}`
} else {
random3 = meupirul2[Math.floor(Math.random() * meupirul2.length)]
texto = `Pergunta: ${body.slice(1)}\nResposta: ${random2} ${random3}`
}
reply(texto)
break

case 'adivinha': case 'divinhar':
if(!isModobn) return reply(mess.warningMB(prefix))
    if (args.length < 1) return reply('Digite um n√∫mero entre 1 e 10!');
    
    const numero = Math.floor(Math.random() * 10) + 1; // N√∫mero aleat√≥rio entre 1 e 10
    const tentativa = parseInt(args[0], 10); // N√∫mero digitado pelo usu√°rio

    let resposta; // Alteramos o nome da vari√°vel para evitar conflito
    if (tentativa < 1 || tentativa > 10 || isNaN(tentativa)) {
        resposta = 'Por favor, digite um n√∫mero v√°lido entre 1 e 10.';
    } else if (tentativa === numero) {
        resposta = `‚úÖParab√©ns! Voc√™ adivinhou o n√∫mero: ${numero}!`;
    } else {
        resposta = `‚ùåErrado! O n√∫mero era: ${numero}. Tente novamente!`;
    }

    reply(resposta);
    break;
    
//=========== [ FINAL JOGOS ] ========= //

case 'listaddi': case 'ddilist':
if(!isGroup) return reply(enviar.msg.grupo);
if(!isGroupAdmins) return reply(enviar.msg.adm);
if(q.length < 1) return reply(`Fale o c√≥digo de um pa√≠s, por exemplo: *${prefix}listaddi 55*`)
if(isNaN(q))return reply(`Fale o c√≥digo de um pa√≠s, por exemplo: *${prefix}listaddi 55*`)
teks = `‚Ä¢ N√∫mero com c√≥digo de pa√≠s +${args[0]} registrados no grupo:\n‚Äì\n`
men = []
for(let mem of groupMembers) {
if(mem.id.startsWith(q)) {
teks += `‚áí @${mem.id.split('@')[0]}\n`
men.push(mem.id)
}
}
if(teks.indexOf('‚áí') < 0) return reply(`Nenhum n√∫mero com o ddi *+${args[0]}* foi encontrado.`)
sandro.sendMessage(from, {text: teks, mentions: men}, {quoted: selo}).catch((error) => {
   reply(mess.error())
})
break

case 'listabr': case 'brlist':
if(!isGroup) return reply(enviar.msg.grupo);
if(!isGroupAdmins) return reply(enviar.msg.adm);
teks = `[Total: *${groupMembers.length}*] Lista de n√∫meros brasileiros presentes neste grupo:\n‚Äì\n`
men = []
for (let mem of groupMembers) {
if(mem.id.startsWith(55)) {
teks += `‚áí @${mem.id.split('@')[0]}\n`
men.push(mem.id);
}
}
if(teks.indexOf('‚áí') < 0) return reply('Nenhum n√∫mero brasileiro foi encontrado no grupo.')
sandro.sendMessage(from, {text: teks, mentions: men}, {quoted: selo}).catch((error) => {
   reply(mess.error())
})
break

case 'listaddd': case 'dddlist':
if(!isGroup) return reply(enviar.msg.grupo);
if(!isGroupAdmins) return reply(enviar.msg.adm);
if(q.length < 1) return reply(`Fale o c√≥digo do estado, por exemplo: *${prefix}listaddd 82*`)
if(isNaN(q))return reply(`Fale o c√≥digo de um estado(ddd), por exemplo: *${prefix}listaddd 82*`)
teks = `‚Ä¢ Lista de n√∫meros brasileiros com o DDD *${q}* presentes neste grupo:\n‚Äì\n`
men = []
for (let mem of groupMembers) {
if(mem.id.startsWith(55+q)) {
teks += `‚áí @${mem.id.split('@')[0]}\n`
men.push(mem.id);
}
}
if(teks.indexOf('‚áí') < 0) return reply('Nenhum *n√∫mero brasileiro* com ddd fornecido foi encontrado no grupo.')
sandro.sendMessage(from, {text: teks, mentions: men}, {quoted: selo}).catch((error) => {
   reply(mess.error())
})
break

case 'limpar_mortos-cnt':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isGroup) return reply(enviar.msg.donosmt)
bla = [] 
var CNT_RS = countMessage[countMessage.map(i => i.groupId).indexOf(from)].numbers
for ( i = 0; i < CNT_RS.map( i => i.id).length; i++) { bla.push(CNT_RS.map( i => i.id)[i])};
for ( i of groupMembers) {bla.splice(bla.indexOf(i.id), 1)};
for ( i of bla) {CNT_RS.splice(CNT_RS.indexOf(i), 1)};
fs.writeFileSync("./settings/media/countmsg.json", JSON.stringify(countMessage))
reply("Usu√°rios que j√° foi removido, ou saiu do grupo, foi tirado do contador de mensagens..")
break

case 'tirar_docnt':
if(!SoDono) return
if(!isGroup) return reply(enviar.msg.donosmt)
var i2 = countMessage.map(i => i.groupId).indexOf(from) 
var i = countMessage[i2].numbers.map(i => i.id).indexOf(q.trim()+"@s.whatsapp.net")  
countMessage[i2].numbers.splice(i,1)
fs.writeFileSync("./settings/media/countmsg.json", JSON.stringify(countMessage))
reply("Usu√°rio tirado do contador de mensagens com sucesso...")
break

case 'anotar':
case 'tirar_nota':
case 'rmnota':
if(!isGroup) return reply(`S√≥ em grupo pode utilizar este comando.`)
if(!isGroupAdmins) return reply(`S√≥ adm pode utilizar este tipo de comando.`)
if(command == "anotar") {
var [q5, q10] = q.trim().split("|")
if(!q5 || !q10 || !q.includes("|")) return reply(`Digite o t√≠tulo da anota√ß√£o e o texto que deseja anotar..\nExemplo: ${prefix}anotar Cachorro|Cachorros s√£o bom pra comer na Venezuela...`)
if(JSON.stringify(anotar).includes(from)) {  
var i2 = anotar.map(i => i.grupo).indexOf(from)  
if(JSON.stringify(anotar[i2].puxar).includes(q5)) {
var i3 = anotar[i2].puxar.map(i => i.nota).indexOf(q5)  
if(anotar[i2].puxar[i3].nota == q5) return reply(`Esta anota√ß√£o j√° est√° inclusa, utilize outro t√≠tulo.. Ou voc√™ pode tirar com\n${prefix}tirar_nota ${q5}`)
}
}
if(!JSON.stringify(anotar).includes(from)) {
anotar.push({grupo: from, puxar: [{nota: q5, anotacao: q10}]})
fs.writeFileSync("./database/func/anotar.json", JSON.stringify(anotar))
reply("Anota√ß√£o registrada com sucesso...")
} else {
anotar[i2].puxar.push({nota: q5, anotacao: q10})
fs.writeFileSync("./database/func/anotar.json", JSON.stringify(anotar))
reply("Anota√ß√£o registrada com sucesso...")  
}
} else {
if(!q) return reply("Digite qual anota√ß√£o deseja tirar pelo t√≠tulo..")
if(JSON.stringify(anotar).includes(from)) {  
var i2 = anotar.map(i => i.grupo).indexOf(from)  
if(JSON.stringify(anotar[i2].puxar).includes(q)) {
var i3 = anotar[i2].puxar.map(i => i.nota).indexOf(q)  
}
}
if(0 > anotar[i2].puxar.map(i => i.nota).indexOf(q)) return reply("Esta nota n√£o est√° inclusa, verifique com aten√ß√£o...")
anotar[i2].puxar.splice(i3, 1)
fs.writeFileSync("./database/func/anotar.json", JSON.stringify(anotar))
reply(`Anota√ß√£o ${q} tirada com sucesso...`)
}
break

case 'anotacao':
case 'anotacoes':  
case 'nota':
case 'notas':
if(!isGroup) return reply(`S√≥ em grupo pode utilizar este comando.`)
if(command == "anotacao" || command == "nota") {
if(!q) return reply("Digite o t√≠tulo da anota√ß√£o que deseja puxar..")
if(!JSON.stringify(anotar).includes(from)) return reply("Este grupo n√£o tem nenhuma anota√ß√£o...")
var i2 = anotar.map(i => i.grupo).indexOf(from)  
if(!JSON.stringify(anotar[i2].puxar).includes(q)) return reply("N√£o cont√©m nenhuma anota√ß√£o com este t√≠tulo.")
var i3 = anotar[i2].puxar.map(i => i.nota).indexOf(q)  
mentions(`„Äà ${anotar[i2].puxar[i3].anotacao} „Äâ`)
} else {
var i2 = anotar.map(i => i.grupo).indexOf(from)    
if(anotar[i2].puxar.length == 0) return reply("Este grupo n√£o tem nenhuma anota√ß√£o...")    
var i2 = anotar.map(i => i.grupo).indexOf(from) 
var antr = anotar[i2].puxar 
txtin = `Aqui est√° todas as anota√ß√µes registradas em minha database do grupo: *[ ${groupName} ]*\n`
for ( i = 0; i < antr.length; i++) {
txtin += `\n‚Üù Anota√ß√£o: ‚üÆ ${anotar[i2].puxar[i].nota} ‚üØ - „Äà ${anotar[i2].puxar[i].anotacao} „Äâ\n`
}
txtin += ""
mentions(txtin)
}
break

case 'download-link':
if(q.includes("video") || q.includes("mp4")) {
sandro.sendMessage(from, {video: {url: q}, mimetype: 'video/mp4'}, {quoted: selo}).catch(e => {
reply("Erro, visualize se este link √© v√°lido...")
})
} else if(q.includes("webp") || q.includes("jpg")) {
sandro.sendMessage(from, {image: {url: q}}, {quoted: selo}).catch(e => {
reply("Erro, visualize se este link √© v√°lido...")
})
}
break

case 'signo':
try {
if(!q.trim()) return reply(`Digite seu signo, exemplo: ${prefix+command} virgem`);
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/horoscopo?signo=${q}&apikey=${API_SANDRO_MD}`)
sandro.sendMessage(from, {image: {url: ABC.img}, caption: `Signo: ${q}\n\n${ABC.title}\n${ABC.body}`}).catch(e => {
return reply("Erro..");
})
} catch (e) {
return reply("Erro..");
}
break;

case 'verificado-global': 
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isVerificado) {
nescessario.verificado = true
setNes(nescessario)
reply("O verificado foi desativado com sucesso, ou seja, o selo foi retirado de todos os meus comandos! *Para reativar √© s√≥ digitar o comando novamente.*")
} else if(isVerificado) {
nescessario.verificado = false
setNes(nescessario)
reply(`O verificado foi ativado, ou seja, o selo foi colocado em todos os meus comandos! *Para remover o verificado dos comandos, use o comando novamente.*`) 
}
break

case 'audio-menu': 
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isAudioMenu) {
nescessario.menu_audio = true
setNes(nescessario)
reply(`O √°udio foi ativado para o menu com sucesso, se quiser desativar √© s√≥ digitar o comando novamente...`)
} else if(isAudioMenu) {
nescessario.menu_audio = false
setNes(nescessario)
reply(`O √°udio foi desativado para o menu com sucesso, se quiser ativar √© s√≥ digitar o comando novamente...`)
}
break

case 'comunidade':
reply(`*Fa√ßa parte da comunidade e fique por dentro de todas as atualiza√ß√µes dos bots do sandro* ‚ù§Ô∏è

https://whatsapp.com/channel/0029VarBveB6hENqZSkAM71p`)
break

case 'infodono':  
templateMassage = {
image: {url:"./database/imagens/menu.jpg",
quoted: info},
caption: infodono(prefix, pushname, NickDono, NomeDoBot, isChVip, sender),
headerType: 4,
contextinfo:{externalAdReply:{
thumbnail: global.reagir1,
mediaType:2,
//templateButtons: templateButtons
}}
}
sandro.sendMessage(from, templateMassage)
break
    
case 'menu':
case 'menubasico':
reagir(from, "üíú")

try {
const imagemUrl = fotobot; 
const menuTexto = menu(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'menulink':
case 'menulinks':
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = menulink(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'menudono':
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = menudono(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'menuadm':
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = adms(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'cpf':
if(!isGroup && !SoDono) return reply("*‚ùå ERRO: PLANO VENCIDO*\n\n*üòé RENOVE SEU PLANO PARA CONTINUAR USANDO TODAS AS MINHAS FUNCIONALIDADE*!\n\n*üí¨ ENTRE EM CONTATO AGORA COM NOSSO TIME DE ATENDIMENTO*!\n\n*üìû wa.me/5511973969910 - CORINGA üé≤*")
if (!q) return reply(`\n‚òë ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî CPF\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nConsulta Completa de CPF\n\nVeja abaixo um exemplo de como realizar a consulta:\n\n-cpf 11132699797\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
sandro.sendMessage(from, {text: `‚û† Consultando : ${q}\n*üïµüèª HASHIRO - BUSCAS*\n*‚ö†Ô∏è AGUARDE UM MOMENTO ‚ö†Ô∏è*`}, {quoted: info })
consulta = await fetchJson(`https://pnsapis.online/api/busca/cpf1?query=${q}&apitoken=SANDRO_MD_PUXD`)
await sandro.relayMessage(from, {extendedTextMessage: {text: consulta.resultado + `\n\n‚Ä¢ ùêáùêÄùêíùêáùêàùêëùêé ùêÅùêéùêì ùêÅùêîùêíùêÇùêÄùêí`,
contextInfo: {
expiration: info.message[type].contextInfo?.expiration,
mentionedJid: [from],
forwardingScore: 0x100,
isForwarded: true,
participant: info.key.participant, stanzaId: info.key.id, remoteJid: info.remoteJid,
quotedMessage: info.message }}}, {})
if (!q) {
await sleep(1500)
sandro.sendMessage(from, {text: `‚û† A consulta foi enviado em seu privado.
üïµüèª *${NomeDoBot}* - BUSCAS
‚úÖ CONSULTA REALIZADA ‚úÖ` }, {quoted: info })}
try {
} catch (e) {
console.log(e)
reply('‚ö†Ô∏è N√ÉO ENCONTRADO OU INV√ÅLIDO ‚ö†Ô∏è')}
break
                        
case 'cpf2':
if(!isGroup && !SoDono) return reply("*‚ùå ERRO: PLANO VENCIDO*\n\n*üòé RENOVE SEU PLANO PARA CONTINUAR USANDO TODAS AS MINHAS FUNCIONALIDADE*!\n\n*üí¨ ENTRE EM CONTATO AGORA COM NOSSO TIME DE ATENDIMENTO*!\n\n*üìû wa.me/5511973969910 - CORINGA üé≤*")
if (!q) return reply("\n‚òë ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî CPF\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nConsulta Completa de CPF\n\nVeja abaixo um exemplo de como realizar a consulta:\n\n-cpf2 11132699797\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
sandro.sendMessage(from, {text: `‚û† Consultando : ${q}\n*üïµüèª HASHIRO - BUSCAS*\n*‚ö†Ô∏è AGUARDE UM MOMENTO ‚ö†Ô∏è*`}, {quoted: info })
consulta = await fetchJson(`https://pnsapis.online/api/busca/cpf2?query=${q}&apitoken=SANDRO_MD_PUXD`)
await sandro.relayMessage(from, {extendedTextMessage: {text: consulta.resultado + `\n\n‚Ä¢ ùêáùêÄùêíùêáùêàùêëùêé ùêÅùêéùêì ùêÅùêîùêíùêÇùêÄùêí`,
contextInfo: {
expiration: info.message[type].contextInfo?.expiration,
mentionedJid: [from],
forwardingScore: 0x100,
isForwarded: true,
participant: info.key.participant, stanzaId: info.key.id, remoteJid: info.remoteJid,
quotedMessage: info.message }}}, {})
if (!q) {
await sleep(1500)
sandro.sendMessage(from, {text: `‚û† A consulta foi enviado em seu privado.
üïµüèª *${NomeDoBot}* - BUSCAS
‚úÖ CONSULTA REALIZADA ‚úÖ` }, {quoted: info })}
try {
} catch (e) {
console.log(e)
reply('‚ö†Ô∏è N√ÉO ENCONTRADO OU INV√ÅLIDO ‚ö†Ô∏è')}
break
              
 case 'cpf3':
if(!isGroup && !SoDono) return reply("*‚ùå ERRO: PLANO VENCIDO*\n\n*üòé RENOVE SEU PLANO PARA CONTINUAR USANDO TODAS AS MINHAS FUNCIONALIDADE*!\n\n*üí¨ ENTRE EM CONTATO AGORA COM NOSSO TIME DE ATENDIMENTO*!\n\n*üìû wa.me/5511973969910 - CORINGA üé≤*")
if (!q) return reply("\n‚òë ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî CPF\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nConsulta Completa de CPF\n\nVeja abaixo um exemplo de como realizar a consulta:\n\n-cpf3 11132699797\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
sandro.sendMessage(from, {text: `‚û† Consultando : ${q}\n*üïµüèª HASHIRO - BUSCAS*\n*‚ö†Ô∏è AGUARDE UM MOMENTO ‚ö†Ô∏è*`}, {quoted: info })
consulta = await fetchJson(`https://pnsapis.online/api/busca/cpf3?query=${q}&apitoken=SANDRO_MD_PUXD`)
await sandro.relayMessage(from, {extendedTextMessage: {text: consulta.resultado + `\n\n‚Ä¢ ùêáùêÄùêíùêáùêàùêëùêé ùêÅùêéùêì ùêÅùêîùêíùêÇùêÄùêí`,
contextInfo: {
expiration: info.message[type].contextInfo?.expiration,
mentionedJid: [from],
forwardingScore: 0x100,
isForwarded: true,
participant: info.key.participant, stanzaId: info.key.id, remoteJid: info.remoteJid,
quotedMessage: info.message }}}, {})
if (!q) {
await sleep(1500)
sandro.sendMessage(from, {text: `‚û† A consulta foi enviado em seu privado.
üïµüèª *${NomeDoBot}* - BUSCAS
‚úÖ CONSULTA REALIZADA ‚úÖ` }, {quoted: info })}
try {
} catch (e) {
console.log(e)
reply('‚ö†Ô∏è N√ÉO ENCONTRADO OU INV√ÅLIDO ‚ö†Ô∏è')}
break

case 'nome':
if(!isGroup && !SoDono) return reply("*‚ùå ERRO: PLANO VENCIDO*\n\n*üòé RENOVE SEU PLANO PARA CONTINUAR USANDO TODAS AS MINHAS FUNCIONALIDADE*!\n\n*üí¨ ENTRE EM CONTATO AGORA COM NOSSO TIME DE ATENDIMENTO*!\n\n*üìû wa.me/5511973969910 - CORINGA üé≤*")
if (!q) return reply("\n‚òë ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî NOME\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nConsulta Completa de NOME\n\nVeja abaixo um exemplo de como realizar a consulta:\n\n-nome pedro Henrique\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
sandro.sendMessage(from, {text: `‚û† Consultando : ${q}\n*üïµüèª HASHIRO - BUSCAS*\n*‚ö†Ô∏è AGUARDE UM MOMENTO ‚ö†Ô∏è*`}, {quoted: info })
consulta = await fetchJson(`https://pnsapis.online/api/busca/nome?query=${q}&apitoken=SANDRO_MD_PUXD`)
await sandro.relayMessage(from, {extendedTextMessage: {text: consulta.resultado + `\n\n‚Ä¢ ùêáùêÄùêíùêáùêàùêëùêé ùêÅùêéùêì ùêÅùêîùêíùêÇùêÄùêí`,
contextInfo: {
expiration: info.message[type].contextInfo?.expiration,
mentionedJid: [from],
forwardingScore: 0x100,
isForwarded: true,
participant: info.key.participant, stanzaId: info.key.id, remoteJid: info.remoteJid,
quotedMessage: info.message }}}, {})
if (!q) {
await sleep(1500)
sandro.sendMessage(from, {text: `‚û† A consulta foi enviado em seu privado.
üïµüèª *${NomeDoBot}* - BUSCAS
‚úÖ CONSULTA REALIZADA ‚úÖ` }, {quoted: info })}
try {
} catch (e) {
console.log(e)
reply('‚ö†Ô∏è N√ÉO ENCONTRADO OU INV√ÅLIDO ‚ö†Ô∏è')}
break

case 'cep':
if(!isGroup && !SoDono) return reply("*‚ùå ERRO: PLANO VENCIDO*\n\n*üòé RENOVE SEU PLANO PARA CONTINUAR USANDO TODAS AS MINHAS FUNCIONALIDADE*!\n\n*üí¨ ENTRE EM CONTATO AGORA COM NOSSO TIME DE ATENDIMENTO*!\n\n*üìû wa.me/5511973969910 - CORINGA üé≤*")
if (!q) return reply("\n‚òë ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî CEP\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nConsulta Completa de CEP\n\nVeja abaixo um exemplo de como realizar a consulta:\n\n-cep 01311200\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
sandro.sendMessage(from, {text: `‚û† Consultando : ${q}\n*üïµüèª HASHIRO - BUSCAS*\n*‚ö†Ô∏è AGUARDE UM MOMENTO ‚ö†Ô∏è*`}, {quoted: info })
consulta = await fetchJson(`https://pnsapis.online/api/busca/cep?query=${q}&apitoken=SANDRO_MD_PUXD`)
await sandro.relayMessage(from, {extendedTextMessage: {text: consulta.resultado + `\n\n‚Ä¢ ùêáùêÄùêíùêáùêàùêëùêé ùêÅùêéùêì ùêÅùêîùêíùêÇùêÄùêí`,
contextInfo: {
expiration: info.message[type].contextInfo?.expiration,
mentionedJid: [from],
forwardingScore: 0x100,
isForwarded: true,
participant: info.key.participant, stanzaId: info.key.id, remoteJid: info.remoteJid,
quotedMessage: info.message }}}, {})
if (!q) {
await sleep(1500)
sandro.sendMessage(from, {text: `‚û† A consulta foi enviado em seu privado.
üïµüèª *${NomeDoBot}* - BUSCAS
‚úÖ CONSULTA REALIZADA ‚úÖ` }, {quoted: info })}
try {
} catch (e) {
console.log(e)
reply('‚ö†Ô∏è N√ÉO ENCONTRADO OU INV√ÅLIDO ‚ö†Ô∏è')}
break

case 'telefone':
if(!isGroup && !SoDono) return reply("*‚ùå ERRO: PLANO VENCIDO*\n\n*üòé RENOVE SEU PLANO PARA CONTINUAR USANDO TODAS AS MINHAS FUNCIONALIDADE*!\n\n*üí¨ ENTRE EM CONTATO AGORA COM NOSSO TIME DE ATENDIMENTO*!\n\n*üìû wa.me/5511973969910 - CORINGA üé≤*")
              if (!q) return reply("\n‚òë CONSULTA TELEFONE\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nConsulta completa telefone.\n\nVeja abaixo um exemplo de como realizar a consulta:\n\n-telefone 19996101067\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
sandro.sendMessage(from, {text: `‚û† Consultando : ${q}\n*üïµüèª HASHIRO - BUSCAS*\n*‚ö†Ô∏è AGUARDE UM MOMENTO ‚ö†Ô∏è*`}, {quoted: info })
consulta = await fetchJson(`https://pnsapis.online/api/busca/telefone?query=${q}&apitoken=SANDRO_MD_PUXD`)
await sandro.relayMessage(from, {extendedTextMessage: {text: consulta.resultado + `\n\n‚Ä¢ ùêáùêÄùêíùêáùêàùêëùêé ùêÅùêéùêì ùêÅùêîùêíùêÇùêÄùêí`,
contextInfo: {
expiration: info.message[type].contextInfo?.expiration,
mentionedJid: [from],
forwardingScore: 0x100,
isForwarded: true,
participant: info.key.participant, stanzaId: info.key.id, remoteJid: info.remoteJid,
quotedMessage: info.message }}}, {})
if (!q) {
await sleep(1500)
sandro.sendMessage(from, {text: `‚û† A consulta foi enviado em seu privado.
üïµüèª *${NomeDoBot}* - BUSCAS
‚úÖ CONSULTA REALIZADA ‚úÖ` }, {quoted: info })}
try {
} catch (e) {
console.log(e)
reply('‚ö†Ô∏è N√ÉO ENCONTRADO OU INV√ÅLIDO ‚ö†Ô∏è')}
break
              
case 'placa':
if(!isGroup && !SoDono) return reply("*‚ùå ERRO: PLANO VENCIDO*\n\n*üòé RENOVE SEU PLANO PARA CONTINUAR USANDO TODAS AS MINHAS FUNCIONALIDADE*!\n\n*üí¨ ENTRE EM CONTATO AGORA COM NOSSO TIME DE ATENDIMENTO*!\n\n*üìû wa.me/5511973969910 - CORINGA üé≤*")
if (!q) return reply("\n‚òë ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî PLACA\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nConsulta completa de placa.\n\nVeja abaixo um exemplo de como realizar a consulta:\n\n-placa abc1234\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
sandro.sendMessage(from, {text: `‚û† Consultando : ${q}\n*üïµüèª HASHIRO - BUSCAS*\n*‚ö†Ô∏è AGUARDE UM MOMENTO ‚ö†Ô∏è*`}, {quoted: info })
consulta = await fetchJson(`https://pnsapis.online/api/busca/placa?query=GLU3211&apitoken=SANDRO_MD_PUXD`)
await sandro.relayMessage(from, {extendedTextMessage: {text: consulta.resultado + `\n\n‚Ä¢ ùêáùêÄùêíùêáùêàùêëùêé ùêÅùêéùêì ùêÅùêîùêíùêÇùêÄùêí`,
contextInfo: {
expiration: info.message[type].contextInfo?.expiration,
mentionedJid: [from],
forwardingScore: 0x100,
isForwarded: true,
participant: info.key.participant, stanzaId: info.key.id, remoteJid: info.remoteJid,
quotedMessage: info.message }}}, {})
if (!q) {
await sleep(1500)
sandro.sendMessage(from, {text: `‚û† A consulta foi enviado em seu privado.
üïµüèª *${NomeDoBot}* - BUSCAS
‚úÖ CONSULTA REALIZADA ‚úÖ` }, {quoted: info })}
try {
} catch (e) {
console.log(e)
reply('‚ö†Ô∏è N√ÉO ENCONTRADO OU INV√ÅLIDO ‚ö†Ô∏è')}
break
              
case 'cnpj':
if(!isGroup && !SoDono) return reply("*‚ùå ERRO: PLANO VENCIDO*\n\n*üòé RENOVE SEU PLANO PARA CONTINUAR USANDO TODAS AS MINHAS FUNCIONALIDADE*!\n\n*üí¨ ENTRE EM CONTATO AGORA COM NOSSO TIME DE ATENDIMENTO*!\n\n*üìû wa.me/5511973969910 - CORINGA üé≤*")
if (!q) return reply("\n‚òë ùóñùó¢ùó°ùó¶ùó®ùóüùóßùóî CNPJ\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nConsulta completa de cnpj.\n\nVeja abaixo um exemplo de como realizar a consulta:\n\n-cnpj 10440482000154\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
sandro.sendMessage(from, {text: `‚û† Consultando : ${q}\n*üïµüèª HASHIRO - BUSCAS*\n*‚ö†Ô∏è AGUARDE UM MOMENTO ‚ö†Ô∏è*`}, {quoted: info })
consulta = await fetchJson(`https://pnsapis.online/api/busca/cnpj?query=${q}&apitoken=SANDRO_MD_PUXD`)
await sandro.relayMessage(from, {extendedTextMessage: {text: consulta.resultado + `\n\n‚Ä¢ ùêáùêÄùêíùêáùêàùêëùêé ùêÅùêéùêì ùêÅùêîùêíùêÇùêÄùêí`,
contextInfo: {
expiration: info.message[type].contextInfo?.expiration,
mentionedJid: [from],
forwardingScore: 0x100,
isForwarded: true,
participant: info.key.participant, stanzaId: info.key.id, remoteJid: info.remoteJid,
quotedMessage: info.message }}}, {})
if (!q) {
await sleep(1500)
sandro.sendMessage(from, {text: `‚û† A consulta foi enviado em seu privado.
üïµüèª *${NomeDoBot}* - BUSCAS
‚úÖ CONSULTA REALIZADA ‚úÖ` }, {quoted: info })}
try {
} catch (e) {
console.log(e)
reply('‚ö†Ô∏è N√ÉO ENCONTRADO OU INV√ÅLIDO ‚ö†Ô∏è')}
break
                            
case 'puxada':
if(!isPremium) return reply(`Ola para esse comando funciona voc√™ precisa ser adicionado na lista *VIP* Me Chama no pv 553195595444`)
reply(`*MENU DE PUXAR DADOS*

‚ï≠‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚™©
‚îú‚ûß${prefix}placa (nome)
‚îú‚ûß${prefix}placa2 (nome)
‚îú‚ûß${prefix}cpf (n√∫mero)
‚îú‚ûß${prefix}cpf2 (n√∫mero)
‚îú‚ûß${prefix}cpf3 (numero)
‚îú‚ûß${prefix}impostos (nome)
‚îú‚ûß${prefix}cns (nome)
‚îú‚ûß${prefix}score (numero)
‚îú‚ûß${prefix}beneficios (numero)
‚îú‚ûß${prefix}ip (numero)
‚îú‚ûß${prefix}parentes (nome)
‚îú‚ûß${prefix}site (site)
‚îú‚ûß${prefix}chassi (n√∫mero)
‚îú‚ûß${prefix}vacina (nome)
‚îú‚ûß${prefix}vizinhos (nome)
‚îú‚ûß${prefix}rg (numero)
‚îú‚ûß${prefix}bin (nome)
‚îú‚ûß${prefix}compras (nome)
‚îú‚ûß${prefix}nome (nome)
‚îú‚ûß${prefix}nome2 (nome)
‚îú‚ûß${prefix}cep (n√∫mero)
‚îú‚ûß${prefix}telefone (n√∫mero)
‚îú‚ûß${prefix}telefone2 (n√∫mero)
‚îú‚ûß${prefix}motor (n√∫mero)
‚îú‚ûß${prefix}cnpj (n√∫mero)
‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚™®
`)
break

case 'canalbot':
reply(`_aqui o canal do meu criador_

https://youtube.com/@sandro_mg1?si=DN_gv6NZDBp-x-t7`)
break


case 'logos':
case 'menulogo':
case 'menulogos':  
try {
const imagemUrl = fotobot; 
const menuTexto = menulogos(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'menusemprefixo':  
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = semprefixo(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'efeitosimg':
case 'efeitos':  
case 'efeitoimg':
case 'efeitosmarcar':  
try {
const imagemUrl = fotobot; 
const menuTexto = efeitos(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'comprarpv':
reply(`
üéâ *BEM-VINDO AO VIP DO PV DO BOT!* üéâ

üîí *Privacidade Exclusiva*: Para acessar o PV do bot com total privacidade e conte√∫dos especiais, √© necess√°rio ser adicionado √† lista *VIP*. Al√©m disso, voc√™ ter√° acesso a todos os conte√∫dos exclusivos do *VIP*! üéÅ

üìú *VALORES VIP* üìú
üí∞ 1 Semana: R$15  
üí∞ 2 Semanas: R$20  
üí∞ 3 Semanas: R$25  
üí∞ 1 M√™s: R$30

üëë *Deseja garantir o seu acesso VIP?*  
Use o comando ${prefix}criador e fale diretamente comigo para adquirir!

üîì *Conte√∫dos VIP*: N√£o esque√ßa de conferir os conte√∫dos dispon√≠veis usando ${prefix}menuprem.

üöÄ *Seja VIP agora e aproveite os benef√≠cios exclusivos!*
`)
break

/*case 'menu': case 'menulist':
Lrows = []
Lrows.push({title: ` [üîπ ùêåùêÑùêçùêî ùêèùêëùêàùêçùêÇùêàùêèùêÄùêã üîπ]`, description:  `ùôàùôÄùôâùôê ùôãùôçùôÑùôâùòæùôÑùôãùòºùôá ùòæùôäùôàùòºùôâùòøùôäùôé ùôàùòºùôÑùôé ùôêùôéùòºùòøùôäùôé `, id: `${prefix}menub`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÄùêÉùêå üîπ]`, description: `ùòæùôäùôàùòºùôâùòøùôäùôé ùôãùòºùôçùòº ùòºùòøùôàùôÑùôâùôÑùôéùôèùôçùòºùòøùôäùôç`, id: `${prefix}menuadm`},
{title: `[üîπ ùêÄùêãùêìùêÑùêëùêÄùêÉùêéùêëùêÑùêí üîπ]`, description: `ùòºùôáùôèùôÄùôçùòºùôç ùòºùôêùòøùôÑùôä/ùôëùôÑùòøùôÄùôä/ùôÅùôäùôèùôä`, id: `${prefix}alteradores`},
{title: `[üîπ ùêëùêèùêÜ ùêåùêÑùêçùêî üîπ]`, description: `ùôçùôãùôÇ ùôÖùôäùôÇùôäùôé`, id: `${prefix}menurpg`},
{title: `[üîπ ùêÑùêÖùêÑùêàùêìùêéùêí üîπ]`, description: `ùòæùôäùôàùòºùôâùòøùôäùôé ùòøùôÄ ùôÄùôÅùôÄùôÑùôèùôäùôé`, id: `${prefix}efeitos`},
{title: `[üîπ ùêÉùêÑùêíùêÅùêãùêéùêêùêîùêÑùêÄùêë ùêèùêï ùêÉùêé ùêÅùêéùêì üîπ]`, description: `ùòºùòøùôÑùôåùôêùôÑùôçùôÑùôç ùôëùôÑùôã ùôâùôä ùôãùôë ùòøùôä ùòΩùôäùôè`, id: `${prefix}comprarpv`},
{title: `[üîπ ùêíùêàùêìùêÑ ùêÄùêèùêà üîπ]`, description: `ùôéùôÑùôèùôÄ ùòøùôÄ ùòºùôãùôÑùôé ( ùôéùòºùôâùòøùôçùôä ùòºùôãùôÑ )`, id: `${prefix}siteapi`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÉùêéùêçùêé üîπ]`, description: `ùòæùôäùôàùòºùôâùòøùôäùôé ùôåùôêùôÄ ùôéùôä ùôä ùòøùôäùôâùôä ùôãùôäùòøùôÄ ùôêùôéùòºùôç`, id: `${prefix}menudono`},
{title: `[üîπ ùêèùêîùêóùêÄùêë ùêÉùêÄùêÉùêéùêí üîπ]`, description: `ùôãùôêùôìùòºùôç ùòøùòºùòøùôäùôé ùòæùôäùôàùôãùôáùôÄùôèùôä`, id: `${prefix}puxada`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÅùêëùêàùêçùêÇùêÄùêÉùêÑùêàùêëùêÄùêí üîπ]`, description: `ùòæùôäùôàùòºùôâùòøùôäùôé ùòøùôÄ ùôÖùôäùôÇùôäùôé ùôãùòºùôçùòº ùôÇùôçùôêùôãùôäùôé`, id: `${prefix}brincadeiras`},
{title: `[üîπ ùêåùêÑùêçùêî ùêèùêëùêÑùêåùêàùêîùêå üîπ]`, description: `ùôàùôÄùôâùôê ùôãùôçùôÄùôàùôÑùôêùôà /ùòæùôäùôàùòºùôâùòøùôäùôé ùôëùôÑùôã`, id: `${prefix}menupremium`},
{title: `[üîπ ùêåùêÑùêçùêî ùêãùêéùêÜùêéùêí üîπ]`, description: `ùòæùôäùôàùòºùôâùòøùôäùôé ùôãùòºùôçùòº ùôáùôäùôÇùôäùôé /ùôèùôÄùôìùôèùôä`, id: `${prefix}menulogos`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÉùêéùêñùêçùêãùêéùêÄùêÉùêí üîπ]`, description: `ùòøùôäùôíùôâùôáùôäùòºùòøùôé ùôîùôè/ùôèùôèùôÜ/ùôÑùôâùôéùôèùòºùôÇùôçùòºùôà`, id: `${prefix}down`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÖùêàùêÜùêîùêëùêàùêçùêáùêÄùêí üîπ]`, description: `ùòæùôäùôàùòºùôâùòøùôäùôé ùôãùòºùôçùòº ùôÅùòºùôïùôÄùôç ùôÅùôÑùôÇùôêùôçùôÑùôâùôÉùòºùôé`, id: `${prefix}menufig`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÑùêÖùêÑùêàùêìùêéùêí üîπ]`, description: `ùôàùôÄùôâùôê ùòøùôÄ ùôÄùôÅùôÄùôÑùôèùôäùôé ùôÅùôäùôèùôä/ùôëùôÑùòøùôÄùôä`, id: `${prefix}efeitos`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÄùêçùêàùêåùêÑùêí üîπ]`, description: `ùòºùôâùôÑùôàùôÄùôé ùôëùôÑùòøùôÄùôä/ùôÅùôäùôèùôä`, id: `${prefix}animes`},
{title: `[üîπ ùêåùêÑùêçùêîùêÇùêàùêìùêò üîπ]`, description: `ùòæùôäùôàùòºùôâùòøùôäùôé ùôãùòºùôçùòº ùôçùôãùôÇ`, id: `${prefix}menucity`},
{title: `[üîπ ùêèùêàùêçùêÜ ùêÉùêé ùêÅùêéùêì üîπ]`, description: `ùôëùôÄùôáùôäùòæùôÑùòøùòºùòøùôÄ ùòøùôä ùôãùôÑùôâùôÇ ùòøùôä ùòΩùôäùôè`, id: `${prefix}ping`},
{title: `[üîπ ùêãùêéùêâùêàùêçùêáùêÄ üîπ]`, description: `ùôáùôäùôÖùòº ùôäùôÅùôÑùòæùôÑùòºùôá ùòøùôä ùòΩùôäùôè ùôéùòºùôâùòøùôçùôä ùôàùòø`, id: `${prefix}lojinha`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÄùêÉùêå ùêÄùêìùêàùêïùêÄùêë üîπ]`, description: `ùòæùôäùôàùòºùôâùòøùôäùôé ùòºùôèùôÑùôëùòºùòæùòºùôä ùòºùòøùôà`, id: `${prefix}menuadmb`},
{title: `[üîπ ùêåùêÑùêçùêî ùêÄùêÉùêå ùêÉùêÑùêíùêÄùêìùêàùêïùêÄùêë üîπ]`, description: ` ùòæùôäùôàùòºùôâùòøùôäùôé ùòøùôÄùôéùòºùôèùôÑùôëùòºùòæùòºùôä ùòºùòøùôà`, id: `${prefix}menuadmb0`},
{title: `[üîπ ùêÇùêéùêåùêîùêçùêàùêÉùêÄùêÉùêÑ üîπ]`, description: `ùòæùôäùôàùôêùôâùôÑùòøùòºùòøùôÄ ùòøùôä ùòæùòºùôâùòºùôá ùôéùòºùôâùòøùôçùôä ùòΩùôäùôè`, id: `${prefix}comunidade`},
{title: `[üîπ ùêÇùêéùêåùêèùêëùêÄùêë ùêÅùêéùêì üîπ]`, description: `ùòæùôäùôàùôãùôçùòºùôç ùòºùôçùôåùôêùôÑùôëùôä ùòøùôä ùòΩùôäùôè ùòøùôÄùôéùòæùôçùôÑùôãùôèùôäùôÇùôçùòºùôÅùòºùòøùôä`, id: `${prefix}comprarbot`})
sandro.sendInteractiveIMG('./database/data/media/images/menulist-image.jpg', from, `> ùôäùôáùòº:${pushname}
> ùòøùòºùôèùòº: ${date}
> ùôÉùôäùôçùòº: ${hora}
> ùôëùôÑùôã: ${isChVip}`, `> ùôéùòºùôâùòøùôçùôä ùôàùòø`, {participant: sender, quotedMessage: info.message}, {buttons: [{name: "single_select", buttonParamsJson: JSON.stringify({title: "[ üîπ ùôäùôãùôÄùôâ ùôàùôÄùôâùôê üîπ ]", sections: [{title: `ùôéùòºùôâùòøùôçùôä ùôàùòø`, highlight_label: "", rows: Lrows}]})}]});
break*/

case 'siteapi':
reply(`https://sandroapi.shop/security`)
break

case 'tutorial':
reply(`*AQUI ESTA O TUTORIAL* 

https://telegra.ph/file/5764ef488d50683bc9d5c.mp4`)
break


case 'comprarbot':
reply(`
 *COMPRE O BOT DESCRIPTOGRAFADO + KEY PERMANENTE* 

üõ°Ô∏è *Vantagens Exclusivas*:  
‚úîÔ∏è Acesso ao c√≥digo completo  
‚úîÔ∏è Key de uso vital√≠cio  
‚úîÔ∏è Suporte direto comigo

üéØ *Quer garantir o seu?*  
Clique no link abaixo e fale diretamente comigo no WhatsApp!  
üëâ [*Compre Agora!*](https://wa.me/553195595444?text=Ola%20Sandro%2C%20quero%20comprar%20Seu%20Bot%F0%9F%98%83)

 _N√£o perca essa oportunidade de ter seu pr√≥prio bot completo!_
`)
break

case 'menufig':
case 'menufigu':
case 'menufigurinhas':
try {
const imagemUrl = fotobot; 
const menuTexto = figurinhas(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'downloads':
case 'down':
case 'download':
case 'menudownloads':
case 'menudownload':
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = downloads(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;
/*
case 'tutorial': case 'infobot':
sandro.sendMessage(from, {text: getInfo.tutorialBasic(prefix), contextInfo: {externalAdReply: {title: `Bot: ${NomeDoBot}`, body: `Ol√° ${pushname}, aqui est√° o tutorial de como usar o bot.`, thumbnail: await getBuffer(thumbnail), mediaType: 1, sourceUrl: `https://yurimodz-apis.xyz`}}, mentions: [sender]}, {quoted: info}) 
break 
*/
case 'criador': 
case 'suporte-dono': 
    await sleep(1500);
    
    let vcard = 
        `BEGIN:VCARD\n`
        + `VERSION:3.0\n`
        + `N:;${NomeDoBot};;;\n`
        + `FN:${NomeDoBot}\n`
        + `item1.TEL;waid=553195595444:553195595444\n`
        + `item1.X-ABLabel:üì± Celular\n`
        + `END:VCARD`;
    
    await sandro.sendMessage(from, { 
        contacts: { 
            displayName: 'üëë ${NomeDoBot}', 
            contacts: [{vcard}]
        }
    });

    await sandro.sendMessage(from, {
        text: `*üõ°Ô∏è Fale diretamente com o criador!*\n\nüìû *Contato*: wa.me/+553195595444\n ele est√° √† disposi√ß√£o!_`
    }, { quoted: info });
    
    break;

case 'alteradores':
sandro.sendMessage(from, {image: {url: fotobot}, caption: linguagem.alteradores(prefix, sender), mentions: [sender]}, {quoted: selo})
break 

case 'brincadeiras':
case 'brincadeira':
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = brincadeiras(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'menupremium':
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = menuprem(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'animes':
case 'menuanimes':
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = animes(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;


case 'menu18':
case 'pornoo':
reagir(from, "üíú")
try {
const imagemUrl = fotobot; 
const menuTexto = nsfw(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'alugar': {
    const moneybot = `*_¬ª‚ü© Tabela de Pre√ßos para Alugar o Bot ‚ü®¬´_*

‚ßΩ *R$ 17,00* - 7 dias
‚ßΩ *R$ 25,00* - 14 dias
‚ßΩ *R$ 45,00* - 30 dias
‚ßΩ *COMPRAR ARQUIVO DO BOT*: *R$ 50,00*

‚ù™‚õÑ _Digite *${prefix}criador* para mais informa√ß√µes_`;

    const download = [
        ` ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô0%`,
        ` ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô10%`,
        ` ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô35%`,
        ` ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äô51%`,
        ` ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äô62%`,
        ` ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äô80%`,
        ` ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äô100%`,
        `ùôªùôæùô∞ùô≥ùô∏ùôΩùô∂ ùô≤ùôæùôºùôøùôªùô¥ùöÉùô¥ùô≥...`
    ];

    let { key } = await sandro.sendMessage(from, {text: `${tempo} ${pushname}`}, {quoted: selo});
    await sleep(2000);

    for (let i = 0; i < download.length; i++) {
        await sandro.sendMessage(from, {text: download[i], edit: key}, {quoted: selo});
    }

    sandro.sendMessage(from, {
        text: moneybot,
        contextInfo: {
            externalAdReply: {
                title: `‚ü© ${NickDono} ‚ü®`,
                body: `‚ü© ${NomeDoBot} ‚ü®`,
                thumbnail: await getBuffer(`https://i.imgur.com/OqeFhHP.jpeg`),
                mediaType: 1,
                showAdAttribution: true,
                sourceUrl: `https://wa.me/553195595444`
            }
        }
    }, {quoted: selo});
}
break;

case 'amador':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { amador } = require("./Sandro18/AmadorVideo/Amador.js")
var Sandro18 = amador[Math.floor(Math.random()*amador.length)]
sandro.sendMessage(sender, {video: {url: Sandro18}, caption: `*üîûV√≠deo Amadorüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'porno':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { PornoVid } = require("./Sandro18/PornoVideo/PornoVid.js")
var Sandro18 = PornoVid[Math.floor(Math.random()*PornoVid.length)]
sandro.sendMessage(sender, {video: {url: Sandro18}, caption: `*üîûPorn√¥ V√≠deoüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'egirlvideo':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { EgirlVid } = require("./Sandro18/EgirlVideo/EgirlVid.js")
var Sandro18 = EgirlVid[Math.floor(Math.random()*EgirlVid.length)]
sandro.sendMessage(sender, {video: {url: Sandro18}, caption: `*üîûEgirl V√≠deoüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'aline':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Aline } = require("./Sandro18/AlineFaria/Aline.js")
var Sandro18 = Aline[Math.floor(Math.random()*Aline.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûAline Fariaüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'alifox':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { AlineFx } = require("./Sandro18/AlineFox/AlineFx.js")
var Sandro18 = AlineFx[Math.floor(Math.random()*AlineFx.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûAline Foxüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
    
case 'alycia':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Alycia } = require("./Sandro18/AlyciaRibeiro/Alycia.js")
var Sandro18 = Alycia[Math.floor(Math.random()*Alycia.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûAlycia Ribeiroüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'amichan':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Amiichan } = require("./Sandro18/Amiichan/Amiichan.js")
var Sandro18 = Amiichan[Math.floor(Math.random()*Amiichan.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûAmiichanüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'aninha':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Aninha } = require("./Sandro18/AninhaLopes/Aninha.js")
var Sandro18 = Aninha[Math.floor(Math.random()*Aninha.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûAninha Lopesüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
  
case 'victoria':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Victoria } = require("./Sandro18/VictoriaMatoso/Victoria.js")
var Sandro18 = Victoria[Math.floor(Math.random()*Victoria.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûVictoria Matosoüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'belle':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Belle } = require("./Sandro18/BelleDelphine/Belle.js")
var Sandro18 = Belle[Math.floor(Math.random()*Belle.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûBelle Delphineüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'brenda':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Brenda } = require("./Sandro18/BrendaTrindade/Brenda.js")
var Sandro18 = Brenda[Math.floor(Math.random()*Brenda.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûBrenda Trindadeüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
  
case 'cami':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Cami } = require("./Sandro18/CamiBrito/Cami.js")
var Sandro18 = Cami[Math.floor(Math.random()*Cami.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûCami Britoüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
   
case 'clowniac':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Clowniac } = require("./Sandro18/Clowniac/Clowniac.js")
var Sandro18 = Clowniac[Math.floor(Math.random()*Clowniac.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûClowniacüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'feh':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Feh } = require("./Sandro18/FehGalvao/Feh.js")
var Sandro18 = Feh[Math.floor(Math.random()*Feh.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûFeh Galv√£oüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
  
case 'giovanna':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Giovanna } = require("./Sandro18/GiovannaCampomar/Giovanna.js")
var Sandro18 = Giovanna[Math.floor(Math.random()*Giovanna.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûGiovanna Campomarüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
        
case 'isadora':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Isadora } = require("./Sandro18/IsadoraMartinez/Isadora.js")
var Sandro18 = Isadora[Math.floor(Math.random()*Isadora.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûIsadora Martinezüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'isa':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Isa } = require("./Sandro18/IsaWaifu/Isa.js")
var Sandro18 = Isa[Math.floor(Math.random()*Isa.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûIsa Waifuüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'lay':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Lay } = require("./Sandro18/LayMuniz/Lay.js")
var Sandro18 = Lay[Math.floor(Math.random()*Lay.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûLay Munizüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'leticia':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Leticia } = require("./Sandro18/LeticiaShirayuki/Leticia.js")
var Sandro18 = Leticia[Math.floor(Math.random()*Leticia.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûLet√≠cia Shirayukiüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'marina':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Marina } = require("./Sandro18/MarinaMui/Marina.js")
var Sandro18 = Marina[Math.floor(Math.random()*Marina.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûMarina Muiüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
     
case 'maru':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Maru } = require("./Sandro18/MaruKarv/Maru.js")
var Sandro18 = Maru[Math.floor(Math.random()*Maru.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûMaru Karvüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
    
case 'princesa':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Princesa } = require("./Sandro18/McPrincesa/Princesa.js")
var Sandro18 = Princesa[Math.floor(Math.random()*Princesa.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûMc Princesaüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break   
     
case 'meladinha':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Me1adinha } = require("./Sandro18/Meladinha/Meladinha.js")
var Sandro18 = Me1adinha[Math.floor(Math.random()*Me1adinha.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûMe1adinhaüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'nath':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Nath } = require("./Sandro18/NathBister/Nath.js")
var Sandro18 = Nath[Math.floor(Math.random()*Nath.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûNathüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'nega':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Nega } = require("./Sandro18/NegaBarbie/Nega.js")
var Sandro18 = Nega[Math.floor(Math.random()*Nega.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûNega Barbieüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
       
case 'polonesa':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Polonesa } = require("./Sandro18/PolonesaDoHype/Polonesa.js")
var Sandro18 = Polonesa[Math.floor(Math.random()*Polonesa.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûPolonesa Do Hypeüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
        
case 'rute':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Rute } = require("./Sandro18/RuteRocha/Rute.js")
var Sandro18 = Rute[Math.floor(Math.random()*Rute.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûRute Rochaüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
        
case 'celestine':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Celestine } = require("./Sandro18/VitaCelestine/Celestine.js")
var Sandro18 = Celestine[Math.floor(Math.random()*Celestine.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûVita Celestineüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
     
case 'carnie':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { Carniello } = require("./Sandro18/Carniello/Carniello.js")
var Sandro18 = Carniello[Math.floor(Math.random()*Carniello.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûCarnielloüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break
        
case 'gotica':
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}+18 1`)
if(!isPremium) return reply(enviar.msg.premium)
reagir(from, "üòà")
reply(`${isGroup ? "*ENVIANDO NO Privado...üòà*" : "Enviando"} `)
const { GoticaFT } = require("./Sandro18/GoticaFoto/Gotica.js")
var Sandro18 = GoticaFT[Math.floor(Math.random()*GoticaFT.length)]
sandro.sendMessage(sender, {image: {url: Sandro18}, caption: `*üîûG√≥tica Fotoüîû*\n*Bot: ${NomeDoBot} Dono ${NickDono}*`}, {quoted: info})
break

case 'ranklixo':
if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeiras 1`)
if (!isGroup) return reply('*Isso parece um grupo animal?*')
try{
d = [] 
teks = 'üèîRank dos mais lixos do gp\n'
for(i = 0; i < 7; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
teks += `üöÆ ‚™º @${groupMembers[r].id.split('@')[0]}\n`
d.push(groupMembers[r].id)
}mentions(teks, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente')
}
break

          case "arma": {
            bancoDeDados = {
              "M1887": {
                "nome": "M1887",
                "descri√ß√£o": "Uma espingarda de cano duplo que inflige danos massivos em curta dist√¢ncia.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 2
              },
              "AK47": {
                "nome": "AK47",
                "descri√ß√£o": "Rifle de assalto de alta pot√™ncia com alta taxa de disparo e precis√£o moderada.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "AWM": {
                "nome": "AWM",
                "descri√ß√£o": "Rifle de precis√£o capaz de derrubar inimigos com um √∫nico tiro.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 5
              },
              "Groza": {
                "nome": "Groza",
                "descri√ß√£o": "Rifle de assalto altamente poderoso com uma taxa de disparo e precis√£o excepcionais.",
                "dano": "Alto",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 30
              },
              "UMP45": {
                "nome": "UMP45",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro, equilibrada em termos de dano e controle de recuo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 25
              },
              "M1014": {
                "nome": "M1014",
                "descri√ß√£o": "Uma espingarda de combate pr√≥xima com uma taxa de disparo e dano impressionantes.",
                "dano": "Muito alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 6
              },
              "M60": {
                "nome": "M60",
                "descri√ß√£o": "Metralhadora com alto poder de fogo, ideal para suprimir inimigos e combates a m√©dia dist√¢ncia.",
                "dano": "Alto",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 60
              },
              "XM8": {
                "nome": "XM8",
                "descri√ß√£o": "Rifle de assalto de alta efici√™ncia, com √≥timo equil√≠brio entre dano, alcance e taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "SCAR": {
                "nome": "SCAR",
                "descri√ß√£o": "Rifle de assalto confi√°vel, com boa precis√£o e controle de recuo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 30
              },
              "M4A1": {
                "nome": "M4A1",
                "descri√ß√£o": "Rifle de assalto vers√°til e equilibrado, adequado para v√°rias situa√ß√µes de combate.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 30
              },
              "SVD": {
                "nome": "SVD",
                "descri√ß√£o": "Rifle de precis√£o semi-autom√°tico, com √≥timo alcance e dano significativo.",
                "dano": "Alto",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 10
              },
              "MP5": {
                "nome": "MP5",
                "descri√ß√£o": "Submetralhadora compacta e precisa, adequada para combates em espa√ßos confinados.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "SPAS12": {
                "nome": "SPAS12",
                "descri√ß√£o": "Uma espingarda de a√ß√£o por bombeamento, eficaz a curta dist√¢ncia com alto dano.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 6
              },
              "KAR98K": {
                "nome": "KAR98K",
                "descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho, com excelente precis√£o e dano letal.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 5
              },
              "M249": {
                "nome": "M249",
                "descri√ß√£o": "Metralhadora leve com grande capacidade de muni√ß√£o, ideal para controle de √°rea.",
                "dano": "Alto",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 100
              },
              "Thompson": {
                "nome": "Thompson",
                "descri√ß√£o": "Submetralhadora cl√°ssica de alta cad√™ncia de tiro e bom controle de recuo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "VSS": {
                "nome": "VSS",
                "descri√ß√£o": "Rifle de assalto silencioso com escopo integrado e baixo recuo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 15
              },
              "MP40": {
                "nome": "MP40",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e bom controle de recuo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 30
              },
              "AUG": {
                "nome": "AUG",
                "descri√ß√£o": "Rifle de assalto com excelente precis√£o, alcance e taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "G18": {
                "nome": "G18",
                "descri√ß√£o": "Pistola autom√°tica com alta taxa de disparo, ideal para combate pr√≥ximo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 20
              },
              "P90": {
                "nome": "P90",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e capacidade de muni√ß√£o elevada.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 50
              },
              "Desert Eagle": {
                "nome": "Desert Eagle",
                "descri√ß√£o": "Pistola de alta pot√™ncia e precis√£o, com uma grande parada de energia.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 7
              },
              "Vector": {
                "nome": "Vector",
                "descri√ß√£o": "Submetralhadora compacta com alta cad√™ncia de tiro e boa precis√£o.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 30
              },
              "M14": {
                "nome": "M14",
                "descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
                "dano": "Alto",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 10
              },
              "CG15": {
                "nome": "CG15",
                "descri√ß√£o": "Rifle de sinaliza√ß√£o que causa dano explosivo aos inimigos.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "USP": {
                "nome": "USP",
                "descri√ß√£o": "Pistola de m√©dio alcance com boa precis√£o e taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 12
              },
              "M1873": {
                "nome": "M1873",
                "descri√ß√£o": "Rev√≥lver de a√ß√£o simples com alto dano, mas taxa de disparo baixa.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 2
              },
              "AN94": {
                "nome": "AN94",
                "descri√ß√£o": "Rifle de assalto com um modo de disparo especial que aumenta a taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "M79": {
                "nome": "M79",
                "descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "M14": {
                "nome": "M14",
                "descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
                "dano": "Alto",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 10
              },
              "CG15": {
                "nome": "CG15",
                "descri√ß√£o": "Rifle de sinaliza√ß√£o que causa dano explosivo aos inimigos.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "USP": {
                "nome": "USP",
                "descri√ß√£o": "Pistola de m√©dio alcance com boa precis√£o e taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 12
              },
              "M1873": {
                "nome": "M1873",
                "descri√ß√£o": "Rev√≥lver de a√ß√£o simples com alto dano, mas taxa de disparo baixa.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 2
              },
              "AN94": {
                "nome": "AN94",
                "descri√ß√£o": "Rifle de assalto com um modo de disparo especial que aumenta a taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "M79": {
                "nome": "M79",
                "descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "M82B": {
                "nome": "M82B",
                "descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho com alto dano e capacidade de penetra√ß√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 5
              },
              "P90": {
                "nome": "P90",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e capacidade de muni√ß√£o elevada.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 50
              },
              "Desert Eagle": {
                "nome": "Desert Eagle",
                "descri√ß√£o": "Pistola de alta pot√™ncia e precis√£o, com uma grande parada de energia.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 7
              },
              "M1887": {
                "nome": "M1887",
                "descri√ß√£o": "Espingarda de a√ß√£o por ferrolho com alto dano em combates de curta dist√¢ncia.",
                "dano": "Extremo",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 2
              },
              "XM8": {
                "nome": "XM8",
                "descri√ß√£o": "Rifle de assalto com boa precis√£o e cad√™ncia de tiro.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 30
              },
              "KAR98K": {
                "nome": "KAR98K",
                "descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho com alto dano e precis√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 5
              },
              "M79": {
                "nome": "M79",
                "descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "MP40": {
                "nome": "MP40",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e bom controle de recuo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 30
              },
              "M14": {
                "nome": "M14",
                "descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
                "dano": "Alto",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 10
              }
            }


            const armaPesquisada = args.join(" "); // Substitua pelo valor desejado
            let resultado = null;

            for (const arma in bancoDeDados) {
              if (arma.toLowerCase() === armaPesquisada.toLowerCase()) {
                resultado = bancoDeDados[arma];
                break;
              }
            }

            if (resultado) {
              reply(`*${resultado.nome}*\n*${resultado.descri√ß√£o}*\n\n*Dano: ${resultado.dano}*\n\n*Alcance: ${resultado.alcance}*\n\n*Taxa de Disparo: ${resultado.taxa_de_disparo}*\n\n*Capacidade do Pente: ${resultado.capacidade_do_pente}*`);
            } else {
              reply('Erro: Arma n√£o encontrada no banco de dados.');
            }
          } break
          
case 'rankzueiros': case 'rankzueiro':
if (!isGroup) return reply(`So em grupo`);
if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  

  reagir(from, "ü§™");

  membrosZueiros = [];
  
  const zueiro1 = groupMembers;
  const zueiro2 = groupMembers;
  const zueiro3 = groupMembers;
  const zueiro4 = groupMembers;
  const zueiro5 = groupMembers;

  const zueiroMem1 = zueiro1[Math.floor(Math.random() * zueiro1.length)];
  const zueiroMem2 = zueiro2[Math.floor(Math.random() * zueiro2.length)];
  const zueiroMem3 = zueiro3[Math.floor(Math.random() * zueiro3.length)];
  const zueiroMem4 = zueiro4[Math.floor(Math.random() * zueiro4.length)];
  const zueiroMem5 = zueiro5[Math.floor(Math.random() * zueiro5.length)];

  const TMPZUEIRO = [
    "O rei da zoeira! üëë",
    "Mestre na arte do deboche. üòé",
    "Provocador nato. ü§£",
    "Conquistador de risadas. üéâ",
    "Doutor em piadas sem gra√ßa. üéì",
    "Especialista em memes. üöÄ",
    "Destruidor de momentos s√©rios. üí£",
    "Arquiteto da palha√ßada. üè∞",
    "O zueiro mais querido do grupo. ‚ù§Ô∏è",
    "Sorriso contagiante, zueira constante. üòÑ",
    "O palha√ßo oficial. ü§°",
    "Mestre do sarcasmo. üòè",
    "Sabe tudo de trollagem. üòú",
    "Alegria em forma de zueira. üéà",
    "Faz piada at√© com sombra. üåö",
    "Riso garantido com esse zueiro. üòÇ",
    "O mestre das pegadinhas. ü§™",
    "Transforma qualquer situa√ß√£o em com√©dia. üé≠",
    "Pai da zoeira, filho do riso. ü§£",
    "Zueiro 24 horas por dia. ‚è∞",
  ];

  rankZueiroImg = "https://telegra.ph/file/8de9823d4d2af40b530df.jpg";
  rankZueiro = `*_Os Zueiros do Grupo est√£o prontos para zoar:_*
*‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*
*‚îÇ* ü§™ @${zueiroMem1.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚îÇ* ü§™ @${zueiroMem2.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚îÇ* ü§™ @${zueiroMem3.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚îÇ* ü§™ @${zueiroMem4.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚îÇ* ü§™ @${zueiroMem5.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*`;

  membrosZueiros.push(zueiroMem1.id);
  membrosZueiros.push(zueiroMem2.id);
  membrosZueiros.push(zueiroMem3.id);
  membrosZueiros.push(zueiroMem4.id);
  membrosZueiros.push(zueiroMem5.id);

  mencionarIMG(rankZueiro, rankZueiroImg);
  break;

case "transcrever": {
if((isMedia && !info.message.imageMessage && info.message.videoMessage || isQuotedVideo || isQuotedAudio)) {
reply("Aguarde.. transcrevendo seu √°udio..")
muk = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.videoMessage : isQuotedAudio ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.audioMessage : info.message.audioMessage

let base64String = await getFileBuffer(muk, isQuotedAudio ? 'audio': 'video');
let buffer = Buffer.from(base64String, 'base64');

let formData = new FormData();
formData.append('file', buffer, {filename: isQuotedAudio ? 'audiofile': 'videofile', contentType: muk.mimetype });

fetch(`https://api.bronxyshost.com.br/transcrever?apikey=${API_SANDRO_MD}`, {
method: 'POST',
body: formData
}).then(response => response.json())
.then(data => {
reply(data.texto);
}).catch((Err) => {
console.log(Err);
reply("Sinto muito, alguns formatos de √°udio/v√≠deo, eu n√£o consigo transcrever, em caso de d√∫vidas, tente novamente...");
});
} else {
return reply("Marque um audio ou um v√≠deo.")
}
}
break;

case 'dono':
  try {
    const imagemUrl = fotobot; 
    const dptr = `
DONO E CRIADOR: SANDROüòçüòÅ
> ${NomeDoBot}`;

    // Envia o desafio com a imagem para o usu√°rio
    sandro.sendMessage(from, { image: { url: imagemUrl }, caption: dptr }, { quoted: selo });
  } catch (e) {
    console.log("Erro no comando 'desafio':", e);
  }
  break;

//Textos
case 'recado'://BY:GILLIARDI CONTE√öDOS 
case 'recadowhatsapp':

                    rate = body.slice(6)
					var foda =['Felicidade √© s√≥ quest√£o de ser.','Acredite: sempre tem algo bom guardado para voc√™','Concentre-se no que est√° buscando, n√£o no que est√° deixando para tr√°s.','A vida √© muito curta pra n√£o viver sorrindo por a√≠!','Onde h√° vontade, h√° chance de dar certo!','Dance no seu ritmo! üíÉ','S√≥ voc√™ sabe o que te deixar√° feliz.','N√£o se estresse com o que est√° fora do seu controle.','Aprenda a apreciar as voltas que o mundo d√°.','Comece a se amar. O resto vir√° depois.','Maior que a tristeza de n√£o haver vencido √© a vergonha de n√£o ter lutado!','Reciprocidade, para as coisa boas. Imunidade, para as coisas ruins.','Coragem, a vida gosta de pessoas destemidas.', 'Compartilhe seus sentimentos. Nem todas as pessoas sabem adivinhar','Continue caminhando, n√£o tem problema se for devagar.','Melhor amar do que ser amargo!','N√£o corrigir nossas falhas √© o mesmo que cometer novos erros','Quando o caminho se torna duro, s√≥ os duros continuam caminhando','Florescer exige passar por todas as esta√ß√µes!','Quando as coisas simples parecem especiais, voc√™ percebe como a vida pode ser boa.','Os aprendizados deixam a vida especial.','Feliz daquele que encontra o verdadeiro amor sem as cicatrizes da decep√ß√£o']
					var gilli = foda[Math.floor(Math.random() * foda.length)]
					reply(` ${gilli} `)
					break

case 'frasecriativas':
                    rate = body.slice(6)
					var foda =['N√£o conte os dias, viva-os! ‚òÄÔ∏èüòé','Tudo que vem, vem com algum prop√≥sito. Assim como tudo que vai, vai por uma raz√£o. üå∏üåÄ','Eu n√£o gosto de cobrar atitude de ningu√©m porque eu tenho de sobra. üòâ','Gostar, eu gosto de muita gente, mas a minha prioridade sempre ser√° eu mesma. ‚ú®','As pessoas que criticam, s√£o as mesmas que copiam. üëÄ','Aprendi que meu √∫nico limite √© a minha mente. üåé','Fazendo dos meus sonhos, um objetivo. üí≠']
					var gilli = foda[Math.floor(Math.random() * foda.length)]
					reply(` ${gilli} `)
					break

case 'frasebonita':
                    rate = body.slice(6)
					var foda =['Viver em paz √© um luxo. √â saber que, apesar dos pesares, ficar bem √© prioridade. ‚ú®','Somos ferramentas para a vida seguir em frente. üåé','Ao inv√©s de pensar nas marcas que a vida deixa em voc√™, reflita: Quais as marcas voc√™ est√° deixando na vida? üí≠','Segue seu cora√ß√£o, tudo vai dar certo. ‚ô•Ô∏è','Permita-se sentir tudo que est√° dentro de voc√™! ‚ú®','Cada etapa da vida, lhe demandar√° uma vers√£o mais forte de voc√™. üçÉ','A vida √© como uma rosa, cada p√©tala um sonho, cada espinho uma realidadeüå∑üôâ','A arma dos fracos √© criticar os fortes. A arma dos fortes √© ignorar os fracos!üëå','Pare de olhar para tr√°s. Voc√™ j√° sabe onde esteve, agora precisa saber pra onde vaiüåôüçÉ','S√≥ faz sentido o que te faz sentir.']
					var gilli = foda[Math.floor(Math.random() * foda.length)]
					reply(` ${gilli} `)
					break
					
case 'frasedeamor':
case 'frasesdeamor':
rate = body.slice(6)
var amor =['Me perguntaram qual era o meu lugar favorito e eu respondi: Voc√™!','Amar algu√©m profundamente te d√° for√ßas. Ser amado profundamente por algu√©m te d√° coragem.','Eu orei por voc√™ sem te conhecer. E agora tenho voc√™ aqui, muito mais do que eu pedi.','Acordar com voc√™ no meu pensamento √© a forma mais doce de come√ßar meu dia.','N√£o quero a ilus√£o de um amor perfeito, quero a felicidade de um amor verdadeiro.','O verdadeiro amor nunca se desgasta. Quanto mais se d√°, mais se tem.','Meu bem, eu que nunca me lembro de nada n√£o me esque√ßo de voc√™.','N√£o procure algu√©m que te complete. Complete a si mesmo e procure algu√©m que te transborde.']
var gilliardi = amor[Math.floor(Math.random() * amor.length)]
reply(` ${gilliardi} `)
break					

case 'motivacional':
rate = body.slice(6)
var motivacional = [
    'O √∫nico lugar onde o sucesso vem antes do trabalho √© no dicion√°rio.', 
    'Acredite em voc√™ e tudo ser√° poss√≠vel.', 
    'O que voc√™ faz hoje pode melhorar todos os seus amanh√£s.', 
    'Cada passo, por menor que seja, te aproxima do seu objetivo.', 
    'Desistir n√£o √© uma op√ß√£o. Tudo o que voc√™ precisa est√° dentro de voc√™.', 
    'A vida te coloca desafios, mas √© voc√™ quem decide se vai venc√™-los.', 
    'O caminho pode ser dif√≠cil, mas a vista no topo vai valer a pena.', 
    'O fracasso √© s√≥ uma oportunidade para come√ßar de novo com mais sabedoria.', 
    'Se voc√™ pode sonhar, voc√™ pode realizar.', 
    'N√£o espere o momento perfeito. Fa√ßa de agora o momento certo.', 
    'Grandes conquistas come√ßam com pequenas atitudes.', 
    'Cada dificuldade √© uma oportunidade disfar√ßada de desafio.', 
    'Acredite no processo. Grandes coisas levam tempo para acontecer.', 
    'N√£o importa o qu√£o devagar voc√™ v√°, desde que voc√™ n√£o pare.', 
    'A √∫nica pessoa que pode te impedir de alcan√ßar seus sonhos √© voc√™ mesmo.', 
    'Seja a sua pr√≥pria motiva√ß√£o. N√£o dependa de ningu√©m para acreditar no seu potencial.', 
    'Coragem √© saber que pode falhar e ainda assim seguir em frente.', 
    'Voc√™ n√£o est√° onde quer estar ainda, mas cada dia √© um passo mais perto.', 
    'Confie no seu esfor√ßo. O resultado vir√° no tempo certo.', 
    'O importante n√£o √© vencer, mas nunca desistir de tentar.', 
    'Lembre-se: a √∫nica batalha perdida √© aquela que voc√™ desiste de lutar.', 
    'A jornada pode ser longa, mas as recompensas s√£o sempre maiores do que os obst√°culos.', 
    'Nunca √© tarde para recome√ßar e construir a vida que voc√™ sempre sonhou.', 
    'O que define seu sucesso √© a determina√ß√£o em continuar, n√£o as quedas que voc√™ enfrenta.'
]
var gilliardi = motivacional[Math.floor(Math.random() * motivacional.length)]
reply(` ${gilliardi} `)
break

case 'safadeza':
rate = body.slice(6)
var safadeza = [
    'Gata, se beleza fosse tempo, voc√™ seria eternidade.', 
    'J√° pensou se a gente faz besteira junto e ainda chama de destino?', 
    'Deixa eu ser o motivo desse sorriso malicioso a√≠?', 
    'Teu corpo tem mais curva que estrada de serra, e eu t√¥ doido pra me perder nele.', 
    'N√£o sou GPS, mas aposto que posso te levar a lugares incr√≠veis.', 
    'Voc√™ deve ser cansativa, porque s√≥ de olhar j√° me deixou sem f√¥lego.', 
    'Eu n√£o sou praia, mas sei bem como fazer suas ondas subirem.', 
    'Se voc√™ acha que chocolate √© bom, √© porque ainda n√£o me provou.', 
    'Minha cama √© pequena, mas o suficiente pra n√≥s dois.', 
    'Tem algo em voc√™ que me d√° vontade de quebrar todas as regras.', 
    'Seu olhar t√° me chamando mais do que qualquer palavra.', 
    'Se fosse um pecado te querer, j√° teria reservado um lugar no inferno.', 
    'Com voc√™, at√© ficar perdido parece um √≥timo plano.', 
    'Posso n√£o ser o amor da sua vida, mas aposto que sou o melhor erro que voc√™ vai cometer.', 
    'Se sua inten√ß√£o era me provocar, parab√©ns, miss√£o cumprida.', 
    'Voc√™ tem um jeito que bagun√ßa minha cabe√ßa... e o resto do corpo tamb√©m.', 
    'Posso te confessar uma coisa? J√° pensei em voc√™ de jeitos que n√£o d√° pra falar em p√∫blico.', 
    'Quero ser aquela risada boba no meio da sua noite.', 
    'Entre n√≥s dois, s√≥ falta uma coisa: voc√™ aceitar o convite.'
]
var gilliardi = safadeza[Math.floor(Math.random() * safadeza.length)]
reply(` ${gilliardi} `)
break

case 'raiva':
rate = body.slice(6)
var raiva = [
    'Eu poderia perder a paci√™ncia com voc√™, mas seria perda de tempo.', 
    'Engra√ßado como voc√™ √© bom em tirar as pessoas do s√©rio, √© um dom?', 
    'O problema n√£o √© nem voc√™, √© o tanto de tempo que eu perdi te ouvindo.', 
    'Falar com voc√™ √© como jogar xadrez com um pombo: n√£o importa o que eu fa√ßa, voc√™ vai derrubar as pe√ßas e sair se achando.', 
    'Se burrice fosse crime, voc√™ estaria no corredor da morte.', 
    'T√¥ come√ßando a achar que voc√™ √© um teste de paci√™ncia... e eu t√¥ reprovando.', 
    'Voc√™ fala como se soubesse de alguma coisa, mas o vazio do que voc√™ diz √© ensurdecedor.', 
    'A vantagem de discutir com voc√™ √© que pelo menos eu ganho experi√™ncia em lidar com idiotice.', 
    'Nem o sil√™ncio te salva, porque at√© calado voc√™ me irrita.', 
    'Voc√™ √© aquele tipo de pessoa que cansa a mente e a paci√™ncia.', 
    'Voc√™ j√° tentou fazer um favor pro mundo e ficar quieto?', 
    'Conversar com voc√™ me faz perder a f√© na humanidade... e no futuro.', 
    'Eu poderia te explicar o erro, mas sei que voc√™ n√£o entenderia.', 
    'Voc√™ devia ser uma pegadinha do universo pra testar minha paci√™ncia, s√≥ pode.', 
    'Se a ignor√¢ncia fosse uma ci√™ncia, voc√™ seria o maior especialista.', 
    'A sorte √© que respira√ß√£o √© autom√°tica, porque com o tanto de burrice, voc√™ esqueceria como fazer.', 
    'N√£o adianta nem desenhar pra voc√™ entender, voc√™ ignora at√© as figuras.', 
    'Se incompet√™ncia fosse uma carreira, voc√™ j√° seria CEO.', 
    'Voc√™ me lembra um quebra-cabe√ßa... s√≥ que com v√°rias pe√ßas faltando.'
]
var gilliardi = raiva[Math.floor(Math.random() * raiva.length)]
reply(` ${gilliardi} `)
break

case 'deboche':
rate = body.slice(6)
var deboche =[
    'Essa frente fria est√° demorando pra chegar e esfriar teu ego, n√©?', 
    'Interessante como eu lembro de coisas que nem deveriam ter acontecido...', 
    'O bom do passado √© que ele ficou l√°. Pena que nem tudo que ficou era t√£o bom assim.', 
    'Aplausos para voc√™! N√£o pelo talento, mas pela coragem de achar que engana algu√©m. üëèüëèüëè', 
    'Meu cupido √© o estagi√°rio do amor... sempre faz besteira e voc√™ foi o maior erro.', 
    'Julgando realidade que nem a Netflix conseguiria inventar? Curioso.', 
    '√Äs vezes, a gente acha que encontrou algu√©m especial. Depois descobre que o especial era s√≥ um erro de avalia√ß√£o.', 
    'Eu ainda me explicando? Desculpa, s√≥ explico quando sou paga ou quando tenho paci√™ncia ‚Äì o que n√£o √© o caso.', 
    'Se for para dar moral, eu dou para algu√©m que sabe o que fazer com ela.', 
    'Se voc√™ √© aquilo que come, j√° entendi o motivo da sua amargura.', 
    'A cara de pau de algumas pessoas deveria ser esculpida em m√°rmore.', 
    'Voc√™ fala como se fizesse diferen√ßa, mas o mundo continua o mesmo com ou sem suas opini√µes.', 
    'J√° me perguntaram se voc√™ √© s√©rio, e eu sempre digo: s√©rio, s√≥ se for no deboche.', 
    'Tem gente que se acha um pr√™mio, mas se eu ganhasse voc√™ na loteria, eu devolveria.', 
    'Sua sorte √© que burrice n√£o d√≥i, sen√£o voc√™ viveria no pronto-socorro.']
var gilliardi = deboche[Math.floor(Math.random() * deboche.length)]
reply(` ${gilliardi} `)
break

case 'cantadas':
case 'cantada':
rate = body.slice(6)
var cantada =['Existe um vazio no meu cora√ß√£o que tem as suas medidas. Quer entrar?','N√£o existe amor √† primeira vista. O que existe √© a pessoa certa, no momento certo. Voc√™ por acaso estava l√°!','O seu sorriso √© o v√≠rus que infectou o meu cora√ß√£o. ','Se o mar fosse um sentimento... seria t√£o grande quanto o amor que sinto por voc√™. ',' Voc√™ sabe qual √© o motivo do meu sorriso todos os dias? A primeira palavra dessa frase.','O Minist√©rio da Sa√∫de adverte: te ver longe de mim me faz sentir saudades. ','Quem te conhece deve ter que tomar calmante pro resto da vida, n√£o estou certo? Voc√™ deixa qualquer um doido por voc√™! ',' Amar voc√™ √© loucura? Ent√£o n√£o tem psiquiatra que me cure.']
var gilliardi = cantada[Math.floor(Math.random() * cantada.length)]
reply(` ${gilliardi} `)
break				

case 'ansiedade':
case 'ansiedades':
rate = body.slice(6)
var ansiedade =['Quanto mais medo eu sinto, mais tr√™mulo fico de ansiedade. Eu me fortale√ßo nas dificuldades.','A ansiedade me acompanha mundo afora, mas sei que para ser feliz preciso dela como precau√ß√£o, como freio para meus sonhos infinitos....','J√° n√£o me importa o tempo perdido, eu sinto uma ansiedade imensa de mergulhar no que ainda n√£o vivi. ','Ansiedade √© o desejo para que o futuro se transforme logo no seu maior presente. ','De repente nos vemos sofrendo antecipadamente por causa de algo que talvez jamais aconte√ßa, √© a agulha da ansiedade a nos espetar... ','A ansiedade √© o acelerador que ganhamos de brinde por n√£o sabermos esperar nosso pr√≥prio tempo. ','N√£o me sinto bem em parte nenhuma e ando cheio de ansiedade de coisas que n√£o posso nem sei realizar. ','De repente nos vemos nus diante da ansiedade que nos deixa cegos e indefesos, por√©m dentro de n√≥s est√£o as armas para nos livrar de suas garras. ']
var gilliardi = ansiedade[Math.floor(Math.random() * ansiedade.length)]
reply(` ${gilliardi} `)
break				

case 'indiretas':
case 'indireta':
rate = body.slice(6)
var indireta =['Que essa frente fria consiga amenizar esse seu fogo.','Por que eu ainda fico lembrando de tudo aquilo que voc√™ j√° esqueceu?','N√£o olho para o passado, pois tudo de bom que tive nele est√° no meu presente, o que ficou pra tr√°s foi s√≥ o que n√£o servia pra nada. ','Algumas pessoas merecem um grande aplauso pelo teatro que fazem! üëèüëèüëè ',' Meu cupido √© gari, s√≥ me traz lixo e voc√™ √© a prova disso...',' N√£o lhe compete julgar a realidade que voc√™ n√£o vive. üí•',' √Äs vezes, sem querer, a gente esbarra em algu√©m que vale a pena.',' N√£o sei porque ainda me explico. N√£o devo explica√ß√µes. S√≥ para os meus pais, e somente at√© aos 18.']
var gilliardi = indireta[Math.floor(Math.random() * indireta.length)]
reply(` ${gilliardi} `)
break				

case 'piadas':
case 'piada':
rate = body.slice(6)
var piada =['O que √© um pontinho brilhando no jardim? Uma formiga de aparelho!','O que √© um pontinho marrom cantando? Carlinhos Brown.',' Como o Batman faz para abrir a bat-caverna? Ele bat-palma.',' O que √© um pontinho verde em Pernambuco? √â um frevo de 4 folhas.',' Por que as loiras entram no banco rebolando? Para movimentar a poupan√ßa.',' Qual a semelhan√ßa entre uma loira e uma garrafa de cerveja? Do pesco√ßo pra cima elas n√£o tem nada.','Qual √© a diferen√ßa entre a bicicleta e o vaso sanit√°rio? Resp: a bicicleta voc√™ senta pra correr e o vaso sanit√°rio voc√™ corre pra sentar! ','- Jo√£ozinho voc√™ bebe 3 vinhos, depois bebe + 4 vinhos e depois + 7. Quantos vinhos voce bebeu? - Puxa!! Isto j√° √© sacanagem, a esta hora, eu j√° estou b√™bado! ']
var gilliardi = piada[Math.floor(Math.random() * piada.length)]
reply(` ${gilliardi} `)
break
////				

case 'emoji-mix':
case 'emojimix':
var [emj1, emj2] = q.trim().split("+")
if(!q.includes("+")) return reply(`Ol√°, est√° faltando o +\nExemplo: ${prefix+command} üëø+üòá`)
try {
reply(Res_Aguarde)
sendStickerFromUrl(from, `https://api.bronxyshost.com.br/api-bronxys/emojimix?emoj=${encodeURI(emj1)}&emoj2=${encodeURI(emj2)}&apikey=${API_SANDRO_MD}`)
} catch (e) {
if(JSON.stringify(e).includes(API_SANDRO_MD)) {
return console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")
} else {
reply('*Ops n√£o foi possivel fazer esse mix de emoji / Ou ocorreu algum problema no sistema..*')
}
}
break

case 'hentai': { // Sandro bot
    try {
        if (!isNsfw && isGroup) 
            return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`);
        
        reply(`Enviando a imagem no pv...`);

        // Importa o m√≥dulo para manipular arquivos
        const fs = require('fs');

        // L√™ o arquivo JSON
        const jsonData = JSON.parse(fs.readFileSync('arquivos/hentai.json', 'utf8'));

        // Verifica se existem links no JSON
        if (!jsonData.links || jsonData.links.length === 0) {
            return reply("Nenhum link de imagem encontrado no arquivo JSON.");
        }

        // Seleciona um link aleat√≥rio
        const randomIndex = Math.floor(Math.random() * jsonData.links.length);
        const imageUrl = jsonData.links[randomIndex];

        // Faz o download da imagem
        const response = await fetch(imageUrl);
        const imageBuffer = await response.buffer();

        if (!imageBuffer) {
            return reply("Erro ao obter a imagem. Tente novamente mais tarde.");
        }

        // Gera informa√ß√µes aleat√≥rias
        const randomName = `Nome_${Math.floor(Math.random() * 100)}`;
        const randomLikes = Math.floor(Math.random() * 1000);
        const randomEmail = `sandromd${Math.floor(Math.random() * 100)}@exemplo.com`;

        // Monta o texto com as informa√ß√µes
        const infoText = `Nome: ${randomName}\nLikes: ${randomLikes}\nEmail: ${randomEmail}`;

        // Envia a imagem com o texto
        await sandro.sendMessage(sender, { 
            image: imageBuffer, 
            caption: `${infoText}\n\nAqui est√° a sua imagem.` 
        }, { quoted: info });

    } catch (e) {
        console.log(e);
        return reply("Erro ao enviar a imagem.");
    }
}
break;
        
case 'plaq': 
case 'plaq1': 
case 'plaq2': 
case 'plaq3': 
case 'plaq4': 
case 'plaq5': 
case 'plaq6': 
case 'plaq7':
case 'plaq8':  
try {
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`Enviando no PV... caso demore de mais nao consegui te enviar `)
buffer = await getBuffer(`http://br1.bronxyshost.com:4360/api/${command}?texto=${q}&apikey=${SANDRO_MD}`)
sandro.sendMessage(sender, {image: buffer, caption: `Ola aqui esta sua plaquinha üòà`}, {quoted: info})
} catch {
reply(`Erro`)
} 
break

case 'plaq9':
try {
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply('*Estou fazendo... *')
buffer = await getBuffer(`https://rsymenti.sirv.com/images%20(10).jpeg?text.0.text=${q}&text.0.position.gravity=south&text.0.position.x=4%25&text.0.position.y=-32%25&text.0.align=left&text.0.size=34&text.0.color=000000&text.0.opacity=78&text.0.background.opacity=78&text.0.outline.blur=72&text.0.outline.opacity=74`)
sandro.sendMessage(sender, {image: buffer, caption: `Ola aqui esta sua plaquinha üòà`}, {quoted: info})
} catch {
reply(`Erro`)
} 
break

case 'plaq10':
try {
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply('*Estou fazendo... *')
buffer = await getBuffer(`https://carisys.online/api/plaq5?q=Carisys`)
sandro.sendMessage(sender, {image: buffer, caption: `Ola aqui esta sua plaquinha üòà`}, {quoted: info})
} catch {
reply(`Erro`)
} 
break

case 'configurar-bot':
sandro.sendMessage(from, {text: getInfo.configbot(prefix)}, {quoted: selo})
break


case 'destrava':
sandro.sendMessage(from, {text: destrava(prefix)}, {quoted: selo})
break 

case 'perfil':
  try {
    // Definindo os valores de informa√ß√µes aleat√≥rias
    const alturas = ['1,60m', '1,70m', '1,80m', '1,90m', '2,00m'];
    const coresFavoritas = ['Azul', 'Vermelho', 'Verde', 'Preto', 'Branco'];
    const tiposDeMulher = ['Loira', 'Morena', 'Ruiva', 'Negra', 'Oriental'];
    const niveisDeGay = ['0%', '20%', '50%', '70%', '100%'];
    const niveisDeInteligencia = ['Baixo', 'M√©dio', 'Alto', 'G√™nio', 'Superdotado'];
    const niveisDeGostosura = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
    const estadosDeHumor = ['Feliz', 'Triste', 'Animado', 'Estressado', 'Empolgado'];
    const signos = ['√Åries', 'Touro', 'G√™meos', 'C√¢ncer', 'Le√£o', 'Virgem', 'Libra', 'Escorpi√£o', 'Sagit√°rio', 'Capric√≥rnio', 'Aqu√°rio', 'Peixes'];
    const profissoes = ['Desenvolvedor', 'Designer', 'M√©dico', 'Professor', 'Engenheiro', 'Empreendedor', 'Estudante', 'Arquiteto'];
    const paisDeOrigem = ['Brasil', 'Estados Unidos', 'Argentina', 'Fran√ßa', 'Jap√£o', 'Alemanha', 'Reino Unido', 'It√°lia'];
    const hobbies = ['Ler', 'Correr', 'Jogar v√≠deo-game', 'Viajar', 'Fotografar', 'Tocar m√∫sica', 'Cozinhar', 'Fazer exerc√≠cios'];

    // Novas vari√°veis de jogos
    const tiposDeJogos = ['A√ß√£o', 'Aventura', 'RPG', 'Estrat√©gia', 'Simula√ß√£o', 'Esportes', 'Fps'];
    const plataformasDeJogos = ['PC', 'PlayStation', 'Xbox', 'Nintendo Switch', 'Celular'];
    const horasDeJogoPorSemana = ['1-5 horas', '6-10 horas', '11-20 horas', '21-40 horas', 'Mais de 40 horas'];

    // Sele√ß√£o aleat√≥ria de valores
    const altura = alturas[Math.floor(Math.random() * alturas.length)];
    const corFavorita = coresFavoritas[Math.floor(Math.random() * coresFavoritas.length)];
    const tipoDeMulher = tiposDeMulher[Math.floor(Math.random() * tiposDeMulher.length)];
    const nivelDeGay = niveisDeGay[Math.floor(Math.random() * niveisDeGay.length)];
    const nivelDeInteligencia = niveisDeInteligencia[Math.floor(Math.random() * niveisDeInteligencia.length)];
    const nivelDeGostosura = niveisDeGostosura[Math.floor(Math.random() * niveisDeGostosura.length)];
    const estadoDeHumor = estadosDeHumor[Math.floor(Math.random() * estadosDeHumor.length)];
    const signo = signos[Math.floor(Math.random() * signos.length)];
    const profissao = profissoes[Math.floor(Math.random() * profissoes.length)];
    const pais = paisDeOrigem[Math.floor(Math.random() * paisDeOrigem.length)];
    const hobby = hobbies[Math.floor(Math.random() * hobbies.length)];

    // Novos dados de jogos
    const tipoDeJogo = tiposDeJogos[Math.floor(Math.random() * tiposDeJogos.length)];
    const plataformaDeJogo = plataformasDeJogos[Math.floor(Math.random() * plataformasDeJogos.length)];
    const horasDeJogo = horasDeJogoPorSemana[Math.floor(Math.random() * horasDeJogoPorSemana.length)];

    // Mensagem motivacional
    const mensagensMotivacionais = [
      "Nunca desista dos seus sonhos!",
      "Voc√™ √© mais forte do que pensa!",
      "O sucesso come√ßa com a decis√£o de tentar.",
      "Cada dia √© uma nova oportunidade!",
      "Acredite em voc√™ e tudo ser√° poss√≠vel!"
    ];
    const mensagemMotivacional = mensagensMotivacionais[Math.floor(Math.random() * mensagensMotivacionais.length)];

    // Montagem do texto do perfil
    const dptr = `üé≠*SEU PERFIL*üé≠

üë§ *Altura:* ${altura}
üé® *Cor favorita:* ${corFavorita}
üíÉ *Tipo de mulher preferida:* ${tipoDeMulher}
üåà *N√≠vel de gay:* ${nivelDeGay}
üß† *N√≠vel de intelig√™ncia:* ${nivelDeInteligencia}
üòã *N√≠vel de gostosura:* ${nivelDeGostosura}%
üòä *Estado de humor:* ${estadoDeHumor}
‚ôë *Signo:* ${signo}
üíº *Profiss√£o:* ${profissao}
üåç *Pa√≠s de origem:* ${pais}
üéÆ *Hobby:* ${hobby}

üéÆ *Informa√ß√µes de Jogos:*
üïπÔ∏è *Tipo de jogo preferido:* ${tipoDeJogo}
üéÆ *Plataforma de jogo:* ${plataformaDeJogo}
‚è≥ *Horas de jogo por semana:* ${horasDeJogo}

‚ú® *Mensagem motivacional:* ${mensagemMotivacional}

> ${NomeDoBot}`;

    // Envio do texto com a imagem
    sandro.sendMessage(from, { text: dptr }, { quoted: selo });
    
  } catch (e) {
    console.log("Erro no comando 'perfil':", e);
  }
  break;

case 'perfilff':
  try {
    // Definindo os valores de informa√ß√µes aleat√≥rias
    const patentes = ['Bronze', 'Prata', 'Ouro', 'Platina', 'Diamante', 'Mestre', 'Desafiante'];
    const tiposDeJogador = ['Rusher', 'Camper', 'Suporte', 'Estrat√©gico', 'Aleat√≥rio'];
    const armasFavoritas = ['AK-47', 'M4A1', 'AWM', 'Desert Eagle', 'MP40', 'SPAS-12', 'Groza', 'SCAR', 'Famas', 'XM8'];
    const modosFavoritos = ['Cl√°ssico', 'Ranqueado', 'Contra Squad', 'Modo Zombie', 'Modo Treinamento', 'Torneios', 'Modo Casual'];
    const skinsFavoritas = ['Panda', 'Anjo', 'Caveira', 'Dino', 'Palha√ßo', 'Samurai', 'Rei das Sombras', 'Coelhinho', 'Inferno', 'Vampiro'];
    const mapasFavoritos = ['Bermuda', 'Kalahari', 'Purgat√≥rio', 'Alpine', 'Gravado'];
    const personagensFavoritos = ['Chrono', 'Kelly', 'Hayato', 'Alok', 'Moco', 'Wukong', 'Skyler', 'Steffie', 'Nikita', 'Maxim'];
    const petsFavoritos = ['Pantera Noturna', 'Shiba', 'Poring', 'Falc√£o', 'Rob√¥', 'Drag√£ozinho', 'Ottero', 'Cobra Ninja'];
    const emotesFavoritos = ['Booyah!', 'Cora√ß√£o', 'Faz o Gelo', 'Cadeira de Mestre', 'M√£o de Fogo', 'Socos de Punho', 'Magia'];
    const habilidadesEspeciais = ['Velocidade', 'Precis√£o', 'Cura R√°pida', 'Redu√ß√£o de Dano', 'Aumento de Defesa', 'Mira Autom√°tica'];
    const nivelDeJogo = ['Noob', 'Intermedi√°rio', 'Profissional', 'Insano'];
    const horasDeJogoPorSemana = ['1-5 horas', '6-10 horas', '11-20 horas', '21-40 horas', 'Mais de 40 horas'];
    const estilosDeJogo = ['Agressivo', 'Defensivo', 'T√°tico', 'Criativo', 'Imprevis√≠vel'];
    const cl√£s = ['Sem cl√£', 'Matadores de Elite', 'Os Invenc√≠veis', 'For√ßa Suprema', 'Booyah Team', 'Anjos do Fogo', 'Os Dominantes'];
    const conquistas = ['100 Booyahs', '500 Abates', 'Top 10 Global', 'Campe√£o de Torneio', 'Melhor do Cl√£', 'Recorde Pessoal'];
    const frasesDeGuerra = [
      "Booyah ou nada!",
      "Aqui quem manda sou eu!",
      "N√£o h√° escapat√≥ria!",
      "Minha mira nunca falha.",
      "Voc√™ pode correr, mas n√£o pode se esconder!"
    ];

    // Sele√ß√£o aleat√≥ria de valores
    const patente = patentes[Math.floor(Math.random() * patentes.length)];
    const tipoDeJogador = tiposDeJogador[Math.floor(Math.random() * tiposDeJogador.length)];
    const armaFavorita = armasFavoritas[Math.floor(Math.random() * armasFavoritas.length)];
    const modoFavorito = modosFavoritos[Math.floor(Math.random() * modosFavoritos.length)];
    const skinFavorita = skinsFavoritas[Math.floor(Math.random() * skinsFavoritas.length)];
    const mapaFavorito = mapasFavoritos[Math.floor(Math.random() * mapasFavoritos.length)];
    const personagemFavorito = personagensFavoritos[Math.floor(Math.random() * personagensFavoritos.length)];
    const petFavorito = petsFavoritos[Math.floor(Math.random() * petsFavoritos.length)];
    const emoteFavorito = emotesFavoritos[Math.floor(Math.random() * emotesFavoritos.length)];
    const habilidadeEspecial = habilidadesEspeciais[Math.floor(Math.random() * habilidadesEspeciais.length)];
    const nivel = nivelDeJogo[Math.floor(Math.random() * nivelDeJogo.length)];
    const horasDeJogo = horasDeJogoPorSemana[Math.floor(Math.random() * horasDeJogoPorSemana.length)];
    const estiloDeJogo = estilosDeJogo[Math.floor(Math.random() * estilosDeJogo.length)];
    const cl√£ = cl√£s[Math.floor(Math.random() * cl√£s.length)];
    const conquista = conquistas[Math.floor(Math.random() * conquistas.length)];
    const fraseDeGuerra = frasesDeGuerra[Math.floor(Math.random() * frasesDeGuerra.length)];

    // Mensagem motivacional
    const mensagensMotivacionais = [
      "Voc√™ √© um verdadeiro sobrevivente!",
      "Nunca desista at√© o Booyah!",
      "A pr√°tica leva √† perfei√ß√£o!",
      "Confie na sua equipe e na sua mira!",
      "Hoje √© dia de Booyah, continue jogando!"
    ];
    const mensagemMotivacional = mensagensMotivacionais[Math.floor(Math.random() * mensagensMotivacionais.length)];

    // Montagem do texto do perfil
    const perfilFF = `üéÆ *SEU PERFIL NO FREE FIRE* üéÆ

üèÜ *Patente:* ${patente}
üí• *Tipo de jogador:* ${tipoDeJogador}
üî´ *Arma favorita:* ${armaFavorita}
üéØ *Modo favorito:* ${modoFavorito}
üëï *Skin favorita:* ${skinFavorita}
üó∫Ô∏è *Mapa favorito:* ${mapaFavorito}
üßë‚Äçüé§ *Personagem favorito:* ${personagemFavorito}
üêæ *Pet favorito:* ${petFavorito}
üé≠ *Emote favorito:* ${emoteFavorito}
‚ú® *Habilidade especial:* ${habilidadeEspecial}
üî• *N√≠vel de habilidade:* ${nivel}
‚è≥ *Horas de jogo por semana:* ${horasDeJogo}
üéÆ *Estilo de jogo:* ${estiloDeJogo}
ü§ù *Cl√£:* ${cl√£}
üèÖ *Conquista mais marcante:* ${conquista}
üì¢ *Frase de guerra:* "${fraseDeGuerra}"

‚ú® *Mensagem motivacional:* ${mensagemMotivacional}

> ${NomeDoBot}`;

    // Envio do texto com a imagem (substitua `sandro` pela fun√ß√£o de envio do seu bot)
    sandro.sendMessage(from, { text: perfilFF }, { quoted: selo });
    
  } catch (e) {
    console.log("Erro no comando 'perfil':", e);
  }
  break;
  
case 'perfil':
  try {
    // Definindo as vari√°veis para o jogo de futebol
    const times = ['Flamengo', 'Vasco', 'Palmeiras', 'S√£o Paulo', 'Corinthians', 'Atl√©tico Mineiro', 'Gr√™mio', 'Internacional'];
    const posicoes = ['Atacante', 'Meio-Campo', 'Defensor', 'Goleiro'];
    const habilidades = ['Chute', 'Passe', 'Drible', 'Cabeceio', 'Defesa', 'Vis√£o de Jogo', 'Finaliza√ß√£o'];
    const estiloDeJogo = ['Ofensivo', 'Defensivo', 'Equilibrado'];
    const ligas = ['Brasileir√£o', 'La Liga', 'Premier League', 'Serie A', 'Bundesliga', 'Campeonato Franc√™s'];
    const horasDeTreinamento = ['1-2 horas', '3-4 horas', '5-6 horas', 'Mais de 6 horas'];

    // Sele√ß√£o aleat√≥ria de valores
    const timeFavorito = times[Math.floor(Math.random() * times.length)];
    const posicaoFavorita = posicoes[Math.floor(Math.random() * posicoes.length)];
    const habilidadeMelhor = habilidades[Math.floor(Math.random() * habilidades.length)];
    const estiloDeJogoPreferido = estiloDeJogo[Math.floor(Math.random() * estiloDeJogo.length)];
    const ligaPreferida = ligas[Math.floor(Math.random() * ligas.length)];
    const horasTreinamento = horasDeTreinamento[Math.floor(Math.random() * horasDeTreinamento.length)];

    // Mensagem motivacional de futebol
    const mensagensMotivacionais = [
      "O futebol √© paix√£o, a vit√≥ria √© consequ√™ncia!",
      "O jogo n√£o termina at√© o apito final!",
      "Nunca desista, a vit√≥ria vem para quem persevera!",
      "A cada drible, a cada passe, o futebol te ensina a lutar.",
      "No futebol, quem tem garra conquista!"
    ];
    const mensagemMotivacional = mensagensMotivacionais[Math.floor(Math.random() * mensagensMotivacionais.length)];

    // Montagem do texto do perfil com informa√ß√µes de futebol
    const dptr = `‚öΩÔ∏è*SEU PERFIL DE FUTEBOL*‚öΩÔ∏è

üèÜ *Time Favorito:* ${timeFavorito}
‚öΩÔ∏è *Posi√ß√£o Preferida:* ${posicaoFavorita}
ü¶µ *Melhor Habilidade:* ${habilidadeMelhor}
üéÆ *Estilo de Jogo:* ${estiloDeJogoPreferido}
üèüÔ∏è *Liga Preferida:* ${ligaPreferida}
‚è≥ *Horas de Treinamento por Semana:* ${horasTreinamento}

‚ú® *Mensagem Motivacional:* ${mensagemMotivacional}

> ${NomeDoBot}`;

    // Envio do texto com as informa√ß√µes de futebol
    sandro.sendMessage(from, { text: dptr }, { quoted: selo });
    
  } catch (e) {
    console.log("Erro no comando 'perfil':", e);
  }
  break;

case 'perfiljogo':
  try {
    // Definindo as vari√°veis para o jogo de futebol
    const times = ['Flamengo', 'Vasco', 'Palmeiras', 'S√£o Paulo', 'Corinthians', 'Atl√©tico Mineiro', 'Gr√™mio', 'Internacional'];
    const posicoes = ['Atacante', 'Meio-Campo', 'Defensor', 'Goleiro'];
    const habilidades = ['Chute', 'Passe', 'Drible', 'Cabeceio', 'Defesa', 'Vis√£o de Jogo', 'Finaliza√ß√£o'];
    const estiloDeJogo = ['Ofensivo', 'Defensivo', 'Equilibrado'];
    const ligas = ['Brasileir√£o', 'La Liga', 'Premier League', 'Serie A', 'Bundesliga', 'Campeonato Franc√™s'];
    const horasDeTreinamento = ['1-2 horas', '3-4 horas', '5-6 horas', 'Mais de 6 horas'];
    const estatisticasJogador = {
      gols: Math.floor(Math.random() * 200), // Gols marcados
      assistencias: Math.floor(Math.random() * 100), // Assist√™ncias
      jogos: Math.floor(Math.random() * 500), // Jogos disputados
      cart√µesAmarelos: Math.floor(Math.random() * 50), // Cart√µes amarelos
      cart√µesVermelhos: Math.floor(Math.random() * 10), // Cart√µes vermelhos
    };
    const jogosImportantes = ['Final da Copa do Brasil', 'Final da Libertadores', 'Cl√°ssico Paulista', 'Campeonato Mundial', 'Amistoso Internacional'];
    const jogoImportante = jogosImportantes[Math.floor(Math.random() * jogosImportantes.length)];

    // Sele√ß√£o aleat√≥ria de valores
    const timeFavorito = times[Math.floor(Math.random() * times.length)];
    const posicaoFavorita = posicoes[Math.floor(Math.random() * posicoes.length)];
    const habilidadeMelhor = habilidades[Math.floor(Math.random() * habilidades.length)];
    const estiloDeJogoPreferido = estiloDeJogo[Math.floor(Math.random() * estiloDeJogo.length)];
    const ligaPreferida = ligas[Math.floor(Math.random() * ligas.length)];
    const horasTreinamento = horasDeTreinamento[Math.floor(Math.random() * horasDeTreinamento.length)];

    // Mensagem motivacional de futebol
    const mensagensMotivacionais = [
      "O futebol √© paix√£o, a vit√≥ria √© consequ√™ncia!",
      "O jogo n√£o termina at√© o apito final!",
      "Nunca desista, a vit√≥ria vem para quem persevera!",
      "A cada drible, a cada passe, o futebol te ensina a lutar.",
      "No futebol, quem tem garra conquista!"
    ];
    const mensagemMotivacional = mensagensMotivacionais[Math.floor(Math.random() * mensagensMotivacionais.length)];

    // Montagem do texto do perfil com informa√ß√µes de futebol
    const dptr = `‚öΩÔ∏è *SEU PERFIL DE FUTEBOL* ‚öΩÔ∏è

üèÜ *Time Favorito:* ${timeFavorito}
‚öΩÔ∏è *Posi√ß√£o Preferida:* ${posicaoFavorita}
ü¶µ *Melhor Habilidade:* ${habilidadeMelhor}
üéÆ *Estilo de Jogo:* ${estiloDeJogoPreferido}
üèüÔ∏è *Liga Preferida:* ${ligaPreferida}
‚è≥ *Horas de Treinamento por Semana:* ${horasTreinamento}

üìä *Estat√≠sticas do Jogador:*
‚öΩ *Gols Marcados:* ${estatisticasJogador.gols}
üéØ *Assist√™ncias:* ${estatisticasJogador.assistencias}
üïπÔ∏è *Jogos Disputados:* ${estatisticasJogador.jogos}
üü® *Cart√µes Amarelos:* ${estatisticasJogador.cart√µesAmarelos}
üü• *Cart√µes Vermelhos:* ${estatisticasJogador.cart√µesVermelhos}

üèÜ *Jogo Importante:* ${jogoImportante}

‚ú® *Mensagem Motivacional:* ${mensagemMotivacional}

> ${NomeDoBot}`;

    // Envio do texto com as informa√ß√µes de futebol
    sandro.sendMessage(from, { text: dptr }, { quoted: selo });
    
  } catch (e) {
    console.log("Erro no comando 'perfiljogo':", e);
  }
  break;
  
case 'desafio':
  try {
if(!isModobn) return reply(mess.warningMB(prefix))
reply(`üëâ N√£o vale desistir! Prepare-se!`)
    // Definindo uma lista de desafios pesados e engra√ßados
    const desafiosPesados = [
      'Desafio: Fique 1 minuto de p√© com uma perna s√≥! Voc√™ consegue?',
      'Desafio: Beba um copo de √°gua gelada enquanto segura o ar por 10 segundos!',
      'Desafio: Coloque o p√© na sua cabe√ßa e fique assim por 30 segundos!',
      'Desafio: Fique 2 minutos fazendo caretas enquanto segura a respira√ß√£o!',
      'Desafio: Diga "Eu sou o mestre do universo" em voz alta 5 vezes seguidas!',
      'Desafio: Balan√ßar sua cabe√ßa de um lado para o outro por 1 minuto, sem parar!',
      'Desafio: Fala para seu 5¬∞ contato que vc e gay',
      'Desafio: Imite o som de um animal aleat√≥rio (galo, vaca, porquinho, etc.) por 30 segundos!',
      'Desafio: Fa√ßa 50 abdominais em menos de 1 minuto!',
      'Desafio: Fa√ßa um "selfie" com a express√£o mais feia que conseguir e envie para o grupo!',
      'Desafio: Segure o ar por 10 segundos! Voc√™ consegue?',
      'Desafio: Fique 30 segundos sem rir! Vai conseguir?',
      'Desafio: Tente fazer 10 flex√µes sem parar!',
      'Desafio: Diga a palavra "paralelep√≠pedo" 5 vezes sem errar!',
      'Desafio: Tente ficar 10 segundos olhando para a tela sem piscar!',
      'Desafio: Fa√ßa uma careta bem feia e mantenha por 10 segundos!',
      'Desafio: Diga seu nome ao contr√°rio 3 vezes!',
      'Desafio: Tente adivinhar o enigma: "O que √©, o que √©? Tem cabe√ßa, mas n√£o tem corpo!"',
      'Desafio: Fa√ßa 20 pulos no lugar! Vai encarar?',
      'Desafio: Tente tocar o seu nariz com a l√≠ngua!'      
    ];

    // Gerando um desafio pesado aleat√≥rio
    const desafioPesadoSelecionado = desafiosPesados[Math.floor(Math.random() * desafiosPesados.length)];

    // URL da imagem para o desafio (pode ser uma URL de qualquer imagem da web)
    const imagemUrl = fotobot; // Altere para o link da imagem desejada

    // Enviar a resposta com o desafio pesado e imagem
    const dptr = `üî• *DESAFIO PESADO* üî•

üí• *Seu desafio √©:* 
${desafioPesadoSelecionado}

> ${NomeDoBot}`;

    // Envia o desafio com a imagem para o usu√°rio
    sandro.sendMessage(from, { image: { url: imagemUrl }, caption: dptr }, { quoted: selo });
  } catch (e) {
    console.log("Erro no comando 'desafio':", e);
  }
  break;
  
case 'tabela':
sandro.sendMessage(from, {text: tabela(prefix, NomeDoBot)}, {quoted: selo})
break 

case 'destrava2':
sandro.sendMessage(from, {text: destrava2 (prefix)}, {quoted: selo})
break 

case 'tradutor': case 'traduzir':
try {
if(!q) return reply(`Exemplo: ${prefix}tradutor pt|Dog`)
txt = q.replace(" |", "|").replace("| ", "|").replace(" | ", "|")
var [idioma, texto] = txt.split("|")
if(!q.includes("|")) return reply(`Est√° faltando a |, *use como exemplo:* ${prefix}tradutor pt|Dog`)
bla = await fetchJson(`https://yurimodz-apis.xyz/api/info/translate?texto=${encodeURI(texto)}&ling=${encodeURI(idioma)}&apikey=${SANDRO_MD_BOT}`)
reply(mess.translator(bla)).catch(e => {
reply("Ocorreu um erro ao realizar a tradu√ß√£o do texto.")
})
} catch (e) {
if(String(e).includes(`${SANDRO_MD_BOT}`)) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar.")   
}
}
break

case 'idiomas':
case 'idioma':
sandro.sendMessage(from, {text: getInfo.listLanguages(prefix)}, {quoted: selo})
break

case 'infobv':
case 'infowelcome':
case 'infobemvindo':
sandro.sendMessage(from, {text: getInfo.bemvindo(prefix)}, {quoted: selo})
break

case 'getquoted':
case 'getinfo':  
case 'get':  
case 'mek':
reply(JSON.stringify(info, null, 3))
break

case 'get-txt':  
reply(JSON.stringify(info.message.extendedTextMessage.contextInfo.quotedMessage.conversation, null, 2))
break

case 'gerarcpf':
cp1 = `${Math.floor(Math.random() * 300) + 600}`
cp2 = `${Math.floor(Math.random() * 300) + 600}`
cp3 = `${Math.floor(Math.random() * 300) + 600}`
cp4 = `${Math.floor(Math.random() * 30) + 60}`
cpf = `${cp1}.${cp2}.${cp3}-${cp4}`
sandro.sendMessage(from, {text: `CPF gerado com sucesso : ${cpf}`}, {quoted: selo})
break

case 'ddd':
  if (args.length < 1) return reply(`Uso correto: ${prefix + command} <DDD>`);
  const ddd = args[0];

  try {
    // Fazendo a requisi√ß√£o para obter informa√ß√µes do DDD
    const response = await axios.get(`https://brasilapi.com.br/api/ddd/v1/${ddd}`);

    if (response.data.error) {
      return reply(`N√£o encontrei informa√ß√µes para o DDD ${ddd}. Tente novamente.`);
    }

    // Inicializando a lista de cidades
    let dddList = `üìç Lista de Cidades com o DDD ${ddd} (${response.data.state})\n\n`;

    // Percorrendo as cidades e formatando a lista
    response.data.cities.forEach((city, index) => {
      dddList += `${index + 1} ‚™ß *${city}*\n`;
    });

    // Enviando a lista de cidades para o usu√°rio
    sandro.sendMessage(from, { text: dddList }, { quoted: selo });
  } catch (error) {
    console.error(error);
    reply('Ocorreu um erro ao buscar as informa√ß√µes do DDD. Tente novamente mais tarde.');
  }
  break;

case 'cep44':
  if (args.length < 1) return reply(`Uso correto: ${prefix + command} <Nome da Rua>`);

  const rua = args.join(' '); // Pega o nome completo da rua enviado pelo usu√°rio

  try {
    // Fazendo a requisi√ß√£o para obter o CEP baseado no nome da rua
    const response = await axios.get(`https://viacep.com.br/ws/BR/${encodeURIComponent(rua)}/json/`);

    // Verificando se a API retornou dados v√°lidos
    if (response.data.erro) {
      return reply(`N√£o encontrei o CEP para a rua "${rua}". Verifique o nome e tente novamente.`);
    }

    // Formando a mensagem com os dados obtidos da API
    const cepInfo = `
      üìç *CEP encontrado*:
      
      *Rua:* ${response.data.logradouro}
      *Bairro:* ${response.data.bairro}
      *Cidade:* ${response.data.localidade}
      *Estado:* ${response.data.uf}
      *CEP:* ${response.data.cep}
    `;

    // Enviando a resposta com o CEP encontrado
    sandro.sendMessage(from, { text: cepInfo }, { quoted: selo });
  } catch (error) {
    console.error(error);
    reply('Ocorreu um erro ao buscar o CEP. Tente novamente mais tarde.');
  }
  break;
  
//===========(ADMS-FUN√á√ïES-AKI)=========\\

case 'raizq': case 'raizquadrada':
if(!Number(q.replace("‚àö", ""))) return reply("Retorne ap√≥s o comando o n√∫mero que voc√™ quer encontrar a raiz quadrada")
radical = Number(q.replace("‚àö", ""))
if(!raiz(radical)) {
  divi = divisores(radical)
  if(divi.length <= 0) return reply("Nenhum divisor encontrado...")
  primeiro = []
  for(a of divi) {
    if(raiz(a)) primeiro.push({search: a, resultado: findRaiz(a)})
  }
  if(primeiro.length <= 0) return reply("Nenhuma raiz encontrada...")
  result_x = primeiro[primeiro.length - 1].resultado
  resto = radical / primeiro[primeiro.length - 1].search
  dividir = divisores(resto)
  if(divisores.length > 0) {
    segundo = []
    for(b of dividir) {
      if(raiz(b)) segundo.push({search: b, resultado: findRaiz(b)})
    }
    if(segundo.length > 0) {
      result_x *= segundo[segundo.length - 1].resultado
      result_x += `‚àö` + (resto / segundo[segundo.length - 1].search)
    } else result_x += `‚àö` + resto
  } else result_x += `‚àö` + resto
} else result_x = findRaiz(radical)
reply(`üßÆ _Segundo meus c√°lculos, a ‚àö${q.replace("‚àö", "")} √© -> *"${result_x}"*_ „ÉÖ`)
break

case 'bhaskara':
if(!q) return reply(`Retorne a equa√ß√£o quadr√°tica ap√≥s o comando (use a vari√°vel "x", exemplo: ${prefix+command} 2x¬≤+4x+2 = 0)`)
a = Number(q.replace("x¬≤", "x2").split("x2")[0])
b = Number(q.replace("x¬≤", "x2").split("x2")[1].split("x")[0])
c = Number(q.split("x")[2].split("=")[0])
txt = `‚àÜ = b¬≤ - 4 ‚Ä¢ a ‚Ä¢ c
‚àÜ = ${b}¬≤ - 4 ‚Ä¢ ${a} ‚Ä¢ ${c}
‚àÜ = ${b*b} ${Number(-4*a*c) >= 0 ? `+${-4*a*c}` : -4*a*c}
‚àÜ = ${Number(b*b) + Number(-4*a*c)}
`
delta = Number(b*b) + Number(-4*a*c)
if(delta < 0) return reply("A equa√ß√£o n√£o possui raiz")
raiz = []
for(i = 0; i < Number(delta/2); i++) {
if(Number(i*i) === delta) {
raiz.push(i)
}
}
if(delta != 0 && raiz.length <= 0) return reply(`‚àö${delta} n√£o encontrada`)
txt += `
x = -b ¬±‚àö‚àÜ
         2 ‚Ä¢ a
x = -(${b}) ¬±‚àö${delta}
         2 ‚Ä¢ ${a}
`
if(delta > 0) {
txt += `
x = ${b*Number(-1)} ¬±${raiz[0]}
         ${a*2}
x' = ${b*Number(-1)} + ${raiz[0]}
         ${a*2}
x' = ${Number(b*Number(-1)) + Number(raiz[0])}
         ${a*2}
x' = ${Number(Number(b*Number(-1)) + Number(raiz[0])) / Number(a*2)}

x'' = ${b*Number(-1)} - ${raiz[0]}
         ${a*2}
x'' = ${Number(b*Number(-1)) - Number(raiz[0])}
         ${a*2}
x'' = ${Number(Number(b*Number(-1)) - Number(raiz[0])) / Number(a*2)}

$ = {${Number(Number(b*Number(-1)) + Number(raiz[0])) / Number(a*2)}, ${Number(Number(b*Number(-1)) - Number(raiz[0])) / Number(a*2)}}`
} else {
txt += `x = ${b*Number(-1)}
       ${a*2}
x = ${Number(b*Number(-1)) / Number(a*2)}
`
}
reply(txt)
break

case 'calculadora':
case 'calcular':  
case 'calc':
  try {
    let rsp = q.replace("x", "*")
               .replace('"', ":")
               .replace(new RegExp("[()abcdefghijklmnopqrstwuvxyz]", "gi"), "")
               .replace("√∑", "/");
    const resultado = eval(rsp);
    const mensagem = `üßÆ *C√°lculo Realizado* üßÆ  
    
üî¢ *Express√£o:* ${q}
    
‚ûó *Resultado:* ${resultado}

üéØ *F√≥rmula calculada com sucesso!*

‚ö° Se precisar de mais c√°lculos, √© s√≥ chamar! ‚ö°`;
    return reply(mensagem);
  } catch (error) {
    return reply("‚ùå *Erro no c√°lculo!*‚ùå\nPor favor, verifique a express√£o e tente novamente.");
  }
  break;

case 'nomegp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
blat = args.join(" ")
sandro.groupUpdateSubject(from, `${blat}`)
sandro.sendMessage(from, {text: 'Sucesso, alterou o nome do grupo'}, {quoted: selo})
break

case 'descgp':
case 'descri√ß√£ogp':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.adm)
blabla = args.join(" ")
sandro.groupUpdateDescription(from, `${blabla}`)
sandro.sendMessage(from, {text: 'Sucesso, alterou a descri√ß√£o do grupo'}, {quoted: selo})
break

case 'requestgp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!q) return reply(mess.syntaxRequestProhibited(prefix))
const req = await sandro.groupRequestParticipantsList(from)
if (args[0] === '-r') {
await sandro.groupRequestParticipantsUpdate(from, [args[1].split(' ')[0]+"@s.whatsapp.net"], "reject")
} else if (args[0] === '-a') {
mentionSemQuoted(`Seja bem-vindo(a) ao grupo @${args[1].split(' ')[0]}, sua aprova√ß√£o foi aceita pelo administrador(a).`)
await sandro.groupRequestParticipantsUpdate(from, [args[1].split(' ')[0]+"@s.whatsapp.net"], "approve")
} else if (args[0] === '-list') {
let totalRequest = req.length
if (req == 0) return reply(`N√£o encontrei nenhuma solicita√ß√£o pendente no grupo.`)
ABC = `( Total: ${totalRequest} ) - Lista de pessoas que desejam entrar no grupo:\n-\n`
for (var i of req) {
ABC += `Sujeito: @${i.jid.replace("@s.whatsapp.net", "")}\n‚Ä¢ N√∫mero solicitante: ${i.jid.replace("@s.whatsapp.net", "")}\n`;
ABC += `‚Äì\n`
}
mention(ABC)
}
break;

case 'setfotogp':
case 'fotogp':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!isQuotedImage) return reply(`Use: ${prefix + command} <Marque uma foto>`)
ftgp = isQuotedImage ? info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : info.message.imageMessage
rane = getRandom('.'+await getExtension(ftgp.mimetype))
buffimg = await getFileBuffer(ftgp, 'image')
fs.writeFileSync(rane, buffimg)
medipp = rane 
sandro.updateProfilePicture(from, {url: medipp})
reply(`Foto do grupo alterada com sucesso`) 
break

case 'linkgp':
case 'linkgroup':
if(!isGroup) return reply('so em grupo')
if(!isGroupAdmins) return reply('vc nao e adm')
if(!isBotGroupAdmins) return reply('bot precisa ser adm')
linkgc = await sandro.groupInviteCode(from)
reply('https://chat.whatsapp.com/'+linkgc)
break

case 'recrutar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!q) return reply("Cad√™ o n√∫mero do usu√°rio que voc√™ deseja convidar.")
try {
photoG = await sandro.profilePictureUrl(from, 'image') // Pegar a foto do grupo aonde foi solicitado o comando de recrutamento.
} catch {
photoG = thumbnail // Vai colocar a img que est√° na defini√ß√£o, caso esteja sem foto.
}
rcrt = q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net`
linkgc = await sandro.groupInviteCode(from)
sandro.sendMessage(rcrt, {text: "*Ol√°, tudo bem?* Voc√™ foi convidado(a) pelo(a) adminstrador(a) do grupo.\nPara entrar no grupo, clique acima!", contextInfo: {externalAdReply: {title: "Clique aqui para participar do grupo.", thumbnail: await getBuffer(photoG), mediaType: 1, sourceUrl: "https://chat.whatsapp.com/"+linkgc}}})
reply("Convite de recrutamento do usu√°rio, foi enviado para o privado dele com sucesso...")
break

case 'listatm':
if(!SoDono) return reply(enviar.msg.donosmt)
rgp = JSON.parse(fs.readFileSync("./database/func/tmgroup.json"))
if(rgp.length == 0) return reply(`N√£o cont√©m nenhum registro de transmiss√£o, utilize ${prefix}rgtm no grupo que deseja que ele receba as transmiss√µes do bot..`)
bl = "";
for ( i = 0; i < rgp.length; i++) {
bl += `( ${i+1} ) - ID: ${rgp[i].id}\n‚Ä¢ Nome do Usu√°rio(a) ou Grupo: ${rgp[i].infonome}\n-\n`
}
reply(bl)
break

case 'rgtm':
if(!SoDono) return reply(enviar.msg.donosmt)
rgp = JSON.parse(fs.readFileSync("./database/func/tmgroup.json"))
if(JSON.stringify(rgp).includes(from)) return reply("Este grupo/usu√°rio j√° est√° registrado na lista de transmiss√£o") 
rgp.push({id: from, infonome: `${isGroup ? groupName: pushname}`})
fs.writeFileSync("./database/func/tmgroup.json", JSON.stringify(rgp))
reply("Registrado com sucesso, quando for realizada as transmiss√µes, esse grupo/usu√°rio estar√° na lista.")
break

case 'tirardatm':
if(!SoDono) return reply(enviar.msg.donosmt)
rgp = JSON.parse(fs.readFileSync("./database/func/tmgroup.json"))
if(!JSON.stringify(rgp).includes(from)) return reply("Este grupo/usu√°rio n√£o est√° registrado para ser tirado da lista de transmiss√£o") 
if(q.trim().length > 4) {
var ustm = rgp.map(i => i.id).indexOf(q.trim())
} else {
var ustm = rgp.map(i => i.id).indexOf(from)
}
rgp.splice(ustm, 1)
fs.writeFileSync("./database/func/tmgroup.json", JSON.stringify(rgp))
reply("Grupo/Usu√°rio tirado da lista de transmiss√£o com sucesso")
break

case 'fazertm':
if(!SoDono) return reply(enviar.msg.donosmt)
var rgp = JSON.parse(fs.readFileSync("./database/func/tmgroup.json"))
if(rgp.lengh == 0) return reply("N√£o cont√©m nenhum grupo registrado para realizar transmiss√£o") 
await sleep(1000);
var DFC = "";
var rsm = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var pink = isQuotedImage ? rsm?.imageMessage: info.message?.imageMessage
var blue = isQuotedVideo ? rsm?.videoMessage: info.message?.videoMessage
var red = isQuotedMsg ? rsm?.textMessage: info.message?.textMessage
var purple = isQuotedDocument ? rsm?.documentMessage: info.message?.documentMessage
var yellow = isQuotedDocW ? rsm?.documentWithCaptionMessage?.message?.documentMessage: info.message?.documentWithCaptionMessage?.message?.documentMessage
var aud_d = isQuotedAudio ? rsm.audioMessage : ""
var figu_d = isQuotedSticker ? rsm.stickerMessage : ""
var red = isQuotedMsg && !aud_d &&!figu_d && !pink && !blue&& !purple && !yellow? "Transmiss√£o do Propriet√°rio: "+rsm.conversation: info.message?.conversation
var green = isQuotedMsg2 && !aud_d &&!figu_d && !red && !pink && !blue && !purple && !yellow ? "Transmiss√£o do Propriet√°rio: "+rsm.extendedTextMessage?.text : info?.message?.extendedTextMessage?.text
if(pink) {
var DFC = pink
pink.caption = q.length > 1 ? "Transmiss√£o do Propriet√°rio: "+q : pink.caption.replace(new RegExp(prefix+command, "gi"), `Transmiss√£o do Propriet√°rio: ${NickDono}\n\n`)
pink.image = {url: pink.url}
} else if(blue) {
var DFC = blue  
blue.caption = q.length > 1 ? "Transmiss√£o do Propriet√°rio: "+q : blue.caption.replace(new RegExp(prefix+command, "gi"), `Transmiss√£o do Propriet√°rio: ${NickDono}\n\n`)
blue.video = {url: blue.url}
} else if(red) {
black = {}
black.text = red.replace(new RegExp(prefix+command, "gi"), `Transmiss√£o do Propriet√°rio: ${NickDono}\n\n`)
var DFC = black
} else if(!aud_d && !figu_d && green) {
brown = {}
brown.text = green.replace(new RegExp(prefix+command, "gi"), `Transmiss√£o do Propriet√°rio: ${NickDono}\n\n`)
var DFC = brown
} else if(purple) {
var DFC = purple
purple.document = {url: purple.url} 
} else if(yellow) {
var DFC = yellow 
yellow.caption = q.length > 1 ? "Transmiss√£o do Propriet√°rio: "+q : yellow.caption.replace(new RegExp(prefix+command, "gi"), `Transmiss√£o do Propriet√°rio: ${NickDono}\n\n`)
yellow.document = {url: yellow.url}  
} else if(figu_d) {
var DFC = figu_d
figu_d.sticker = {url: figu_d.url}
} else if(aud_d) {
var DFC = aud_d
aud_d.audio = {url: aud_d.url}
}
for (i = 0; i < rgp.length; i++) {
sandro.sendMessage(rgp[i].id, DFC)}
break

case 'grupo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args[0] === 'a') {
setTimeout(() => {reagir(from, "üîì")}, 300)
await reply(`üòÅ - Certo meu consagrado humano, vou abrir o grupo...`)
sandro.groupSettingUpdate(from, 'not_announcement')
} else if(args[0] === 'f') {
setTimeout(() => {reagir(from, "üîê")}, 300)
await reply(`üòÅ - Certo meu consagrado humano, vou fechar o grupo...`)
sandro.groupSettingUpdate(from, 'announcement')
}				 
break

case 'infogp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
const metadata = await sandro.groupMetadata(from);
var puxarInfo = await sandro.groupMetadata(from);
var ANC_INFO = puxarInfo.announce;
var returnAnnounce = ANC_INFO === false ? "N√£o." : ANC_INFO === true ? "Sim." : undefined;
var RST_INFO = puxarInfo.restrict;
var returnRestrict = RST_INFO === false ? "Sim." : RST_INFO === true ? "N√£o." : undefined;
var infoCreator = puxarInfo.subjectOwner;

// URL da imagem (substitua pelo link da imagem desejada)
const imageURL = fotobot;

sandro.sendMessage(from, {
    image: { url: imageURL }, // Adiciona a imagem atrav√©s do link
    caption: `*_üè∑Ô∏è Nome do Grupo:_* *${puxarInfo.subject}*\n‚Ä¢ ID: *${puxarInfo.id}*\n-\n*_üëë Este grupo foi criado por:_* *@${infoCreator.replace("@s.whatsapp.net", "")}*\n*_üìÜ Data/hora de cria√ß√£o do grupo:_* *${moment(`${puxarInfo.creation}` * 1000).tz('America/Sao_Paulo').format('DD/MM/YYYY HH:mm:ss')}*\n‚Ä¢ Hor√°rio e data da √∫ltima altera√ß√£o no grupo: *${moment(`${puxarInfo.subjectTime}` * 1000).format('DD/MM/YYYY HH:mm:ss')}*\n-\n*_üî∞ Quantidade de administradores:_* *${groupAdmins.length}*\n*_üë•Quantidade de membros:_* *${somembros.length}*\n*_üåê Soma total de membros e admins do grupo:_* *${puxarInfo.participants.length} participantes*\n-\n*_üîê Este grupo est√° fechado no momento?_* *${returnAnnounce}*\n*_üßë‚Äçüíª As informa√ß√µes do grupo podem ser alteradas por membros?_* *${returnRestrict}*\n-\n*_üñ•Ô∏è Para ver as atividades dos participantes, use:_* *${prefix}atividade*\n*_üò¥ Para ver os membros inativos no grupo, use:_* *${prefix}inativos [quantidade de mensagens], ex:* ${prefix}inativos 10`,
}, { quoted: info });
break;

case 'totag':
case 'cita':
case 'hidetag':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
var DFC = "";
var rsm = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var pink = isQuotedImage ? rsm?.imageMessage : info.message?.imageMessage
var blue = isQuotedVideo ? rsm?.videoMessage : info.message?.videoMessage
var purple = isQuotedDocument ? rsm?.documentMessage : info.message?.documentMessage
var yellow = isQuotedDocW ? rsm?.documentWithCaptionMessage?.message?.documentMessage : info.message?.documentWithCaptionMessage?.message?.documentMessage
var aud_d = isQuotedAudio ? rsm.audioMessage : ""
var figu_d = isQuotedSticker ? rsm.stickerMessage : ""
var red = isQuotedMsg && !aud_d && !figu_d && !pink && !blue && !purple && !yellow ? rsm.conversation : info.message?.conversation
var green = rsm?.extendedTextMessage?.text || info?.message?.extendedTextMessage?.text
var MRC_TD = groupMembers.map(i => i.id)

if (pink && !aud_d && !purple) {
    var DFC = pink
    pink.caption = q.length > 1 
        ? `Marca√ß√£o do(a) Adm: ${q}` 
        : pink.caption.replace(new RegExp(`${prefix}${command}`, "gi"), `Marca√ß√£o do(a) Adm: ${pushname}\n\n`)
    pink.image = { url: pink.url }
    pink.mentions = MRC_TD
} else if (blue && !aud_d && !purple) {
    var DFC = blue  
    blue.caption = q.length > 1 
        ? `Marca√ß√£o do(a) Adm: ${q.trim()}` 
        : blue.caption.replace(new RegExp(`${prefix}${command}`, "gi"), `Marca√ß√£o do(a) Adm: ${pushname}\n\n`).trim()
    blue.video = { url: blue.url }
    blue.mentions = MRC_TD
} else if (red && !aud_d && !purple) {
    black = {}
    black.text = red.replace(new RegExp(`${prefix}${command}`, "gi"), `Marca√ß√£o do(a) Adm: ${pushname}\n\n`).trim()
    black.mentions = MRC_TD
    var DFC = black
} else if (!aud_d && !figu_d && green && !purple) {
    brown = {}
    brown.text = green.replace(new RegExp(`${prefix}${command}`, "gi"), `Marca√ß√£o do(a) Adm: ${NickDono}\n\n`).trim()
    brown.mentions = MRC_TD
    var DFC = brown
} else if (purple) {
    var DFC = purple
    purple.document = { url: purple.url }
    purple.mentions = MRC_TD
} else if (yellow && !aud_d) {
    var DFC = yellow 
    yellow.caption = q.length > 1 
        ? `Marca√ß√£o do(a) Adm: ${q.trim()}` 
        : yellow.caption.replace(new RegExp(`${prefix}${command}`, "gi"), `Marca√ß√£o do(a) Adm: ${pushname}\n\n`).trim()
    yellow.document = { url: yellow.url }
    yellow.mentions = MRC_TD
} else if (figu_d && !aud_d) {
    var DFC = figu_d
    figu_d.sticker = { url: figu_d.url }
    figu_d.mentions = MRC_TD
} else if (aud_d) {
    var DFC = aud_d
    aud_d.audio = { url: aud_d.url }
    aud_d.mentions = MRC_TD
    aud_d.ptt = true
}

sandro.sendMessage(from, DFC).catch(e => {
    console.log(e)
})
break

case 'marcar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
async function marcac() {
bla = []
blad = `‚Ä¢ Mencionando os membros comuns do grupo ou de uma comunidade. ${!q ? "" : `\n*Mensagem:* ${q}`}\n\n`
for( let i of somembros ) {
blad += `¬ª @${i.split("@")[0]}\n`
bla.push(i)
}
blam = JSON.stringify(somembros)
if(blam.length == 2) return reply(`‚ùåÔ∏è Ol√° *${pushname}* - N√£o cont√©m nenhum membro comum no grupo, √© sim apenas administradores. `)
mentions(blad, bla, true)  
}
marcac().catch(e => {
console.log(e)
})
break

case 'personalidade': { //Criado por Lm
    try {
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
        /** Pega a men√ß√£o */
        const mentionMessage = info.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0] || info.message?.extendedTextMessage?.contextInfo?.participant || null;
        
        if (mentionMessage) {
        
            await reply("*Gerando um personalidade aleat√≥ria dessa pessoa, aguarde um momento... ü§ó*");
            
            /** Fun√ß√£o para pegar palavras aleatoriamente */
            const randomFromArray = (array) => array[Math.floor(Math.random() * array.length)];
            
            /** Pega a imagem */
            const getProfileUrl = await sandro.profilePictureUrl(mentionMessage, 'image').catch(() => "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg");
            
            /** Pode add mais... */
            const types = {
                genders: ["Gay üè≥Ô∏è‚Äçüåà", "Masculino üí™", "Feminino ü¶ã", "Trans üè≥Ô∏è‚Äç‚ößÔ∏è", "L√©sbica üë©‚Äç‚ù§Ô∏è‚Äçüë©"],
                hobbies: ["Cozinhar üçú", "Ler livros üìö", "Estudar üéí", "Praticar esportes ‚õπÔ∏è", "Correr üèÉ", "Ouvir m√∫sica üéß", "Dan√ßar üíÉ", "Cantar üé§", "Viajar üõ´", "Joagar video-gamer üéÆ"],
                professions: ["M√©dico", "Engenheiro", "Professor", "Artista", "Designer", "Programador", "M√∫sico", "Escritor", "Puta"],
                favoriteTimesOfDay: ["Manh√£ üå§", "Tarde üåÖ", "Noite üåå", "Madrugada üåÉ"],
                favoriteMusicGenres: ["Rock", "Pop", "Jazz", "Sertanejo", "Funk", "Cl√°ssica", "Eletr√¥nica"],
                favoriteTemperatura: ["Frio ü•∂", "Quente ü•µ", "Morno üôÇ‚Äç‚Üï"]
            };
            
            /** Fun√ß√£o para criar um resultado da personalidade */
            function getResults() {
                return {
                    genero: randomFromArray(types.genders),
                    hobbie: randomFromArray(types.hobbies),
                    job: randomFromArray(types.professions),
                    clima: randomFromArray(types.favoriteTimesOfDay),
                    estilo_musical: randomFromArray(types.favoriteMusicGenres),
                    temperatura: randomFromArray(types.favoriteTemperatura)
                }
            }
            
            /** Retonarndo resultado akkaka */
            const b = getResults();
            await sandro.sendMessage(from, {
                image: {
                    url: getProfileUrl,
                }, 
                caption: `   ‚Ä¢ Resultados da personalidade de @${mentionMessage.split("@")[0]} ‚ú® ‚Ü¥\n-\n ‚ñë‚Éü‚Éõ ‚ûÆ Est√° pessoa provavelmente √© *${b.genero}*\n ‚ñë‚Éü‚Éõ ‚ûÆ Gosta de *${b.hobbie}*\n ‚ñë‚Éü‚Éõ ‚ûÆ Sua profiss√£o √© ser *${b.job}*\n ‚ñë‚Éü‚Éõ ‚ûÆ A hora do dia preferida √© de *${b.clima}*\n ‚ñë‚Éü‚Éõ ‚ûÆ Seu estilo de m√∫sica √©: *${b.estilo_musical}*\n ‚ñë‚Éü‚Éõ ‚ûÆ Temperatura favorita √© *${b.temperatura}*\n-\n\n  ‚Ä¢ Espero ter acertado pelo menos uma hein!!  @${mentionMessage.split("@")[0]} üëÄ\n\n${NomeDoBot}`,
                mentions: [mentionMessage, sender]
            }, {
                quoted: info
            });
        }
        else {
            reply("Mencione o '@' ou a mensagem de algu√©m...");
        }
    } catch (err) {
        console.error(err);
        reply("*Ops! Algo inesperado aconteceu. ‚ùå*");
    }
    break;
}

case 'marcar2':
try {
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)  
if(q.includes(`${prefix}`)) return reply("N√£o pode utilizar comandos nesse comando.")
members_id = []
teks = (args.length > 1) ? body.slice(8).trim() : ''
teks += ''
for (let mem of groupMembers) {
teks += `‚ï†‚û• @${mem.id.split('@')[0]}\n`
members_id.push(mem.id)
}
reply(teks)
} catch {
reply('Erro ao mencionar.')
}
break

case 'marcarwa':
try {
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)  
if(q.includes(`${prefix}`)) return reply("N√£o pode utilizar comandos nesse comando")
members_id = []
teks = (args.length > 1) ? body.slice(10).trim() : ''
teks += ''
for (let mem of groupMembers) {
teks += `‚ï†‚û• https://wa.me/${mem.id.split('@')[0]}\n`
members_id.push(mem.id)
}
sandro.sendMessage(from, {text: teks}, {quoted: selo})
} catch {
reply('Erro ao mencionar.')
}
break

case 'reviverqr':
if(!SoDono && !isnit) return 
exec(`cd ${folderUserAuth} && rm -rf pre-key* sender* session*`)
setTimeout(async () => {
reply("Reiniciando..")
setTimeout(async () => {
process.exit()
}, 1200)
}, 1000)
break

case 'ptvmsg':
if (!isQuotedVideo && !info.message.videoMessage) {
return reply('Marque um v√≠deo/gif que voc√™ deseja converter para mensagem de v√≠deo.')}
sandro.relayMessage(from, {ptvMessage: isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage }, {})
break

case 'reviver':
if(!isGroup) return reply(enviar.msg.grupo)
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Marque uma mensagem do alvo!')
sleep(5000)
response2 = await sandro.groupParticipantsUpdate(from, [menc_prt], "add" )
reply('Usuario adicionado de volta ao grupo.')
break

case 'saibot':
case 'saigp':
case 'sairgp':
if(!SoDono && !isnit) return reply("‚öíÔ∏è S√≥ o dono pode executar este comando.")
reply(`Ok ${pushname} 

Ol√°, pessoal! Estou saindo do grupo, pois o aluguel venceu. Caso algu√©m queira fazer uma nova contrata√ß√£o, √© s√≥ chamar no privado. Agrade√ßo a todos e at√© mais!`)
await delay(1000)
try {
await sandro.groupLeave(from)
} catch(e) {
console.log(e)
reply(`Erro`)
}
break

 
case 'seradm':
if(!SoDono && !isnit) return reply("‚öíÔ∏è S√≥ o dono pode executar este comando.")
await sleep(1000)
mentions(`@${sender.split("@")[0]} Pronto - Agora voc√™ √© um administrador...`, [sender], true)
sandro.groupParticipantsUpdate(from, [sender], "promote")
break

case 'sermembro':
if(!SoDono && !isnit) return reply("‚öíÔ∏è S√≥ o dono pode executar este comando.")
await sleep(1000)
mentions(`@${sender.split("@")[0]} Pronto - Agora voc√™ √© um membro comum novamente..`, [sender], true)
sandro.groupParticipantsUpdate(from, [sender], "demote")
break

case 'advertir':
case 'adverter': 
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(menc_os2 == botNumber) return reply("N√£o pode advertir o pr√≥prio bot.");
if(menc_os2 == nmrdn) return reply("N√£o pode advertir o pr√≥prio dono do bot.");
if(groupAdmins.includes(menc_os2)) return reply("N√£o √© poss√≠vel advertir adminstrador do grupo.");
if(!JSON.stringify(groupMembers).includes(menc_os2)) return reply("N√£o tem como advertir um usu√°rio que n√£o se encontra mais no grupo.")
ADVT.push(menc_os2); setGp(dataGp)  
setTimeout(async() => {
var dfqn = ADVT.filter(x => x == menc_os2).length
var dfntxt = mess.warningAdvertencia(menc_os2, dfqn)
if(!dfntxt.includes("3/3")) {
if(!JSON.stringify(ADVT).includes(sender)) {
await sleep(1500); mentions(dfntxt, [menc_os2])
} else if(dfqn == 2) {
await sleep(1500); mentions(dfntxt, [menc_os2])
}} else {sandro.sendMessage(from, {text: mess.finishAdvertencia(menc_os2), mentions: [menc_os2]})
await sleep(1500)
sandro.groupParticipantsUpdate(from, [menc_os2], "remove")
var i = ADVT.indexOf(menc_os2); ADVT.splice(i, 3); setGp(dataGp)}}, 3000)
break

case 'rmadv':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!marc_tds) return reply("Voc√™ esqueceu de mencionar o alvo ap√≥s o comando.")
adv = dataGp[0].advertir.map(i => i).indexOf(marc_tds)
if(adv < 0) return reply("Este usu√°rio n√£o cont√©m nenhuma advert√™ncia no grupo.")
dataGp[0].advertir.splice(adv, 1)
setGp(dataGp)
reply("A advert√™ncia do usu√°rio neste grupo foi retirada com sucesso!")
break

//======‚â†(INFOS/EXECU√á√ÉO/DONO)‚â†=========\\

case 'sairdogp':
if(!SoDono)return reply(enviar.msg.donosmt)  
if(!q) return reply(`Voc√™ deve visualizar o comando ${prefix}listagp e olhar de qual o grupo quer sair, e veja a numera√ß√£o dele, e s√≥ digitar\nExemplo: ${prefix}sairdogp 0\nesse comando √© para o bot sair do grupo que deseja..`)
var getGroups = await sandro.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
try {
sandro.sendMessage(ingfoo[q].id, {text: "Irei sair do grupo, por ordem do meu dono, adeus..."}) 
setTimeout(() => {
sandro.groupLeave(ingfoo[q].id)
}, 5000)
} catch(erro) {
reply(String(erro))
}
reply("Pronto meu dono, sair do grupo que voc√™ queria, em caso de d√∫vidas acione o comando listagp pra verificar..")
break

case "aptoide":
if(!q.trim()) return reply("Exemplo: WhatsApp")
try {
abc = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/aptoide_pesquisa?pesquisa=${q.trim()}&apikey=${API_SANDRO_MD}`)
reply(abc.aptoide)
} catch (e) {
console.log(e)
return reply("Erro...")
}
break;

case "aptoidelink":
if(!q.trim().includes("aptoide.com")) return reply(`Exemplo: ${prefix+command} link do aptoide.`)
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
try {
abc = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/aptoide?url=${q.trim()}&apikey=${API_SANDRO_MD}`)
sandro.sendMessage(from, {document: {url: abc.link}, mimetype: "application/vnd.android.package-archive", fileName: abc.titulo}, {quoted: info}).catch((e) => console.log(e))
} catch (e) {
console.log(e)
return reply("Erro...")
}
break;

case 'listagp':
if(!SoDono && !isnit && !info.key.fromMe) return reply('```SOMENTE MEU DONO LIND√ÉO```')
var getGroups = await sandro.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
ingfoo.sort((a, b) => (a[0] < b.length))
teks1 = `LISTA DE GRUPOS / COMUNIDADES\n*Total de Grupos:* ${ingfoo.length}\n-\n`
for (let i = 0; i < ingfoo.length; i++){
var metadt = await sandro.groupMetadata(ingfoo[i].id) 
try {
var linkdogp = await sandro.groupInviteCode(ingfoo[i].id)
} catch {
var linkdogp = "N√£o foi possivel puxar o link."
}
teks1 += `( ${i} ) - Nome do Grupo: ${ingfoo[i].subject}\nID: ${ingfoo[i].id}\nLink do Grupo: https://chat.whatsapp.com/${linkdogp}\nCriado por: ${metadt.subjectOwner}\nCriado em: ${moment(`${ingfoo[i].creation}` * 1000).tz('America/Sao_Paulo').format('DD/MM/YYYY HH:mm:ss')}\nTotal de Participantes: ${ingfoo[i].participants.length}\n-\n`
}
reply(teks1)
break

case 'data_saida':
    if (!SoDono && !isnit && !info.key.fromMe) return reply('```SOMENTE MEU DONO LIND√ÉO```');

    // Verifica se o usu√°rio enviou a mensagem com a data
    if (!args.length) return reply('Voc√™ precisa fornecer a data de sa√≠da. Exemplo: !data_saida 15/11/2024');

    // Obtemos a data que o usu√°rio informou
    const dataSaida = args.join(' ');  // Une os argumentos em uma string
    const dataAtual = moment().tz('America/Sao_Paulo').format('DD/MM/YYYY');

    // Verifica se a data informada √© v√°lida
    if (!moment(dataSaida, 'DD/MM/YYYY', true).isValid()) {
        return reply('Data inv√°lida. Use o formato DD/MM/YYYY.');
    }

    // Define o aviso de sa√≠da
    const avisoSaida = `O usu√°rio ${info.key.fromMe ? 'voc√™' : info.pushName} deve sair do grupo em: ${dataSaida}.`;

    // Aqui voc√™ pode salvar essa informa√ß√£o em um banco de dados ou vari√°vel para refer√™ncia futura
    // Exemplo: Salvar em um arquivo ou banco de dados
    // database.set(info.key.remoteJid, { dataSaida: dataSaida });

    reply(avisoSaida);
    break;
    
case 'atividade':
case 'atividades':
try{
if(!isGroupAdmins && !issupre && !ischyt) return reply(enviar.msg.adm)
if(isGroup && JSON.stringify(countMessage).includes(from)) {
var i6 = countMessage.map(i => i.groupId).indexOf(from)
if(countMessage[i6].numbers.length == 0) return
teks = `*Atividade dos membros do grupo:*\n‚Äì\n`
for(i = 0; i < countMessage[i6].numbers.length; i++) {
var i8 = countMessage[i6].numbers.map(i => i.id).indexOf(countMessage[i6].numbers[i].id)  
var uscnt = countMessage[i6].numbers[i]
teks += `‚Ä¢ Participante: *@${uscnt.id.split('@')[0]}*\n‚Ä¢ Quantidade de comandos usados pelo(a) participante no grupo: *${uscnt.cmd_messages}*\n‚Ä¢ Quantidade de mensagens enviadas pelo(a) participante: *${uscnt.messages}*\n‚Ä¢ O participante no momento est√° conectado em: *${uscnt.aparelho}*\n‚Ä¢ Quantidade de figurinhas enviadas no grupo: *${uscnt.figus}*\n‚Äì\n`
}
mention(teks)
} else return reply('*Nada foi encontrado*')
} catch (e){
console.log(e)
}
break

case 'inativos':
case 'inativo':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(q.match(/[a-z]/i) || !q) return reply(`Exemplo: ${prefix+command} 0\nIsso mostrar√° quantas pessoas tem 0 mensagens no grupo, e se usar 5, vai mostrar quantos usu√°rios tem 5 mensagens ou menos..`)
await ClearMembersInactive()
var i2 = countMessage?.map(x => x.groupId)?.indexOf(from)
blue = []; for (i of countMessage[i2].numbers) {
if(i.messages <= q.trim())
if(i.figus <= q.trim())
if(i.cmd_messages <= q.trim())
if(!groupAdmins.includes(i.id))
if(!numerodono.includes(i.id))
if(i.id != botNumber)
if(groupMembers.map(i => i.id).includes(i.id))
blue.push(i.id)}; for ( i of countMessage[i2].numbers) {
if(!groupMembers.map(i => i.id).includes(i.id))
if(i.id.length > 5)
blue.push(i.id)}
if(blue.length == 0) return reply(`N√£o tem pessoas com ${q} mensagens..`)
bli = `Usu√°rios com *${q.trim()}* mensagem(ns) pra baixo est√£o listados abaixo, verifique:\n‚Äì\n`
for (ac = 0; ac < blue.length; ac++) {
bli += `*${ac+1}.* @${blue[ac].split("@")[0]}\n`
}
mention(bli)
break

case 'banghost':
if(!isGroup) return reply(enviar.msg.grupo)  
if(!SoDono) return reply(enviar.msg.donosmt)
if(q.match(/[a-z]/i) || !q || q.length > 3) return reply(`Digite a partir de quantas mensagens pra baixo voc√™ deseja remover (que n√£o interaje no grupo).\nExemplo: ${prefix+command} 0`)
var i2 = countMessage?.map(x => x.groupId)?.indexOf(from)
blue = []; for (i of countMessage[i2].numbers) {
if(i.messages <= Number(q.trim()))
if(i.figus <= Number(q.trim()))
if(i.cmd_messages <= Number(q.trim()))
if(!groupAdmins.includes(i.id))
if(!numerodono.includes(i.id))
if(i.id != botNumber)
if(groupMembers.map(i => i.id).includes(i.id))
blue.push(i.id)}; for ( i of countMessage[i2].numbers) {
if(!groupMembers.map(i => i.id).includes(i.id))
if(i.id.length > 5)
blue.push(i.id)}
if(blue.length == 0) return reply(`N√£o tem mais pessoas com ${q.trim()} mensagem(ns) para eu remover..`)
for ( i = 0; i < blue.length; i++) {
await sleep(1000)
sandro.groupParticipantsUpdate(from, [blue[i]], "remove")}
break

case 'correio':
txt = args.join(" ")
if(!txt) return reply(mess.syntaxAnonymousMail(prefix))
let txt1 = txt.split("/")[0].replace(/\D/g,'');
let txt2 = txt.split("/")[1];
if(!txt1) return reply('*Cad√™ o n√∫mero do destinat√°rio?*')
if(!txt2) return reply('*Cad√™ a mensagem para ser enviada ao destinat√°rio?*')
let [result] = await sandro.onWhatsApp(txt1)
if(!result) return reply(`O n√∫mero fornecido est√° indispon√≠vel no WhatsApp! Verifique por favor.`)
setTimeout(() => {reagir(from, "üíåÔ∏è")}, 50)
reply(mess.sucessAnonymousMail())
sandro.sendMessage(result.jid, {text: mess.anonymousMail(txt2)}).catch((error) => {
return reply("Error ao encaminhar a mensagem, tente novamente mais tarde!")
})
break

case 'foto-bot': case 'foto-menu':
    if (!SoDono && !isnit && !info.key.fromMe) return reply(enviar.msg.donosmt);

    // Verificar se o valor fornecido √© um link v√°lido
    const linkRegex = /^(https?:\/\/[^\s$.?#].[^\s]*)$/; // Regex para validar links
    if (!linkRegex.test(q.trim())) {
        return reply(`‚ùå Apenas links s√£o permitidos! Por favor, envie um URL v√°lido.`);
    }

    // Atualizar o valor de NickDono no objeto settings
    setting.fotobot = q.trim();

    // Salvar as configura√ß√µes no arquivo settings.json
    try {
        fs.writeFileSync('./settings/settings.json', JSON.stringify(setting, null, 2));
        reply(`‚úÖ A foto do bot foi alterada com sucesso para: ${q}
        
        ‚ö†Ô∏è PARA QUE TODAS AS CONFIGURA√á√ïES SEJAM APLICADAS CORRETAMENTE, REINICIE O BOT!!!`);
    } catch (error) {
        reply(`‚ùå Erro ao salvar as configura√ß√µes: ${error.message}`);
    }
    break;
    
case 'numero-dono':
    if (!SoDono && !isnit && !info.key.fromMe) return reply(enviar.msg.donosmt); 

    // Atualizar o valor de NickDono no objeto settings
    setting.numerodono = q.trim();

    // Salvar as configura√ß√µes no arquivo settings.json
    try {
        fs.writeFileSync('./settings/settings.json', JSON.stringify(setting, null, 2));
        reply(`O n√∫mero dono foi configurado com sucesso para: ${q}
        
        PARA QUE TODAS AS CONFIGURA√á√ïES SEJA APLICADA CORRETAMENTE REINICIE O BOT!!!`);
    } catch (error) {
        reply(`Erro ao salvar as configura√ß√µes: ${error.message}`);
    }
    break;
    
case 'prefixo-bot': case 'setprefix':
    if (!SoDono && !isnit && !info.key.fromMe) return reply(enviar.msg.donosmt); 

    // Atualizar o valor de NickDono no objeto settings
    setting.prefix = q.trim();

    // Salvar as configura√ß√µes no arquivo settings.json
    try {
        fs.writeFileSync('./settings/settings.json', JSON.stringify(setting, null, 2));
        reply(`O prefixo foi alterado com sucesso para: ${setting.prefix}
        
        PARA QUE TODAS AS CONFIGURA√á√ïES SEJA APLICADA CORRETAMENTE REINICIE O BOT!!!`);
    } catch (error) {
        reply(`Erro ao salvar as configura√ß√µes: ${error.message}`);
    }
    break;
    
    
case 'nome-bot':
    if (!SoDono && !isnit && !info.key.fromMe) return reply(enviar.msg.donosmt); 

    // Atualizar o valor de NickDono no objeto settings
    setting.NomeDoBot = q.trim();

    // Salvar as configura√ß√µes no arquivo settings.json
    try {
        fs.writeFileSync('./settings/settings.json', JSON.stringify(setting, null, 2));
        reply(`O nome do bot foi configurado para: ${q}
        
        PARA QUE TODAS AS CONFIGURA√á√ïES SEJA APLICADA CORRETAMENTE REINICIE O BOT!!!`);
    } catch (error) {
        reply(`Erro ao salvar as configura√ß√µes: ${error.message}`);
    }
    break;
    
case 'channel':
    if (!SoDono && !isnit && !info.key.fromMe) return reply(enviar.msg.donosmt); 

    // Atualizar o valor de NickDono no objeto settings
    setting.channel = q.trim();

    // Salvar as configura√ß√µes no arquivo settings.json
    try {
        fs.writeFileSync('./settings/settings.json', JSON.stringify(setting, null, 2));
        reply(`O channel foi mudado para: ${q}
        
        PARA QUE TODAS AS CONFIGURA√á√ïES SEJA APLICADA CORRETAMENTE REINICIE O BOT!!!`);
    } catch (error) {
        reply(`Erro ao salvar as configura√ß√µes: ${error.message}`);
    }
    break;
    
case 'nome-bot':
    if (!SoDono && !isnit && !info.key.fromMe) return reply(enviar.msg.donosmt); 

    // Atualizar o valor de NickDono no objeto settings
    setting.NomeDoBot = q.trim();

    // Salvar as configura√ß√µes no arquivo settings.json
    try {
        fs.writeFileSync('./settings/settings.json', JSON.stringify(setting, null, 2));
        reply(`O nome do bot foi configurado para: ${q}
        
        PARA QUE TODAS AS CONFIGURA√á√ïES SEJA APLICADA CORRETAMENTE REINICIE O BOT!!!`);
    } catch (error) {
        reply(`Erro ao salvar as configura√ß√µes: ${error.message}`);
    }
    break;


case 'nick-dono':
    if (!SoDono && !isnit && !info.key.fromMe) return reply(enviar.msg.donosmt); 

    // Atualizar o valor de NickDono no objeto settings
    setting.NickDono = q.trim();

    // Salvar as configura√ß√µes no arquivo settings.json
    try {
        fs.writeFileSync('./settings/settings.json', JSON.stringify(setting, null, 2));
        reply(`O nick do dono foi configurado para: ${q}
        
        PARA QUE TODAS AS CONFIGURA√á√ïES SEJA APLICADA CORRETAMENTE REINICIE O BOT!!!`);
    } catch (error) {
        reply(`Erro ao salvar as configura√ß√µes: ${error.message}`);
    }
    break;

case 'fotomenu':
case 'fundomenu':
if(!SoDono) return reply(Res_SoDono)
if(!isQuotedImage) return reply("Marque uma imagem")
if((isMedia && !info.message.videoMessage || isQuotedImage) && !q.length <= 1) { 
reply(`- Calma ae amigo(a), j√° estou trocando a foto do menu para voc√™..`)
boij = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
owgi = await getFileBuffer(boij, 'image')
res = await upload(owgi)
fotobot.splice([])
fs.writeFileSync('./settings/logos.json', JSON.stringify(ftmenu, null, 2))
setTimeout(() => {
fotobot.push(res)
fs.writeFileSync('./settings/logos.json', JSON.stringify(ftmenu, null, 2))
reply(`A foto do menu foi alterada com sucesso para: ${fotobot}`)
}, 1200)
} else {
reply(`Mande uma imagem com o comando ${prefix + command} para trocar a foto de todos menu..`)
}
break

case 'privphotobot': {
if(!SoDono) return reply(enviar.msg.donosmt)
if (!q) return reply(mess.syntaxPrivatePhotoBot(prefix))
if (args[0] === 'all') {
reply(`- A minha foto do perfil agora est√° vis√≠vel √† todos.`)
await sandro.updateProfilePicturePrivacy('all')
} else if (args[0] === 'cntt') {
reply(`- A minha foto do perfil agora est√° vis√≠vel somente aos meus contatos.`)
await sandro.updateProfilePicturePrivacy('contacts')
} else if (args[0] === 'ngm') {
reply(`- A foto do meu perfil est√° privada a todos, at√© mesmo ao senhor mestre.`)
await sandro.updateProfilePicturePrivacy('none')
}
}
break

case 'privaddgroup': {
if(!SoDono) return reply(enviar.msg.donosmt)
if (!q) return reply(mess.syntaxPrivAddGroup(prefix))
if (args[0] === 'all') {
reply(`- Pronto, agora todos pode me adicionar em grupo normalmente.`)
await sandro.updateGroupsAddPrivacy(`all`)
} else if (args[0] === 'cntt') {
reply(`- Agora somente meus contatos, pode me adicionar em grupo.`)
await sandro.updateGroupsAddPrivacy(`contacts`)
} else if (args[0] === 'ngm') {
reply(`- Agora ningu√©m pode ousar me adicionar em grupo, pois ser√° negado.`)
await sandro.updateGroupsAddPrivacy('none')
}
}
break

case 'wallpaperanimes': {
data = fs.readFileSync('./arquivos/wallpapers/wallpaperanimes.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
sandro.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break


case 'wallpaperdark': {
data = fs.readFileSync('./arquivos/wallpapers/wallpaperdark.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
sandro.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapervermelho': {
data = fs.readFileSync('./arquivos/wallpapers/wallpapervermelho.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
sandro.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapers4k': {
data = fs.readFileSync('./arquivos/wallpapers/wallpapers4k.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
sandro.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'setprefix':
if(args.length < 1) return
if(!SoDono  && !isnit && !issupre && !ischyt && !info.key.fromMe) return reply(enviar.msg.donosmt)
prefix = args[0]
setting.prefix = prefix
fs.writeFileSync('./settings/settings.json', JSON.stringify(setting, null, 2))
reply(`O prefixo foi alterado com sucesso para: ${prefix}`)
break

case 'nomegp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
sandro.groupUpdateSubject(from, `${body.slice(9)}`)
sandro.sendMessage(from, {text: 'Sucesso, alterou o nome do grupo'}, {quoted: selo})
break

case 'envmsg':
if(!SoDono && !isnit) return
var [tx1, tx2] = q.split("/")
sandro.sendMessage(tx1, {text: tx2})
break

case 'bcgp':
case 'bcgc':  
if(!SoDono  && !isnit && !issupre && !ischyt && !info.key.fromMe) return reply(enviar.msg.donosmt)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!q) return reply('Cade o texto?')
var nomor = info.participant
if(isMedia && !info.message.videoMessage || isQuotedImage) {
encmedia = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage, 'image')
for (i = 0; i < groupMembers.length; i++) {
await sleep(2000)  
sandro.sendMessage(groupMembers[i].id, {image: buff}, {caption: `*„Äå TRANSMISS√ÉO „Äç*\n-\nGrupo: ${groupName}\n‚Ä¢ N√∫mero: wa.me/${sender.split('@')[0]}\n‚Ä¢ Mensagem: ${body.slice(6)}`})
}
reply('A transmiss√£o foi enviada com √™xito.')
} else {
for (i = 0; i < groupMembers.length; i++) {
await sleep(2000)
sendMess(groupMembers[i].id, `*„Äå TRANSMISS√ÉO „Äç*\n-\n‚Ä¢ Grupo: ${groupName}\n‚Ä¢ N√∫mero: wa.me/${sender.split('@')[0]}\n‚Ä¢ Mensagem: ${body.slice(6)}`)
}
reply('Grupo de transmiss√£o bem-sucedido.')
} 
break

case 'dono1':
if(args.length < 1) return
if(!SoDono  && !isnit && !issupre && !ischyt) return reply(enviar.msg.donosmt)
nescessario.numero_dono1 = q.trim()
dono1 = nescessario.numero_dono1
sets(nescessario)
reply(`Agora contem um segundo dono(a) alterado com sucesso para: ${q}`)
break

case 'dono2':
if(args.length < 1) return
if(!SoDono  && !isnit && !issupre && !ischyt) return reply(enviar.msg.donosmt)
nescessario.numero_dono2 = q.trim()
dono2 = nescessario.numero_dono2
sets(nescessario)
reply(`Agora contem um segundo dono(a) alterado com sucesso para: ${dono2}`)
break

case 'dono3':
if(args.length < 1) return
if(!SoDono  && !isnit && !issupre && !ischyt) return reply(enviar.msg.donosmt)
nescessario.numero_dono3 = q.trim()
dono3 = nescessario.numero_dono3
ses(nescessario)
reply(`Agora contem um terceiro dono(a) alterado com sucesso para: ${dono3}`)
break

case 'dono4':
if(args.length < 1) return
if(!SoDono  && !isnit && !issupre && !ischyt) return reply(enviar.msg.donosmt)
nescessario.numero_dono4 = q.trim()
dono4 = nescessario.numero_dono4
setNes(nescessario)
reply(`Agora contem um quarto dono(a) alterado com sucesso para: ${dono4}`)
break

case 'dono5':
if(args.length < 1) return
if(!SoDono  && !isnit && !issupre && !ischyt) return reply(enviar.msg.donosmt)
nescessario.numero_dono5 = q.trim()
dono5 = nescessario.numero_dono5
setNes(nescessario)
reply(`Agora contem um quinto dono(a) alterado com sucesso para: ${dono5}`)
break

case 'dono6':
if(args.length < 1) return
if(!SoDono  && !isnit && !issupre && !ischyt) return reply(enviar.msg.donosmt)
nescessario.numero_dono6 = q.trim()
dono6 = nescessario.numero_dono6
setNes(nescessario)
reply(`Agora contem um quinto dono(a) alterado com sucesso para: ${dono6}`)
break

case 'getquoted':
reply(JSON.stringify(info.message.extendedTextMessage.contextInfo, null, 3))
break

case 'donos':
reply(mess.ownersList(NomeDoBot, numerodono_ofc, numero_dono1, numero_dono2, numero_dono3, numero_dono4, numero_dono5, numero_dono6))
break

case 'admins':
case 'listadmins':  
case 'listaadmins':   
if(!isGroup) return reply(enviar.msg.grupo)
ytb = `Lista de admins do grupo *${groupMetadata.subject}*\n*Total de Adminstradores:* ${groupAdmins.length}\n-\n`
no = 0
for (let admon of groupAdmins) {
no += 1
ytb += `( ${no.toString()} ) - @${admon.split('@')[0]}\n`
}
mentions(ytb, groupAdmins, true)
break

case 'ativo': 
case 'on': 
case 'voltei':
if(!isGroupAdmins && !SoDono) return reply("S√≥ adm ou dono pode utilizar este comando.")
if(DonoOficial) {
if(fs.existsSync("./database/func/afk/afk-@" + numerodono_ofc + ".json")) {  
DLT_FL("./database/func/afk/afk-@" + numerodono_ofc + ".json");
reply("Bem vindo de volta, agora voc√™ est√° online üôÇ")
} else {
reply("Voc√™ n√£o registrou nenhuma mensagem de aus√™ncia...")
}
} else if(isGroupAdmins) {
if(!JSON.stringify(dataGp[0].ausentes).includes(sender)) return reply("N√£o h√° nenhum registro de aus√™ncia sua..")
dataGp[0].ausentes.splice(dataGp[0].ausentes.map(x => x.id).indexOf(sender), 1)
setGp(dataGp)
reply("Registro de aus√™ncia tirada com sucesso...")
}
break

case 'ausente': 
case 'off': 
case 'afk':
if(!isGroupAdmins && !SoDono) return reply("S√≥ adm ou dono pode utilizar este comando.")
if(DonoOficial) {
msgtmp = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
fs.writeFileSync(`./database/func/afk/afk-@${setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "")}.json`,
JSON.stringify({
Ausente_Desde: msgtmp, 
Motivo_Da_Aus√™ncia: q
}, null, 2));
reply(`Mensagem de aus√™ncia criada com sucesso...`)
} else if(isGroupAdmins) {
if(!q.trim()) return reply(`Digite a mensagem de aus√™ncia, Exemplo: ${prefix+command} Estou tomando banho`)
if(!JSON.stringify(dataGp[0].ausentes).includes(sender)) {
dataGp[0].ausentes.push({id: sender, msg: q.trim()})
setGp(dataGp)
reply("Mensagem de aus√™ncia criada com sucesso..\nSe deseja desativar a mensagem de aus√™ncia use o comando ativo")
} else {
dataGp[0].ausentes[dataGp[0].ausentes.map(i => i.id).indexOf(sender)].msg = q.trim()
setGp(dataGp)
reply("Mensagem de aus√™ncia alterada com sucesso..\nSe deseja desativar a mensagem de aus√™ncia use o comando ativo")
}
} else {
return reply("Comando apenas para administradores e dono do bot..")
}
break

case 'addpremium': 
case 'addvip':
case 'addprem':
if(!SoDono) return reply(enviar.msg.donosmt)
barra = q.replace(" /", "/").replace("/ ", "/").replace(" / ", "/")
var [nmr, tempo50] = barra.split('/')
if(!nmr || !tempo50) return mention(`Voc√™ esqueceu de colocar o n√∫mero do indiv√≠duo e a quantidade de dias que o(a) usu√°rio(a) como premium.\n‚Ä¢ Segue o exemplo de uso correto do comando: *${prefix+command} @${nmrdn.split('@')[0]}/30*\n‚Äì‚Äì‚Äì\n‚Ä¢ Para colocar o usu√°rio sem dura√ß√£o de expira√ß√£o do premium, voc√™ usa o *0* como quantidade de dias.`)
usur = nmr.includes('@') ? nmr.split('@')[1] + "@s.whatsapp.net" : nmr + "@s.whatsapp.net"
mega = Number(tempo50) > 0 ? false : true
dvip = moment.tz('America/Sao_Paulo').format('DD')
bla = JSON.stringify(premium).includes(usur)
if(bla) {
AB = premium.map(i => i.id).indexOf(usur)
if(premium[AB].infinito == true) return reply(`N√£o √© poss√≠vel adicionar + dias ao usu√°rio, por motivos que ele cont√©m o premium infinito.`)
premium[AB].dias += Number(tempo50)
fs.writeFileSync('./database/usuarios/premium.json', JSON.stringify(premium))
sandro.sendMessage(from, {text: `${tempo50} dia${Number(tempo50) > 1 ? `s` : ``} fo${Number(tempo50) > 1 ? `ram` : `i`} adicionado${Number(tempo50) > 1 ? `s` : ``} ao usu√°rio @${usur.split("@")[0]}`, mentions: [usur]}, {quoted: info})
} else {
premium.push({id: usur, dias: Number(tempo50), save: Number(dvip), infinito: mega})
fs.writeFileSync('./database/usuarios/premium.json', JSON.stringify(premium))
sandro.sendMessage(from, {text: `${Number(tempo50) > 0 ? `@${usur.split("@")[0]} foi adicionado √† lista premium com sucesso!` : `@${usur.split("@")[0]} foi agraciado com o benef√≠cio do premium infinito!`}`, mentions: [usur]}, {quoted: info})
}
break

case 'delpremium':
case 'delvip':
case 'delprem':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!marc_tds) return reply(`Marque o usu√°rio que deseja remover da lista premium.Ô∏è`)
if(!JSON.stringify(premium).includes(marc_tds)) return reply("Este n√∫mero n√£o est√° incluso atualmente na lista de usu√°rios premium(ns)..")
AB = premium.map(i => i.id).indexOf(marc_tds)
premium.splice(AB, 1)
fs.writeFileSync('./database/usuarios/premium.json', JSON.stringify(premium))
sandro.sendMessage(from, {text: `@${marc_tds.split("@")[0]} foi removido da lista premium com sucesso!`, mentions: [marc_tds]}, {quoted: info})
break

case 'premiumlist':
if(premium.length == 0) return reply(`Existe *0* user(s) premium(ns), ou seja, n√£o existe ningu√©m.`)
tkks = `[Total: *${premium.length}*] - Lista de usu√°rio(s) premium tempor√°rio(s)/infinito(s):\n‚Äì\n`
tkks += premium.map((v, index) =>  `*[${index+1}]* - Usu√°rio: @${v.id.split('@')[0]}\n‚Ä¢ Expira√ß√£o: ${v.infinito == false ? `*O premium do usu√°rio expira em ${v.dias} dia${v.dias > 1 ? `s` : ``}.*` : `*N√£o existe um dia de expira√ß√£o do premium do usu√°rio.*`}`).join('\n‚Äì‚Äì\n')
mention(tkks)
break

case 'limpar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
sandro.sendMessage(from, {text: clear}, {quoted: selo, contextInfo : { forwardingScore: 500, isForwarded:true}})
break

case 'd_':
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.message.buttonsResponseMessage.contextInfo.stanzaId, participant: botNumber}})
break

case 'doc':
case 'docfake':
try {
sprd = "|"
if(!q) return reply(`${prefix + command} exemplo${sprd}500${sprd}apk\n-\nOs tipos aceitos por enquanto s√£o: pdf > xml > zip > jpg > ppt > apk > txt > aac > pptx > aac > m4a > mp4 > mp3 > svg > png`)
kls = args.join(' ')
let nomedoc = kls.split(sprd)[0] || `${setting.NomeDoBot}`
let peso = kls.split(sprd)[1] * 1000000 || '1000000'
let mimetyp = kls.split(sprd)[2].replace(" ", "") || 'gif'
let thumbc = kls.split(sprd)[3] || 'https://google.com/'
if(mimetyp.toLowerCase() == 'pdf') mimetyp = 'application/pdf'
if(mimetyp.toLowerCase() == 'apk') mimetyp = 'application/vnd.android.package-archive'
if(mimetyp.toLowerCase() == 'aac') mimetyp = 'audio/aac'
if(mimetyp.toLowerCase() == 'xml') mimetyp = 'application/xml'
if(mimetyp.toLowerCase() == 'zip') mimetyp = 'application/zip'
if(mimetyp.toLowerCase() == 'jpg') mimetyp = 'image/jpeg'
if(mimetyp.toLowerCase() == 'ppt') mimetyp = 'application/vnd.ms-powerpoint'
if(mimetyp.toLowerCase() == 'pptx') mimetyp = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
if(mimetyp.toLowerCase() == 'mp4') mimetyp = 'video/mp4'
if(mimetyp.toLowerCase() == 'm4a') mimetyp = 'audio/mpeg'
if(mimetyp.toLowerCase() == 'mp3') mimetyp = 'audio/mpeg'
if(mimetyp.toLowerCase() == 'gif') mimetyp = 'image/gif'
if(mimetyp.toLowerCase() == 'png') mimetyp = 'image/png'
if(mimetyp.toLowerCase() == 'svg') mimetyp = 'image/svg+xml'
if(mimetyp.toLowerCase() == 'txt') mimetyp = 'text/plain'
let Messagemdoc = {document: fs.readFileSync('./database/data/docf.txt'), mimetype: mimetyp, jpegThumbnail: await getBuffer(thumbc), fileName: nomedoc, fileLength: peso, headerType: 4, contextInfo:{forwardingScore:999,isForwarded:true}}
sandro.sendMessage(from, Messagemdoc, {quoted: selo})
} catch (err) {
console.log(err)
reply(`Ops ocorreu um erro`)
}
break

case 'temporizador-gp': 
case 'fgp': 
case 'fechar-gp': 
case 'tempogp': 
case 'tmpgp': 
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!q.includes("/") && !q.length <= 17) return reply(`*_üßôüèª‚Äç‚ôÇÔ∏èOl√°, voc√™ tem que determinar os 2 tempo para o bot fechar o grupo e abrir, por exemplo..._*\n*‚ùï${prefix}fechar-gp* 1m/2m\n\n_Ele fechar√° o grupo depois de um minuto, e depois abre ap√≥s 2 minutos..._`)
qtxt = args.join(" ").replace(" /", "/").replace("/ ", "/").replace("1m", "60000").replace("2m", "120000").replace("3m", "180000").replace("4m", "240000").replace("5m", "300000").replace("6m", "360000").replace("7m", "420000").replace("8m", "480000").replace("9m", "540000").replace("10m", "600000").replace("11m", "660000").replace("12m", "720000").replace("13m", "780000").replace("14m", "840000").replace("15m", "900000").replace("16m", "960000").replace("17m", "1020000").replace("18m", "1080000").replace("19m", "1140000").replace("20m", "1200000").replace("21m", "1260000").replace("22m", "1320000").replace("23m", "1380000").replace("24m", "1440000").replace("25m", "1500000").replace("26m", "1560000").replace("27m", "1620000").replace("28m", "1680000").replace("29m", "1740000").replace("30m", "1800000").replace("31m", "1860000").replace("32m", "1920000").replace("33m", "1980000").replace("34m", "2040000").replace("35m", "2100000").replace("36m", "2160000").replace("37m", "2220000").replace("38m", "2280000").replace("39m", "2340000").replace("40m", "2400000").replace("41m", "2460000").replace("42m", "2520000").replace("43m", "2580000").replace("44m", "2640000").replace("45m", "2700000").replace("46m", "2760000").replace("47m", "2820000").replace("48m", "2880000").replace("49m", "2940000").replace("50m", "3000000").replace("1h", "3600000").replace("2h", "7200000").replace("3h", "10800000").replace("4h", "14400000").replace("5h", "18000000").replace("6h", "21600000").replace("7h", "25200000").replace("8h", "28800000").replace("9h", "32400000").replace("10h", "36000000").replace("11h", "39600000").replace("12h", "43200000").replace("13h", "46800000").replace("14h", "50400000").replace("15h", "54000000").replace("16h", "57600000").replace("17h", "61200000").replace("18h", "64800000").replace("19h", "68400000").replace("20h", "72000000").replace("21h", "75600000").replace("22h", "79200000").replace("23h", "82800000").replace("24h", "86400000")
txt3 = qtxt.split("/")[0]
txt4 = qtxt.split("/")[1]
var fcgp = {tempo1: txt3, tempo2: txt4, grupo: from}
if(!fs.existsSync(`./database/func/fechar-abrir-gp-${from}.json`)) {
fs.writeFileSync(`./database/func/fechar-abrir-gp-${from}.json`,
JSON.stringify(fcgp, null, 2));
} else {
if (fs.existsSync("./database/func/fechar-abrir-gp-" + from + ".json")) {
fs.unlinkSync("./database/func/fechar-abrir-gp-" + from + ".json");
fs.writeFileSync(`./database/func/fechar-abrir-gp-${from}.json`,
JSON.stringify(fcgp, null, 2));
}
}
reply(`*_üßôüèª‚Äç‚ôÇÔ∏è Tempo de fechar o grupo e abrir em tal hor√°rio foi programado com sucesso..._*`)
await sleep(1000)
reagir(from, "‚åõ")
const tempodttl = JSON.parse(fs.readFileSync(`./database/func/fechar-abrir-gp-${from}.json`)); 
setTimeout(async () => {
reagir(from, "üî¥")
await sleep(1000)
reply("*_üßôüèª‚Äç‚ôÇÔ∏è Grupo fechado com sucesso no hor√°rio programado..._*")
await sandro.groupSettingUpdate(from, 'announcement')  
}, `${tempodttl.tempo1}`)
setTimeout(async () => {
reagir(from, "üü¢")
await sleep(1000)
reply("*_üßôüèª‚Äç‚ôÇÔ∏è Grupo aberto com sucesso no hor√°rio programado..._*")
await sandro.groupSettingUpdate(from, 'not_announcement')  
}, `${tempodttl.tempo2}`)
break

case 'deletar': 
case 'delete': 
case 'del':  
case 'd':
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!isPremium) return reply("somente membros vip!")
if(!menc_prt) return reply("Marque a mensagem do usu√°rio que deseja apagar, do bot ou de algu√©m.")
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.message.extendedTextMessage.contextInfo.stanzaId, participant: menc_prt}})
break

case 'fundobemvindo':
case 'fundobv':  
if(!SoDono && !isnit && !info.key.fromMe) return reply(Res_SoDono)
if(!isQuotedImage) return reply("Marque uma imagem..")
reply('Voc√™ deve marcar uma imagem com esse comando, se n√£o for de primeira, tente novamente, ok? ')
if((isMedia && !info.message.videoMessage || isQuotedImage || isQuotedVideo ) && !q.length <= 1) {
boij = isQuotedImage || isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info
owgi = await getFileBuffer(boij, 'image')
res = await upload(owgi)
fundo1 = res
logoslink.fundo1 = res
fs.writeFileSync("./settings/links_img.json", JSON.stringify(logoslink, null, 2));
reply(`A imagem de bem vindo foi alterado com sucesso para: ${fundo1}`)
}
break

case 'fundosaiu':
if(!SoDono && !isnit && !info.key.fromMe) return reply(Res_SoDono)
if(!isQuotedImage) return reply("Marque uma imagem..")
reply('Voc√™ deve marcar uma imagem com esse comando, se n√£o for de primeira, tente novamente, ok? ')
if((isMedia && !info.message.videoMessage || isQuotedImage || isQuotedVideo ) && !q.length <= 1) {
boij = isQuotedImage || isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info
owgi = await getFileBuffer(boij, 'image')
res = await upload(owgi)
fundo2 = res
logoslink.fundo2 = res
fs.writeFileSync("./settings/links_img.json", JSON.stringify(logoslink, null, 2));
reply(`A imagem de saiu foi alterado com sucesso para: ${fundo2}`)
}
break

case 'antiligar':
case 'antiligacao':  
case 'antiliga√ß√£o':  
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isAnticall) {
nescessario.anticall = true
setNes(nescessario)
reply(`O anti liga√ß√£o foi ativado com sucesso. Caso algu√©m efetue uma liga√ß√£o para o bot ser√° bloqueado.`)
} else if(isAnticall) {
nescessario.anticall = false
setNes(nescessario)
reply('O anti liga√ß√£o foi desativado com sucesso.')
}
break

case 'antipv':  
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isAntiPv) {
nescessario.antipv = true
setNes(nescessario)
reply(`Antipv ativado com sucesso, caso algu√©m enviar mensagem para mim, irei bloquear!`)
} else if(isAntiPv) {
nescessario.antipv = false
setNes(nescessario)
reply('A fun√ß√£o antipv foi desabilitada com sucesso, agora todos podem me usar no pv.')
}
break

case 'antipv3':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isAntiPv3) {
nescessario.antipv3 = true
setNes(nescessario)
reply("Antipv3 ativado com sucesso, irei ignorar todas as mensagens recebidas no pv, exceto: donos e usu√°rios premium..")
} else if(isAntiPv3) {
nescessario.antipv3 = false
setNes(nescessario)
reply("Antipv3 desativado com sucesso, agora responderei todos sem prefer√™ncia!")
}
break

case 'limitarcmd': 
case 'limitarcomando': 
case 'limitecmd':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
dataGp[0].Limitar_CMD = !dataGp[0].Limitar_CMD
setGp(dataGp);
reply(dataGp[0]?.Limitar_CMD ? "Limitador de comandos ativado com sucesso no grupo: "+groupName : "Limitador de comandos desativado no grupo: "+groupName)
break;

case 'tempocmd':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!q.trim()) return reply(`Exemplo: ${prefix+command} 120\n60 = 1 minuto\nExemplo que coloquei, com o : ${prefix}limitarcmd ativo, s√≥ podera usar comandos a cada 2 minutos\nBoa sorte.`)
dataGp[0].Limit_tempo = q.trim()
setGp(dataGp)
reply(`Tempo limite definido para: ${TimeCount(q.trim())} a cada comando.`)
break;

case 'lyrics':
if(!q) return reply(`Voc√™ esqueceu de colocar ap√≥s o comando o nome da m√∫sica...`);
try {
data = await fetchJson(`https://yurimodz-apis.xyz/api/search/lyrics?query=${q}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {text: mess.lyrics(data, II), contextInfo: {externalAdReply: {title: data.resultado.name, body: data.resultado.description, thumbnail: await getBuffer(data.resultado.image), mediaType: 2, sourceUrl: data.resultado.url}}}, {quoted: info});
} catch(error) {
return reply(mess.error())
};
break;

case 'block':
if(!SoDono  && !isnit && !issupre && !ischyt && !info.key.fromMe) return reply(enviar.msg.donosmt)
if(!q.length > 6) return reply("Marque o @ do usu√°rio que deseja bloquear de ele utilizar os comandos, ou o n√∫mero da f√≥rma que copiar...")
var blcp = q.replace(new RegExp("[()+-/ @+/]", "gi"), "")+"@s.whatsapp.net"
var numblc = ban.indexOf(blcp)
if(numblc >= 0) return reply('*Esse n√∫mero j√° esta incluso na lista de bloqueio.*')
ban.push(blcp)
fs.writeFileSync('./database/usuarios/banned.json', JSON.stringify(ban))
sandro.sendMessage(from, {text: mess.bannedMessage(blcp), mentions: [blcp]})
break

case 'unblock':
if(!SoDono  && !isnit && !issupre && !ischyt && !info.key.fromMe) return reply(enviar.msg.donosmt)
if(!q.length > 6) return reply("Marque o @ do usu√°rio que deseja desbloquear pra ele utilizar os comandos, ou o n√∫mero da f√≥rma que copiar...")
var blcp = q.replace(new RegExp("[()+-/ @+/]", "gi"), "")+"@s.whatsapp.net"
var numbl = ban.indexOf(blcp)
if(numbl < 0) return reply('*Esse n√∫mero n√£o est√° incluso na lista de bloqueados.*')
pesquisar = blcp
processo = ban.indexOf(pesquisar)
while(processo >= 0){
ban.splice(processo, 1)
processo = ban.indexOf(pesquisar)
}
fs.writeFileSync('./database/usuarios/banned.json', JSON.stringify(ban))
sandro.sendMessage(from, {text: mess.unbannedMessage(blcp), mentions: [blcp]})
break


case 'acess':
if(!SoDono && !isnit && !issupre && !ischyt) return reply(enviar.msg.donosmt)
teks = body.slice(7)
exec(teks, (err, stdout) => {
if(err) return sandro.sendMessage(from, {text: `sandromdOfc:~ ${err}`}, {quoted: selo})
if(stdout) {
sandro.sendMessage(from, {text: stdout})
}
})
break

case 'execut':
if(!SoDono  && !isnit && !issupre && !ischyt) return reply(enviar.msg.donosmt)
try{
return eval(`(async() => { ${args.join(' ')}})()`)
} catch (e) {
sandro.sendMessage(from, {text:`${e}`})
}
break

case 'exec':
if(!SoDono  && !isnit && !issupre && !ischyt) return
try{
paramsQuoted = info.message.extendedTextMessage.contextInfo.quotedMessage.conversation || info.message.extendedTextMessage.contextInfo.quotedMessage.extendedTextMessage.text;	
return eval(`${paramsQuoted}`)
console.log(`[EXEC]~> ${paramsQuoted}`)
}catch(e){
reply(e)
}
break

case 'sender':
bla = isGroup ? info.key.participant : info.key.remoteJid
reply(bla)
break

case 'totalcmd2': 
case 'totalcmd':
case 'totalcomando':{ 
if(!SoDono) return reply(enviar.msg.donosmt)
fs.readFile('./sandro.js', 'utf8', (err, data) => { 
 if (err) throw err;
 let regex = /case\s'(\w+)'/g;
 let match;
 let caseNames = [];
 while ((match = regex.exec(data)) !== null) {
 caseNames.push(match[1]);
 }
 let output = '' + caseNames.join('\n‚Ä¢ ');
 let totalCount = caseNames.length;
reply(`*Ola ${pushname}*

_EU TENHO UM TOTAL DE: ${totalCount} COMANDOS‚úÖ_`);
});
}
break


case 'instagram':
try {
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
if(q.length < 5) return reply(`Exemplo: ${prefix+command} o link`);
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/instagram?url=${q.trim()}&apikey=${API_SANDRO_MD}`)
let DM_T = ABC.msg[0].type
var A_T = DM_T === "mp4" ? "video/mp4" : DM_T === "webp" ? "image/webp" : DM_T === "jpg" ? "image/jpeg" : DM_T === "mp3" ? "audio/mpeg" : "video/mp4"
sandro.sendMessage(from, {[A_T.split("/")[0]]: {url: ABC.msg[0].url}, mimetype: A_T}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

case 'instaaudio':
try {
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
if(!q.trim()) return reply(`Exemplo: ${prefix+command} o link`);
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/instagram?url=${q.trim()}&apikey=${API_SANDRO_MD}`)
let DM_T = ABC.msg[0].type
var A_T = DM_T === "webp" ? "image/webp" : DM_T === "jpg" ? "image/jpeg" : DM_T === "mp3" ? "audio/mpeg" : "audio/mpeg"
sandro.sendMessage(from, {[A_T.split("/")[0]]: {url: ABC.msg[0].url}, mimetype: A_T}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

case 'ping2':
sendMsg = await sandro.sendMessage(from, {react: {text: `,üß∏`, key: info.key}})
r = (Date.now() / 1000) - info.messageTimestamp
uptime = process.uptime()
hora1 = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
bla = `*Hora:${hora1}*
*Velocidade: ${String(r.toFixed(3))}*
*Tempo Ativo: ${kyun(uptime)}*
`
await sandro.sendMessage(from, {text: bla}, {quoted: info})
break

case 'ping': {
reagir(from, "üèÉüèª")
await sleep(1000)
r = (Date.now() / 1000) - info.messageTimestamp
uptime = process.uptime()
hora1 = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
respon = `‚è±Ô∏è *Velocidade de Resposta:* ${String(r.toFixed(3))} _segundos._\nü§ñ *O bot se encontra online por:* ${kyun(uptime)}\nüíª *Sistema Operacional:* ${infoSystem.type()}\nüìÇ *Vers√£o:* ${infoSystem.release()}\nüíæ *Memoria RAM total:* ${(infoSystem.totalmem()/Math.pow(1024, 3)).toFixed(2)}GB\nüíæ *Memoria RAM dispon√≠vel:* ${(infoSystem.freemem()/Math.pow(1024, 3)).toFixed(2)}GB`.trim()
await sandro.sendMessage(from, { image: { url: `https://eruakorl.sirv.com/Bot%20dudinha/ping.jpeg?text.0.text=VELOCIDADE%20DO%20SANDRO&text.0.position.gravity=north&text.0.position.y=15%25&text.0.size=40&text.0.font.family=Teko&text.0.font.weight=800&text.0.background.opacity=100&text.0.outline.blur=100&text.1.text=${String(r.toFixed(3))}&text.1.position.gravity=center&text.1.size=30&text.1.color=ffffff&text.1.font.family=Teko&text.1.font.weight=800&text.1.background.opacity=100&text.1.outline.blur=100` }, caption: respon, mentions: [sender]}, {quoted: info}) 
}
break                 

case 'gtts':
case 'falar':
case 'fala':
try {
if (args.length < 1) return sandro.sendMessage(from,{text: `Cade o texto?, digite algo Exemplo:\n${prefix}gtts PT Oi`}, {quoted: selo})
const gtts = require('./arquivos/funcoes/gtts')(args[0])
if (args.length < 2) return sandro.sendMessage(from, {text: 'Falta colocar o c√≥digo do idioma!'}, {quoted: selo})
dtt = body.slice(8)
ranm = getRandom('.mp3')
rano = getRandom('.ogg')
if(dtt.length > 200) return reply('Para reduzir spam o m√°ximo de letras permitidas s√£o 200!')
gtts.save(ranm, dtt, function() {
exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
sandro.sendMessage(from, {audio: fs.readFileSync(ranm), ptt:true, mimetype: "audio/mpeg"}, {quoted: selo}).catch(e => {
return reply(mess.error())
})
DLT_FL(ranm)
DLT_FL(rano)
})
})
} catch {
return reply(mess.error())
}
break

case 'tagme':
const tagme = `@${sender.split("@")[0]}`
await mentions(tagme, [sender], true)
break

case 'modoaluguel': 
case 'aluguel': 
case 'modorent':
if(!isGroup) return reply(enviar.msg.grupo)
if(!SoDono) return reply(enviar.msg.donomt)
if(args.length < 1) return reply('1 para ativar, 0 para desativar este recurso.')
if(Number(args[0]) === 1) {
if(isModoAluguel) return reply('O modo aluguel j√° est√° ativado neste grupo.')
dataGp[0].aluguel = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de modo aluguel no grupo...')
} else if(Number(args[0]) === 0) {
if(!isModoAluguel) return reply('O modo aluguel n√£o est√° ativo no grupo atualmente.')
dataGp[0].aluguel = false
setGp(dataGp)
reply('Modo aluguel desativado, _agora o grupo pode usar meus comandos sem restri√ß√µes._')
} else {
reply('1 para ativar, 0 para desativar este recurso.')
}
break

case 'addcmdprem':
if(!SoDono) return reply(enviar.msg.donosmt)
tp = args.join(" ")
if(tp.includes("addcmdprem addcmdprem") || (tp.includes("addcmdprem  addcmdprem"))) return reply(`T√° louco maluco? N√£o tem como adicionar o mesmo comando.`)
if(isCmdPremium.includes(args[0]))return reply('Este comando j√° est√° incluso na lista de comandos premium, verifique.')
isCmdPremium.push(args[0])
fs.writeFileSync('./settings/nescessario.json', JSON.stringify(nescessario, null, 2))
reply(`O comando *${args[0]}* foi adicionado na lista de comandos premium.`)
break

case 'delcmdprem':
if(!SoDono) return reply(enviar.msg.donosmt)
tp = args.join(" ")
if(tp.includes("delcmdprem delcmdprem") || (tp.includes("delcmdprem  delcmdprem"))) return reply(`T√° louco maluco? N√£o tem como deletar o mesmo comando.`)  
if(!isCmdPremium.includes(args[0]))return reply('Este comando j√° est√° exclu√≠do da lista de comandos premium.')
var i = isCmdPremium.indexOf(args[0])
isCmdPremium.splice(i, 1)
fs.writeFileSync('./settings/nescessario.json', JSON.stringify(nescessario, null, 2))
reply(`O comando *${args[0]}* foi tirado da lista de comandos premium.`)
break

case 'listacmdprem':
tkks = `[Total: *${isCmdPremium.length}*] - Comandos que foram adicionados para uso Premium:\n‚Äì\n`
tkks += isCmdPremium.map((v, index) =>  `\t‚Ä¢ [ *N¬∞ ${index+1}* ] - Comando: ${prefix+v}`).join('\n‚Äì\n')
sandro.sendMessage(from, {text: tkks.trim()}, {quoted: selo})
break

case 'blocklist':
if(ban.length == 0) return reply(`Existe *0* user(s) bloqueado(s), ou seja, n√£o existe ningu√©m.`)
tkks = `[Total: *${ban.length}*] - Lista de Usu√°rios bloqueados pelo julgamento do(s) donos(as):\n‚Äì\n`
tkks += ban.map((v, index) =>  `\t‚Ä¢ [ *N¬∞ ${index+1}* ] - Usu√°rio: @${v.split('@')[0]}`).join('\n‚Äì\n')
sandro.sendMessage(from, {text: tkks.trim(), mentions: ban}, {quoted: selo})
break

case 'blockcmdgp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
tp = args.join(" ")
if(tp.includes("blockcmd blockcmd") || (tp.includes("blockcmd  blockcmd"))) return reply(`T√° louco maluco?, Quer banir o comando de bloquear comando?`)
if(getComandoBlock(from).includes(args[0]))return reply('Este comando j√° est√° bloqueado.')
addComandos(from, args[0])
reply(`O comando *${args[0]}* foi bloqueado no grupo com sucesso.`)
break

case 'unblockcmdgp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
tp = args.join(" ")
if(tp.includes("blockcmd unblockcmd") || (tp.includes("blockcmd  unblockcmd"))) return reply(`T√° louco maluco?, Quer banir o comando de desbloquear comando?`)  
if(!getComandoBlock(from).includes(args[0]))return reply('Este comando j√° est√° desbloqueado.')
deleteComandos(from, args[0])
reply(`O comando *${args[0]}* foi desbloqueado com sucesso no grupo.`)
break

case 'listblockcmdgp': case 'listbcmdgp':
if(!isGroup) return reply(enviar.msg.grupo);
if(getComandoBlock(from).length == 0) return reply("N√£o existe ainda nenhum *comando bloqueado* neste grupo.");
tkks = `[Total: *${getComandoBlock(from).length}*] - Comandos bloqueados pelo adminstrador(s) do grupo:\n‚Äì\n`
tkks += getComandoBlock(from).map((v, index) =>  `\t‚Ä¢ [ *N¬∞ ${index+1}* ] - Comando: ${prefix + getComandoBlock(from)[v]}`).join('\n‚Äì\n')
sandro.sendMessage(from, {text: tkks.trim()}, {quoted: selo})
break

case 'blockcmdg':
if(!SoDono) return reply(enviar.msg.donosmt)
tp = args.join(" ")
if(tp.includes("blockcmdg blockcmdg") || (tp.includes("blockcmdg  blockcmdg"))) return reply(`T√° louco maluco? N√£o tem como adicionar o mesmo comando.`)
if(isBlockCmdG.includes(args[0]))return reply('Este comando j√° est√° incluso na lista de *comandos bloqueados global*.')
isBlockCmdG.push(args[0])
fs.writeFileSync('./settings/nescessario.json', JSON.stringify(nescessario, null, 2))
reply(`O comando *${args[0]}* foi adicionado na lista de comandos bloqueados global.`)
break

case 'unblockcmdg':
if(!SoDono) return reply(enviar.msg.donosmt)
tp = args.join(" ")
if(tp.includes("unblockcmdg unblockcmdg") || (tp.includes("unblockcmdg  unblockcmdg"))) return reply(`T√° louco maluco? N√£o tem como desbloquear o mesmo comando.`)  
if(!isBlockCmdG.includes(args[0]))return reply('Este comando n√£o est√° incluso na lista de *cmds bloqueados global*.')
var ab = isBlockCmdG.indexOf(args[0])
isBlockCmdG.splice(ab, 1)
fs.writeFileSync('./settings/nescessario.json', JSON.stringify(nescessario, null, 2))
reply(`O comando *${args[0]}* foi tirado da lista de cmds bloqueados global.`)
break

case 'listbcmdglobal':
if(isBlockCmdG.length == 0) return reply("N√£o existe nenhum *comando bloqueado* na lista")
tkks = `[Total: *${isBlockCmdG.length}*] - Lista de comandos bloqueados pelo(s) meus propriet√°rios:\n‚Äì\n`
tkks += isBlockCmdG.map((v, index) =>  `\t‚Ä¢ [ *N¬∞ ${index+1}* ] - Comando: ${prefix+v}`).join('\n‚Äì\n')
sandro.sendMessage(from, {text: tkks.trim()}, {quoted: selo})
break

case 'avalie':
case 'avaliar':
qp = args.join(" ")
if(!qp) return reply(`*‚ùïExemplo:* ${prefix + command} _"Bot muito bom, parab√©ns!"_.`)
if(args.length >= 400) return sandro.sendMessage(from, {text: '‚ùóM√°ximo 400 caracteres'}, {quoted: info})
reagir(from, "üîè")
await sleep(1000)
var nomor = info.participant
tdptls = `*_üîè Avalia√ß√£o üîè_*\n-\n*üë§ De:* wa.me/${sender.split("@s.whatsapp.net")[0]}\n-\n*üìÑ Disse isso:* ${qp}`
sandro.sendMessage(nmrdn, {text: tdptls}, {quoted: info})
reply("*_üòâ Mensagem enviada ao meu dono, obrigado pela avalia√ß√£o, iremos melhorar a cada dia._*")
break

case 'bug':
case 'erro':
qp = args.join(" ")
if(!qp) return reply(`*‚ùïExemplo:* ${prefix + command} _"ocorreu um erro no comando sticker"._`)
if(args.length >= 800) return sandro.sendMessage(from, {text: '‚ùóM√°ximo 800 caracteres'}, {quoted: info})
reagir(from, "üö®")
await sleep(1000)
var nomor = info.participant
teks1 = `*_üö® Bug üö®_*\n-\n*üë§ De:* wa.me/${sender.split("@s.whatsapp.net")[0]}\n-\n*üö© Erro ou bug:* ${qp}`
sandro.sendMessage(nmrdn, {text: teks1}, {quoted: info})
reply("*_üòâ Mensagem enviada ao meu dono, se enviar muitas mensagens repetida por zoueiras, voc√™ sera banido de utilizar os comandos do bot._*")
break

case 'sugest√£o':
case 'sugestao':
qp = args.join(" ")
if(!qp) return reply(`*‚ùïExemplo:* ${prefix + command} _"opa, crie um comando tal, que ele funcione de tal maneira, isso ser√° muito bom."_`)
if(args.length >= 800) return sandro.sendMessage(from, {text: '‚ùóM√°ximo 800 caracteres'}, {quoted: info})
reagir(from, "üí°")
await sleep(1000)
var nomor = info.participant
sug = `*_üìù Sugest√£o üìù_*\n-\n*üë§ De:* wa.me/${sender.split("@s.whatsapp.net")[0]}\n-\n*üí° Falou isso:* ${qp}`
sandro.sendMessage(nmrdn, {text: sug}, {quoted: info})
reply("*_üòâ Mensagem enviada ao meu dono, obrigado pela sugest√£o, iremos tentar ouvir o m√°ximo poss√≠vel de sugest√µes._*")
break

//==========(BAIXAR/PESQUISAS)==========\\

case 'gimage':
if(!q) return reply(`Coloque o que deseja ap√≥s o comando... Por exemplo: *${prefix + command} Fogo*`)
try {
data = await fetchJson(`http://br1.bronxyshost.com:4360/api/gimage?q=${q}&apikey=${SANDRO_MD}`);
returnData = pickRandom(data.resultado); /* Cria um random no resultado, retornando s√≥ 1. */
await sandro.sendMessage(from, {image: {url: returnData.url}, caption: mess.googleImage(returnData)}, {quoted: selo});
} catch (error) {
reply(mess.error());
}
break

case 'saude_geral':
if(!isModobn) return reply(mess.warningMB(prefix))
  reply(`üí™ *Seu estado geral de sa√∫de hoje* üëà\n\nEnergia: ${gerarnum()}%\nDisposi√ß√£o: ${gerarnum()}%\nImunidade: ${gerarnum()}%\nFadiga: ${gerarnum()}%\nN√≠vel de estresse: ${gerarnum()}%\nBem-estar emocional: ${gerarnum()}%`);
  break;

// 2. Exerc√≠cios di√°rios
case 'saude_exercicios_diarios':
if(!isModobn) return reply(mess.warningMB(prefix))
  reply(`üèãÔ∏è‚Äç‚ôÇÔ∏è *Seus exerc√≠cios di√°rios* üëà\n\nCaminhada: ${gerarnum()}%\nCorrida: ${gerarnum()}%\nMuscula√ß√£o: ${gerarnum()}%\nYoga: ${gerarnum()}%\nAlongamento: ${gerarnum()}%\nMedita√ß√£o: ${gerarnum()}%`);
  break;

// 3. Alimenta√ß√£o saud√°vel
case 'saude_alimentacao_saudavel':
if(!isModobn) return reply(mess.warningMB(prefix))
  reply(`üçè *Sua alimenta√ß√£o saud√°vel hoje* üëà\n\nConsumo de frutas: ${gerarnum()}%\nConsumo de vegetais: ${gerarnum()}%\nProte√≠nas: ${gerarnum()}%\nCarboidratos: ${gerarnum()}%\nGorduras boas: ${gerarnum()}%\nA√ß√∫car: ${gerarnum()}%`);
  break;

// 4. Rotina de sono
case 'saude_rotina_sono':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`üò¥ *Sua rotina de sono* üëà\n\nHoras de sono: ${gerarnum()}%\nQualidade do sono: ${gerarnum()}%\nSonhos: ${gerarnum()}%\nFases do sono profundo: ${gerarnum()}%\nDificuldade para dormir: ${gerarnum()}%\nAcordar descansado: ${gerarnum()}%`);
  break;

// 5. Hidrata√ß√£o
case 'saude_hidratacao':
if(!isModobn) return reply(mess.warningMB(prefix))
  reply(`üíß *Sua hidrata√ß√£o hoje* üëà\n\nConsumo de √°gua: ${gerarnum()}%\nHidrata√ß√£o corporal: ${gerarnum()}%\nN√≠vel de sede: ${gerarnum()}%\nConsumo de l√≠quidos: ${gerarnum()}%\nReten√ß√£o de l√≠quidos: ${gerarnum()}%\nEquil√≠brio h√≠drico: ${gerarnum()}%`);
  break;

// 6. Sa√∫de mental
case 'saude_mental':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`üß† *Sua sa√∫de mental hoje* üëà\n\nN√≠vel de estresse: ${gerarnum()}%\nAnsiedade: ${gerarnum()}%\nClareza mental: ${gerarnum()}%\nMotiva√ß√£o: ${gerarnum()}%\nHumor: ${gerarnum()}%\nTranquilidade: ${gerarnum()}%`);
  break;

// 7. N√≠vel de condicionamento f√≠sico
case 'saude_condicionamento_fisico':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`üèÉ‚Äç‚ôÇÔ∏è *Seu n√≠vel de condicionamento f√≠sico* üëà\n\nResist√™ncia: ${gerarnum()}%\nFor√ßa muscular: ${gerarnum()}%\nVelocidade: ${gerarnum()}%\nFlexibilidade: ${gerarnum()}%\nCoordena√ß√£o: ${gerarnum()}%\nFrequ√™ncia card√≠aca: ${gerarnum()}%`);
  break;

// 8. Sa√∫de cardiovascular
case 'saude_cardiovascular':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`‚ù§Ô∏è *Sua sa√∫de cardiovascular* üëà\n\nPress√£o arterial: ${gerarnum()}%\nFrequ√™ncia card√≠aca: ${gerarnum()}%\nColesterol: ${gerarnum()}%\nCircula√ß√£o sangu√≠nea: ${gerarnum()}%\nSa√∫de do cora√ß√£o: ${gerarnum()}%\nN√≠vel de oxig√™nio no sangue: ${gerarnum()}%`);
  break;

// 9. Sa√∫de respirat√≥ria
case 'saude_respiratoria':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`üå¨Ô∏è *Sua sa√∫de respirat√≥ria* üëà\n\nCapacidade pulmonar: ${gerarnum()}%\nRespira√ß√£o profunda: ${gerarnum()}%\nFrequ√™ncia respirat√≥ria: ${gerarnum()}%\nQualidade do ar: ${gerarnum()}%\nSa√∫de dos pulm√µes: ${gerarnum()}%\nF√¥lego: ${gerarnum()}%`);
  break;

// 10. N√≠vel de relaxamento
case 'saude_relaxamento':
if(!isModobn) return reply(mess.warningMB(prefix))  
reply(`üßò *Seu n√≠vel de relaxamento* üëà\n\nTranquilidade: ${gerarnum()}%\nRedu√ß√£o de estresse: ${gerarnum()}%\nMedita√ß√£o: ${gerarnum()}%\nQualidade de descanso: ${gerarnum()}%\nConex√£o mente-corpo: ${gerarnum()}%\nDesacelera√ß√£o: ${gerarnum()}%`);
  break;

// 11. Flexibilidade corporal
case 'saude_flexibilidade':
if(!isModobn) return reply(mess.warningMB(prefix))
  reply(`ü§∏ *Sua flexibilidade corporal* üëà\n\nAlongamento: ${gerarnum()}%\nAmplitude de movimento: ${gerarnum()}%\nFlexibilidade das pernas: ${gerarnum()}%\nFlexibilidade das costas: ${gerarnum()}%\nMobilidade articular: ${gerarnum()}%\nPostura corporal: ${gerarnum()}%`);
  break;

// 12. Sa√∫de √≥ssea
case 'saude_ossea':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`ü¶¥ *Sua sa√∫de √≥ssea* üëà\n\nDensidade √≥ssea: ${gerarnum()}%\nSa√∫de das articula√ß√µes: ${gerarnum()}%\nFor√ßa dos ossos: ${gerarnum()}%\nFlexibilidade: ${gerarnum()}%\nEquil√≠brio: ${gerarnum()}%\nPostura: ${gerarnum()}%`);
  break;

// 13. Equil√≠brio emocional
case 'saude_equilibrio_emocional':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`üíñ *Seu equil√≠brio emocional* üëà\n\nEstabilidade emocional: ${gerarnum()}%\nHumor: ${gerarnum()}%\nResili√™ncia: ${gerarnum()}%\nN√≠vel de felicidade: ${gerarnum()}%\nAutoestima: ${gerarnum()}%\nControle emocional: ${gerarnum()}%`);
  break;

// 14. Sa√∫de digestiva
case 'saude_digestiva':
if(!isModobn) return reply(mess.warningMB(prefix))
  reply(`üçΩÔ∏è *Sua sa√∫de digestiva* üëà\n\nDigest√£o: ${gerarnum()}%\nAbsor√ß√£o de nutrientes: ${gerarnum()}%\nRegularidade: ${gerarnum()}%\nSa√∫de intestinal: ${gerarnum()}%\nHidrata√ß√£o: ${gerarnum()}%\nN√≠vel de fome: ${gerarnum()}%`);
  break;

// 15. Sa√∫de muscular
case 'saude_muscular':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`üí™ *Sua sa√∫de muscular* üëà\n\nFor√ßa muscular: ${gerarnum()}%\nRecupera√ß√£o muscular: ${gerarnum()}%\nResist√™ncia: ${gerarnum()}%\nDefini√ß√£o muscular: ${gerarnum()}%\nDores musculares: ${gerarnum()}%\nFlexibilidade muscular: ${gerarnum()}%`);
  break;

// 16. Sa√∫de mental no trabalho
case 'saude_mental_trabalho':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`üß† *Sua sa√∫de mental no trabalho* üëà\n\nN√≠vel de estresse: ${gerarnum()}%\nFoco: ${gerarnum()}%\nMotiva√ß√£o: ${gerarnum()}%\nN√≠vel de exaust√£o: ${gerarnum()}%\nClareza mental: ${gerarnum()}%\nSatisfa√ß√£o no trabalho: ${gerarnum()}%`);
  break;

// 17. Sa√∫de imunol√≥gica
case 'saude_imunologica':
if(!isModobn) return reply(mess.warningMB(prefix)) 
 reply(`üõ°Ô∏è *Sua sa√∫de imunol√≥gica* üëà\n\nN√≠vel de imunidade: ${gerarnum()}%\nDefesa contra resfriados: ${gerarnum()}%\nCapacidade de recupera√ß√£o: ${gerarnum()}%\nExposi√ß√£o a v√≠rus: ${gerarnum()}%\nResist√™ncia a doen√ßas: ${gerarnum()}%\nSa√∫de geral: ${gerarnum()}%`);
  break;

// 18. N√≠vel de energia f√≠sica
case 'saude_energia_fisica':
if(!isModobn) return reply(mess.warningMB(prefix))  
reply(`‚ö° *Seu n√≠vel de energia f√≠sica* üëà\n\nResist√™ncia: ${gerarnum()}%\nDisposi√ß√£o: ${gerarnum()}%\nCapacidade de manter esfor√ßo f√≠sico: ${gerarnum()}%\nRecupera√ß√£o de energia: ${gerarnum()}%\nUso de energia: ${gerarnum()}%\nN√≠vel de fadiga: ${gerarnum()}%`);
  break;

// 19. Sa√∫de emocional em relacionamentos
case 'saude_relacionamentos':
if(!isModobn) return reply(mess.warningMB(prefix))
  reply(`üíû *Sua sa√∫de emocional em relacionamentos* üëà\n\nConfian√ßa: ${gerarnum()}%\nEmpatia: ${gerarnum()}%\nRespeito: ${gerarnum()}%\nAmor: ${gerarnum()}%\nComunica√ß√£o: ${gerarnum()}%\nEstabilidade: ${gerarnum()}%`);
  break;


  case 'interesses_casa':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`‚úÖ *Seus interesses em casa* üëà\n\nLavar pratos: ${gerarnum()}%\nDormir: ${gerarnum()}%\nLavar a casa: ${gerarnum()}%\nFazer comida: ${gerarnum()}%\nComer: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nFazer nada: ${gerarnum()}%`);
    break;

  case 'interesses_escola':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`‚úÖ *Seus interesses na escola* üëà\n\nEstudar: ${gerarnum()}%\nConversar com amigos: ${gerarnum()}%\nCopiar mat√©ria: ${gerarnum()}%\nFicar no celular: ${gerarnum()}%\nDormir na aula: ${gerarnum()}%\nFazer li√ß√£o de casa: ${gerarnum()}%`);
    break;

  case 'interesses_curso':
if(!isModobn) return reply(mess.warningMB(prefix)) 
   reply(`‚úÖ *Seus interesses no curso* üëà\n\nPrestar aten√ß√£o: ${gerarnum()}%\nFazer atividades: ${gerarnum()}%\nConversar: ${gerarnum()}%\nIr para casa: ${gerarnum()}%\nFicar no celular: ${gerarnum()}%\nPedir ajuda ao professor: ${gerarnum()}%`);
    break;

  case 'interesses_rua':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`‚úÖ *Seus interesses na rua* üëà\n\nObservar a paisagem: ${gerarnum()}%\nComprar algo: ${gerarnum()}%\nFicar no celular: ${gerarnum()}%\nAndar r√°pido: ${gerarnum()}%\nParar em uma loja: ${gerarnum()}%\nEncontrar amigos: ${gerarnum()}%`);
    break;

  case 'interesses_shopping':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`‚úÖ *Seus interesses no shopping* üëà\n\nFazer compras: ${gerarnum()}%\nComer na pra√ßa de alimenta√ß√£o: ${gerarnum()}%\nOlhar vitrines: ${gerarnum()}%\nAssistir a um filme: ${gerarnum()}%\nPassear: ${gerarnum()}%\nFicar no celular: ${gerarnum()}%`);
    break;

  case 'interesses_parque':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`‚úÖ *Seus interesses no parque* üëà\n\nFazer exerc√≠cio: ${gerarnum()}%\nPassear: ${gerarnum()}%\nTirar fotos: ${gerarnum()}%\nFicar no celular: ${gerarnum()}%\nBrincar com animais: ${gerarnum()}%\nComer algo: ${gerarnum()}%`);
    break;

  case 'interesses_praia':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`‚úÖ *Seus interesses na praia* üëà\n\nTomar sol: ${gerarnum()}%\nEntrar no mar: ${gerarnum()}%\nBrincar na areia: ${gerarnum()}%\nComer algo: ${gerarnum()}%\nFicar no celular: ${gerarnum()}%\nObservar o mar: ${gerarnum()}%`);
    break;

  case 'interesses_academia':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`‚úÖ *Seus interesses na academia* üëà\n\nFazer exerc√≠cios: ${gerarnum()}%\nLevantar pesos: ${gerarnum()}%\nFazer esteira: ${gerarnum()}%\nDescansar: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nConversar com amigos: ${gerarnum()}%`);
    break;
    
case 'dar'://BY: ZER√òPHOENIX 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer dar, a mensagem ou o @')
susp = `Voc√™ deu com vontade para @${menc_os2.split('@')[0]}! üò≥)` 
jrq = await getBuffer(`https://telegra.ph/file/d72e1d4dba05d2b054fd8.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

case 'dar2'://BY: ZER√òPHOENIX 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer dar, a mensagem ou o @')
susp = `Voc√™ deu com tanta vontade para @${menc_os2.split('@')[0]}! üò≥)` 
jrq = await getBuffer(`https://telegra.ph/file/d577416360c3e9799f880.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

case 'dar3'://BY: ZER√òPHOENIX
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer dar, a mensagem ou o @')
susp = `Voc√™ deu com tanta vontade para @${menc_os2.split('@')[0]}! üò≥)` 
jrq = await getBuffer(`https://telegra.ph/file/ccade2471e6371452a021.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

case 'mamar'://BY: ZER√òPHOENIX 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer mamar, a mensagem ou o @')
susp = `@${menc_os2.split('@')[0]} Voc√™ Recebeu um mamada gostoso(a)` 
jrq = await getBuffer(`https://telegra.ph/file/3ad3be6f2ceec10ced5e8.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

//NOVOS CMDS
case 'beijo': case 'beijar': //BY: ZER√òPHOENIX 
if(!isGroup) return reply(Res_SoGrupo)
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)
if(!menc_os2 || menc_jid2[1]) return reply('marque a pessoa que voc√™ quer beijar, a mensagem ou o @')
sandro.sendMessage(from, {video: {url: 'https://telegra.ph/file/04b88dcf0195faf4e8900.mp4'}, gifPlayback: true, caption: `Voc√™ deu um beijo incr√≠vel na(o) @${menc_os2.split('@')[0]} üò≥üòè‚ù§Ô∏è‚Äçüî•` , mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

case 'comergay'://BY: ZER√òPHOENIX 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer comer, a mensagem ou o @')
susp = `Voc√™ comeu o chocolate branco @${menc_os2.split('@')[0]} com prazer ü•µüç´)` 
jrq = await getBuffer(`https://telegra.ph/file/6804014b0f3b42711b257.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

case 'comer'://BY: ZER√òPHOENIX 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer mamar, a mensagem ou o @')
susp = `Voc√™ tratou da(o) @${menc_os2.split('@')[0]} com muito cuidado e dedica√ß√£o üòàüî•` 
jrq = await getBuffer(`https://telegra.ph/file/cd28a1938d70cf025e207.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

case 'comer1'://BY: ZER√òPHOENIX 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer mamar, a mensagem ou o @')
susp = `Voc√™ cuidou de @${menc_os2.split('@')[0]} com muito carinho e aten√ß√£o üòàüî•` 
jrq = await getBuffer(`https://telegra.ph/file/594c6ddb8d18f2a7d49e9.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

case 'comer2'://BY: ZER√òPHOENIX 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer mamar, a mensagem ou o @')
susp = `A @${menc_os2.split('@')[0]} recebeu um tratamento especial e cheio de dedica√ß√£o üòàüî•` 
jrq = await getBuffer(`https://telegra.ph/file/edeb2315d9ec5f32179ac.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

case 'comer3'://BY: ZER√òPHOENIX 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer mamar, a mensagem ou o @')
susp = `Voc√™ tratou @${menc_os2.split('@')[0]} com todo o zelo e energia üòàüî•` 
jrq = await getBuffer(`https://telegra.ph/file/dd55bfd88c1449838f800.mp4`)
await sandro.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break//BY: ZER√òPHOENIX 

  case 'interesses_trabalho':
 if(!isModobn) return reply(mess.warningMB(prefix))
    reply(`‚úÖ *Seus interesses no trabalho* üëà\n\nFazer tarefas: ${gerarnum()}%\nConversar com colegas: ${gerarnum()}%\nFicar no celular: ${gerarnum()}%\nPausar para caf√©: ${gerarnum()}%\nIr embora: ${gerarnum()}%\nOrganizar o local: ${gerarnum()}%`);
    break;

  case 'interesses_cinema':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`‚úÖ *Seus interesses no cinema* üëà\n\nAssistir ao filme: ${gerarnum()}%\nComer pipoca: ${gerarnum()}%\nConversar durante o filme: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nTirar fotos com amigos: ${gerarnum()}%\nAssistir os trailers: ${gerarnum()}%`);
    break;

  case 'interesses_supermercado':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`‚úÖ *Seus interesses no supermercado* üëà\n\nComprar comida: ${gerarnum()}%\nProcurar promo√ß√µes: ${gerarnum()}%\nEscolher frutas e legumes: ${gerarnum()}%\nConversar com o caixa: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nSair r√°pido: ${gerarnum()}%`);
    break;

  case 'interesses_livraria':
if(!isModobn) return reply(mess.warningMB(prefix)) 
   reply(`‚úÖ *Seus interesses na livraria* üëà\n\nProcurar livros novos: ${gerarnum()}%\nLer trechos de livros: ${gerarnum()}%\nConversar com atendentes: ${gerarnum()}%\nComprar algo: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nOlhar revistas: ${gerarnum()}%`);
    break;

case 'cinema': {
    reply('üé¨ Aguarde enquanto busco os novos filmes... üçø');

    const url = 'https://www.adorocinema.com/filmes/em-cartaz/estreias/';

    axios.get(url)
        .then(response => {
            const data = response.data;
            const $ = cheerio.load(data);

            let movies = [];

            $('.entity-card').each((index, element) => {
                const title = $(element).find('.meta-title-link').text().trim();
                const releaseDate = $(element).find('.meta-body-info .date').text().trim();
                const genre = $(element).find('.meta-body-info .dark-grey-link').text().trim();
                const rating = $(element).find('.rating-star .tooltip-child').first().text().trim() || 'N/A';
                const synopsis = $(element).find('.synopsis .content-txt').text().trim();
                const directors = $(element).find('.meta-body-direction .dark-grey-link').map((i, el) => $(el).text().trim()).get().join(', ');
                const cast = $(element).find('.meta-body-actor .dark-grey-link').map((i, el) => $(el).text().trim()).get().join(', ');

                if (title && releaseDate) {
                    movies.push({ title, releaseDate, genre, rating, synopsis, directors, cast });
                }
            });

            if (movies.length > 0) {
                let movieDetails = 'üé¨ **Novos Filmes em Cartaz** üé¨\n\n';
                movies.forEach((movie, index) => {
                    movieDetails += `üçø **${index + 1}. T√≠tulo:** ${movie.title}\n`;
                    movieDetails += `üìÖ **Data de Lan√ßamento:** ${movie.releaseDate}\n`;
                    movieDetails += `üé≠ **G√™nero:** ${movie.genre}\n`;
                    movieDetails += `‚≠ê **Avalia√ß√£o:** ${movie.rating}\n`;
                    movieDetails += `üìù **Sinopse:** ${movie.synopsis}\n`;
                    movieDetails += `üé¨ **Dire√ß√£o:** ${movie.directors}\n`;
                    movieDetails += `üé≠ **Elenco:** ${movie.cast}\n\n`;
                });

                reply(movieDetails);
            } else {
                reply('‚ùå N√£o foram encontrados novos filmes.');
            }
        })
        .catch(error => {
            console.error('Erro ao buscar os novos filmes:', error);
            reply('‚ùå Desculpe, ocorreu um erro ao buscar os novos filmes.');
        });

    break;
}

  case 'interesses_biblioteca':
if(!isModobn) return reply(mess.warningMB(prefix)) 
   reply(`‚úÖ *Seus interesses na biblioteca* üëà\n\nLer livros: ${gerarnum()}%\nEstudar: ${gerarnum()}%\nPesquisar algo: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nFicar em sil√™ncio: ${gerarnum()}%\nEncontrar amigos: ${gerarnum()}%`);
    break;

  case 'interesses_museu':
if(!isModobn) return reply(mess.warningMB(prefix)) 
   reply(`‚úÖ *Seus interesses no museu* üëà\n\nObservar exposi√ß√µes: ${gerarnum()}%\nTirar fotos: ${gerarnum()}%\nConversar com guias: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nLer as placas: ${gerarnum()}%\nPassear pelo local: ${gerarnum()}%`);
    break;

  case 'interesses_restaurante':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`‚úÖ *Seus interesses no restaurante* üëà\n\nComer a comida: ${gerarnum()}%\nConversar: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nTirar fotos dos pratos: ${gerarnum()}%\nPedir sobremesa: ${gerarnum()}%\nOlhar o card√°pio: ${gerarnum()}%`);
    break;

  case 'interesses_festa':
if(!isModobn) return reply(mess.warningMB(prefix))    
reply(`‚úÖ *Seus interesses na festa* üëà\n\nDan√ßar: ${gerarnum()}%\nComer: ${gerarnum()}%\nConversar com amigos: ${gerarnum()}%\nFicar no celular: ${gerarnum()}%\nTirar fotos: ${gerarnum()}%\nCantar parab√©ns: ${gerarnum()}%`);
    break;

  case 'interesses_estadio':
if(!isModobn) return reply(mess.warningMB(prefix))    
reply(`‚úÖ *Seus interesses no est√°dio* üëà\n\nAssistir ao jogo: ${gerarnum()}%\nTorcer: ${gerarnum()}%\nConversar com amigos: ${gerarnum()}%\nComer algo: ${gerarnum()}%\nGritar gol: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%`);
    break;

  case 'interesses_aeroporto':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`‚úÖ *Seus interesses no aeroporto* üëà\n\nEsperar o voo: ${gerarnum()}%\nComprar no duty-free: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nComer algo: ${gerarnum()}%\nObservar avi√µes: ${gerarnum()}%\nConversar com amigos: ${gerarnum()}%`);
    break;

  case 'interesses_onibus':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`‚úÖ *Seus interesses no √¥nibus* üëà\n\nMexer no celular: ${gerarnum()}%\nDormir: ${gerarnum()}%\nObservar a paisagem: ${gerarnum()}%\nConversar com amigos: ${gerarnum()}%\nLer um livro: ${gerarnum()}%\nOuvir m√∫sica: ${gerarnum()}%`);
    break;

  case 'interesses_hospital':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`‚úÖ *Seus interesses no hospital* üëà\n\nEsperar o atendimento: ${gerarnum()}%\nConversar com amigos: ${gerarnum()}%\nMexer no celular: ${gerarnum()}%\nLer algo: ${gerarnum()}%\nFalar com o m√©dico: ${gerarnum()}%\nSair r√°pido: ${gerarnum()}%`);
    break;

  case 'euamor_cachorro':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por cachorro* üëà\n\n Voc√™ ama cachorro!`);
    break;
  
  case 'euamor_mae':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por sua m√£e* üëà\n\n Voc√™ ama muito sua m√£e!`);
    break;
  
  case 'euamor_pai':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por seu pai* üëà\n\n Voc√™ ama muito seu pai!`);
    break;
  
  case 'euamor_gato':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por gato* üëà\n\n Voc√™ ama muito os gatos!`);
    break;
  
  case 'euamor_cavalo':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por cavalos* üëà\n\n Voc√™ ama muito os cavalos!`);
    break;
  
  case 'euamor_carro':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por carros* üëà\n\n Voc√™ ama muito os carros!`);
    break;

  case 'euamor_natureza':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor pela natureza* üëà\n\n Voc√™ ama muito a natureza!`);
    break;

  case 'euamor_comida':
if(!isModobn) return reply(mess.warningMB(prefix)) 
   reply(`üíñ *${gerarnum()}% de amor por comida* üëà\n\n Voc√™ ama muito comer!`);
    break;

  case 'euamor_viagens':
if(!isModobn) return reply(mess.warningMB(prefix)) 
   reply(`üíñ *${gerarnum()}% de amor por viajar* üëà\n\n Voc√™ ama muito viajar!`);
    break;

  case 'euamor_musica':
if(!isModobn) return reply(mess.warningMB(prefix)) 
   reply(`üíñ *${gerarnum()}% de amor por m√∫sica* üëà\n\n Voc√™ ama muito a m√∫sica!`);
    break;

  case 'euamor_futebol':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por futebol* üëà\n\n Voc√™ ama muito o futebol!`);
    break;

  case 'euamor_tecnologia':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por tecnologia* üëà\n\n Voc√™ ama muito a tecnologia!`);
    break;

  case 'euamor_esporte':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por esportes* üëà\n\n Voc√™ ama muito os esportes!`);
    break;

  case 'euamor_ciencia':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por ci√™ncia* üëà\n\n Voc√™ ama muito a ci√™ncia!`);
    break;

  case 'euamor_filmes':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por filmes* üëà\n\n Voc√™ ama muito os filmes!`);
    break;

  case 'euamor_series':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por s√©ries* üëà\n\n Voc√™ ama muito as s√©ries!`);
    break;

  case 'euamor_amigos':
if(!isModobn) return reply(mess.warningMB(prefix)) 
   reply(`üíñ *${gerarnum()}% de amor por amigos* üëà\n\n Voc√™ ama muito seus amigos!`);
    break;

  case 'euamor_livros':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por livros* üëà\n\n Voc√™ ama muito ler livros!`);
    break;

  case 'euamor_chocolate':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por chocolate* üëà\n\n Voc√™ ama muito o chocolate!`);
    break;

  case 'euamor_pizza':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por pizza* üëà\n\n Voc√™ ama muito pizza!`);
    break;

  case 'euamor_sol':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor pelo sol* üëà\n\n Voc√™ ama muito o sol!`);
    break;

  case 'euamor_chuva':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor pela chuva* üëà\n\n Voc√™ ama muito a chuva!`);
    break;

  case 'euamor_festas':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por festas* üëà\n\n Voc√™ ama muito festas!`);
    break;

  case 'euamor_artes':
if(!isModobn) return reply(mess.warningMB(prefix))   
 reply(`üíñ *${gerarnum()}% de amor por artes* üëà\n\n Voc√™ ama muito as artes!`);
    break;

  case 'euamor_novelas':
if(!isModobn) return reply(mess.warningMB(prefix))    
reply(`üíñ *${gerarnum()}% de amor por novelas* üëà\n\n Voc√™ ama muito as novelas!`);
    break;

  case 'euamor_aventura':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por aventura* üëà\n\n Voc√™ ama muito a aventura!`);
    break;

  case 'euamor_teatro':
 if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor pelo teatro* üëà\n\n Voc√™ ama muito o teatro!`);
    break;

  case 'euamor_cozinhar':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por cozinhar* üëà\n\n Voc√™ ama muito cozinhar!`);
    break;

  case 'euamor_animais':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por animais* üëà\n\n Voc√™ ama muito os animais!`);
    break;

  case 'euamor_familia':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor pela fam√≠lia* üëà\n\n Voc√™ ama muito sua fam√≠lia!`);
    break;

  case 'euamor_flor':
if(!isModobn) return reply(mess.warningMB(prefix))  
  reply(`üíñ *${gerarnum()}% de amor por flores* üëà\n\n Voc√™ ama muito as flores!`);
    break;

case 'google': case 'googlesrc': 
if(!q) return reply(`Voc√™ esqueceu de colocar o que voc√™ deseja pesquisar ap√≥s o comando.`);
try {
reply(enviar.espere);
data = await fetchJson(`https://yurimodz-apis.xyz/api/googlesrc?query=${q}&apikey=${SANDRO_MD_BOT}`);
RST = data.result.map(v =>  `‚Ä¢ T√≠tulo: *${v.title}*\n‚Ä¢ Foto: *${v.url}*\n‚Ä¢ Link: *${v.originalUrl}*`).join('\n‚Äì\n')
sandro.sendMessage(from, {text: RST, contextInfo: {externalAdReply: {title: data.result[0].title, body: data.result.length, thumbnail: await getBuffer(data.result[0].url), mediaType: 2, sourceUrl: "https://cybercook.com.br/"}}}, {quoted: info});
} catch(e) {
return reply(mess.error())
}
break;

case 'screenshotweb': case 'printsite': case 'ssweb':
reply('Aguarde um pouco, entrando no site solicitado...')
if(!q) return reply(`Cad√™ o link do site o qual voc√™ deseja visualizar?`)
try {
img = await getBuffer(`https://yurimodz-apis.xyz/api/ssweb?link=${q}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: img, caption: `‚Ä¢ *Site:* ${q}`}, {quoted: selo})
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
} else {
reply('‚ùåÔ∏èÔ∏è Erro ao entrar no site desejado. Tente novamente mais tarde!')
}
}
break

case 'only1': //by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only1 = `
Luiz russo (mansËå´o maromba)
> https://t.me/+8cJ7yGnq5fI2YjYx
`
sandro.sendMessage(sender, {text: only1}, {quoted: selo})
break

case 'only2': //by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only2 = `
Luiza blue 
> https://t.me/+JaX8wY_45843ZTBh
`
sandro.sendMessage(sender, {text: only2}, {quoted: selo})
break

case 'only3': //by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only3 = `
Isadora vale 
> https://t.me/+smb4i0bxRl41ZjRh
`
sandro.sendMessage(sender, {text: only3}, {quoted: selo})
break

case 'only4': //by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only4 = `
Ingrid bianchi
> https://t.me/+RJtf2TqTQ8NjZjlh
`
sandro.sendMessage(sender, {text: only4}, {quoted: selo})
break

case 'only5'://by Natsumi 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only5 = `
Lizy Donato 
> https://t.me/+gmSjm2WZnb41OGEx
`
sandro.sendMessage(sender, {text: only5}, {quoted: selo})
break

case 'only6': //by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only6 = ` 
Feh GalvËå´o
> https://t.me/+naeQ1pp8ajswMjgx
`
sandro.sendMessage(sender, {text: only6}, {quoted: selo})
break

case 'only7': //by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only7 = `
Tatyzack
> https://t.me/+NvglGFhOLSY5NmZ
`
sandro.sendMessage(sender, {text: only7}, {quoted: selo})
break

case 'only8'://by Natsumi 
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only8 = `
Ayrla Souza 
> https://t.me/+XLziPd47MWo2N2Y
`
sandro.sendMessage(sender, {text: only8}, {quoted: selo})
break

case 'only9'://by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only9 = `
ALINE FARIA
> https://t.me/+j1xp_hmXrx5lZWMx
`
sandro.sendMessage(sender, {text: only9}, {quoted: selo})
break

case 'only10'://by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only10 = `
KINE CHAN 
> https://t.me/+YIVax4IQ9aFlMDgx
`
sandro.sendMessage(sender, {text: only10}, {quoted: selo})
break

case 'only11': //by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviado no seu pv`)
only11 = `
DJ NATHI
> https://t.me/+6Z5vuVApT-1lYjEx
`
sandro.sendMessage(sender, {text: only11}, {quoted: selo})
break

case 'only12': //by Natsumi
if(!isNsfw) return reply('üîû Este tipo de comando s√≥ pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite: .modonsfw 1.')
reply(`[üß∏]Enviando no seu pv`)
only12 = `
BELE KAFFER
> https://t.me/+70DMw3iTzb0yMzEx
`
sandro.sendMessage(sender, {text: only12}, {quoted: selo})
break

case 'memes': 
case 'memedroid':
try {
reply(enviar.espere)
res = await axios.get(`https://yurimodz-apis.xyz/api/memes?apikey=${SANDRO_MD_BOT}`);
teks = pickRandom(res.data.pesquisa.resultado)
await sandro.sendMessage(from, {image: await getBuffer(teks.imagem), caption: mess.memesImages(teks)}, {quoted: selo}).catch(() => {
return reply(mess.error());
})
} catch (e) {
return reply(mess.error());
}
break;

case 'memesvid': 
case 'ifunnyvideo':
try {
reply(enviar.espere)
res = await axios.get(`https://yurimodz-apis.xyz/api/memesvid?apikey=${SANDRO_MD_BOT}`);
teks = pickRandom(res.data.videos)
await sandro.sendMessage(from, {video: await getBuffer(teks.video), caption: mess.iFunnyVideo(teks)}, {quoted: selo}).catch(() => {
return reply(mess.error());
})
} catch (e) {
return reply(mess.error());
}
break;

case 'noticias': 
case 'getnoticias':
try {
if (!q) return reply(`Informe um tema para realizar a pesquisa de suas not√≠cias!`)
theNews = await axios.get(`https://newsapi.org/v2/everything?q=${encodeURIComponent(q)}&sortBy=publishedAt&language=pt&apiKey=9dc1dde158804756ae9b33dd8d71f7a1`);
reply(theNews.data.articles.map(d => `${d.publishedAt.split('T').join(' - ').split('Z')[0]}\n\n${d.title} - ${d.author} [${d.source.name}]\n\n${d.description}\n\n${d.url}\n\n${d.content}`).join('\n\n--------------------------- * ---------------------------\n\n'))
} catch (e) {
return reply(mess.error())
}
break
           
case 'cases':
if(!SoDono) return reply("Voc√™ n√£o √© dono para utilizar este comando...")
try {
const listCases = () => {
const fileContent = fs.readFileSync("sandro.js").toString();
const caseNames = fileContent.match(/case\s+'(.+?)'/g);
if (caseNames) {
return caseNames.map((caseName, index) => `${index + 1}. ${caseName.match(/'(.+?)'/)[1]}`).join('\n');
} else {
reply("Nenhuma case encontrada.") } }
sandro.sendMessage(from, { text: listCases() }, { quoted: selo });
} catch (e) {
console.log(e)
reply('Ocorreu um erro ao obter as cases.') }
break

case 'opag':
reply("*Aguarde um momento.*") 
try {
if(!q) return reply(`Exemplo: ${prefix+command} Thais Carla`)
reply(`*Aguarde enviando* _SANDRO API_`)
await sandro.sendMessage(from, {image: {url: (`http://br1.bronxyshost.com:4360/ias/animeai?apikey=${SANDRO_MD}&img=https://telegra.ph/file/7200048b9363d0532d0fe.jpg`)}, caption: 'Aqui esta sua imagem.'}, {quoted:info})
} catch (e) {
return reply(`${e}`);
}
break

case 'pinterest2':
try {
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
if(!q.trim()) return reply(`Exemplo: ${prefix+command} naruto`)
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pinterest?nome=${q}&apikey=${API_SANDRO_MD}`);
sandro.sendMessage(from, {image: {url: ABC[Math.floor(Math.random() * ABC.length)]}}).catch(() => {
return reply("Erro..");
})
} catch (e) {
return reply("Erro..");
}
break;

case 'pinterest': 
try {
if(!q) return reply(`Digite o nome da imagem que vc quer buscar\nExemplo: ${prefix + command} cat`)
reply(enviar.espere)
blap = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pinterest?nome=${q}&apikey=${API_SANDRO_MD}`)
await sandro.sendMessage(from, {image: blap, thumbnail: null}, {quoted: info}).catch(e => {
reply('‚ùåÔ∏è *Erro ao fornecer o resultado da sua pesquisa.* Tente novamente mais tarde!')
})
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
} else {
reply('‚ùåÔ∏è *Erro ao fornecer o resultado da sua pesquisa.* Tente novamente mais tarde!')
}
}
break;

case 'akinator':
if(!isGroup) return reply(enviar.msg.grupo)
if(!JSON.stringify(akinator).includes(from) && akinator.length > 0 && Number(akinator[0].dia) === Number(moment.tz('America/Sao_Paulo').format('DD'))) return reply("Volte mais tarde...")
if(!JSON.stringify(akinator).includes(from) && akinator.length > 0 && Number(akinator[0].dia) !== Number(moment.tz('America/Sao_Paulo').format('DD'))) {
jogo.now = true
akinator.splice(0, 1)
fs.writeFileSync("./database/grupos/games/akinator.json", JSON.stringify(akinator, null, 2))
}
if(!JSON.stringify(akinator).includes(from)) {
reply(`Aten√ß√£o ${pushname}, irei iniciar o jogo do akinator, _siga as instru√ß√µes abaixo:_\n‚Ä¢ Responda os questionamentos com: _"Sim", "N√£o", "N√£o sei", "Provavelmente sim" ou "Provavelmente n√£o"_...\n‚Ä¢ ${II}Observa√ß√£o:${II} N√£o use as aspas, utilize sem as aspas por favor.`)
dateAKI = moment.tz('America/Sao_Paulo').format('DD')
var region = 'pt'
var childMode = false;
var proxy = undefined;
let startAki = async () => {
aki = new Aki({region, childMode, proxy});
await aki.start()
}
await startAki()
jogo.now = false
jogo.jogador = sender
akinator.push({id: from, jogador: sender, finish: 0, dia: dateAKI})
fs.writeFileSync("./database/grupos/games/akinator.json", JSON.stringify(akinator, null, 2))
reply(`üßû‚Äç‚ôÇÔ∏è *ùêÄùêäùêàùêçùêÄùêìùêéùêë ùêêùêîùêÑùêíùêìùêàùêéùêçùêí:*\n‚Ä¢ Quest√£o: *${aki.question}*`)
} else return mention(`@${akinator[akinator.map(i => i.id).indexOf(from)].jogador.split('@')[0]} j√° iniciou uma partida, espere ele(a) finalizar a atual para iniciar outra...`)
break

case 'resetaki':
if(!isGroup) return reply(enviar.msg.grupo)
if(!JSON.stringify(akinator).includes(from) && !SoDono) return reply("N√£o existe nenhuma sess√£o ainda em andamento no grupo.")
nosei = SoDono ? 0 : akinator.map(i => i.id).indexOf(from)
if(akinator[nosei].jogador == sender || isGroupAdmins || SoDono) {
jogo.now = true
akinator.splice(nosei, 1)
  fs.writeFileSync("./database/grupos/games/akinator.json", JSON.stringify(akinator, null, 2))
reply(`O akinator foi resetado com sucesso, a sess√£o foi deletada.`)
} else {
reply("Somente o(s) adm(s) ou a pessoa que iniciou o jogo podem resetar.")
}
break

          case 'videopralink':
          case 'gerarvideo':
            try {
              if (isQuotedVideo) {
                boij = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage
                  : info.message.videoMessage;
                const fetch = require('node-fetch');
                const FormData = require('form-data');
                const fs = require('fs');
                async function uploadVideoToTelegraph(videoBuffer) {
                  const form = new FormData();
                  form.append('file', videoBuffer, { filename: 'media' });

                  const response = await fetch('https://telegra.ph/upload', {
                    method: 'POST',
                    body: form,
                  });
                  const data = await response.json();
                  if (data && data[0] && data[0].src) {
                    return 'https://telegra.ph' + data[0].src;
                  } else {
                    throw new Error('Failed to retrieve the image URL from the response.');
                  }
                }
                const owgi = await getFileBuffer(boij, "video");
                const imageUrl = await uploadVideoToTelegraph(owgi);
                reply(imageUrl);
              } else {
                reply('marque o video')
              }
            } catch (e) {
              console.log(e)
              reply('error...')
            }
            break
            
case 'gerarlink2':
  try {
    if (isQuotedImage) {
      boij = isQuotedImage || isQuotedVideo 
        ? JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage 
        : info;
      const fetch = require('node-fetch');
      const FormData = require('form-data');
      async function uploadImageToImgur(imageBuffer) {
        const form = new FormData();
        form.append('image', imageBuffer, { filename: 'image.jpg' });
        const response = await fetch('https://api.imgur.com/3/image', {
          method: 'POST',
          body: form,
          headers: {
            'Authorization': 'Client-ID 400116076ba4b73'
          }
        });
        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers.raw());
        const data = await response.json();
        console.log('Response data:', data); 
        if (response.ok && data.data && data.data.link) {
          return data.data.link;
        } else {
          throw new Error('Failed to retrieve the image URL from the response.');
        }
      }
      const owgi = await getFileBuffer(boij, "image");
      const imageUrl = await uploadImageToImgur(owgi);
      reply(imageUrl);
    } else {
      reply('Marque a foto.');
    }
  } catch (e) {
    console.log('Error details:', e); 
    reply('Erro...');
  }
  break;

case 'gerarnick':
case 'nick':
try {
nick = args.join(' ')
if(ANT_LTR_MD_EMJ(q)) return reply("Ao realizar a solicitaÔøΩÔøΩo de criaÔøΩÔøΩo foi detectada letras modificadas ou emojis, ou seja, nÔøΩo se pode conter emojis e letras modificadas.");
if(!q) return reply(`Escreveva um nome para eu enviar ele com letras modificadas.\n*Exemplo:* ${prefix+command}LB Bot`);
axios.get(`http://br1.bronxyshost.com:4360/api/fazernick?nome=${q}&apikey=${SANDRO_MD}`)
.then(dados => {
var emoji = `„ÄΩÔ∏è`
nicks = dados.data
txt = '] Nicks Gerados Com Sucesso! ]\n\n'
for (let i = 0; i < nicks.length; i++) {
txt += `${emoji} ${nicks[i]}\n`
}
txt += `\n
ùôéùòºùôâùòøùôçùôä ùôàùòø`
reply(`${txt.trim()}`)
}).catch(e => {
reply('Acho que a api caiu, mas volta logo logo...')  
})
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou nÔøΩo foi possivel executar esta aÔøΩÔøΩo., espere retornar")   
} else {
reply("Erro ao gerar as fontes modificadas!") 
}
}
break

case 'glitch':
case 'write':
case 'advancedglow':
case 'typography':
case 'pixelglitch':
case 'neonglitch':
case 'flag':
case 'flag3d':
case 'deleting':
case 'blackpink':
case 'glowing':
case 'underwater':
case 'logomaker':
case 'cartoon':
case 'papercut':
case 'watercolor':
case 'effectclouds':
case 'blackpinklogo':
case 'gradient':
case 'summerbeach':
case 'luxurygold':
case 'multicoloredneon':
case 'sandsummer':
case 'galaxywallpaper':
case '1917':
case 'makingneon':
case 'royal':
case 'freecreate':
case 'galaxy':
case 'darkgreen':
case 'lighteffects': 
case 'dragonball':
case 'neondevil':
case 'frozen':
case 'wooden3d':
case 'metal3d':
case 'ligatures':
case '3druby':
case 'sunset':
case 'cemetery':
case 'halloween':
case 'horror':
case 'blood':
case 'joker':
case 'clouds':
textin = args.join(" ") 
if(!textin) return reply("Voc√™ precisa acrescentar um texto!")
try {
await reply(`Enviando.. caso demore de mais nao consegui te enviar `)
let logos = await getBuffer(`https://carisys.online/api/logos/${command}?texto=${textin}`)
await sandro.sendMessage(from, 
{image: logos}, 
{quoted: info})
} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'cria': 
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_api.jpg?text.0.text=${q}&text.0.color=000000&text.0.font.family=Pacifico&text.0.font.weight=600&text.0.background.color=ffffff&text.0.outline.color=ffffff&text.0.outline.width=10&text.0.outline.blur=17`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break

case 'anime1':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis2.jpg?text.0.text=${q}&text.0.position.gravity=center&text.0.position.x=1%25&text.0.position.y=16%25&text.0.size=80&text.0.color=ff2772&text.0.opacity=67&text.0.font.family=Bangers&text.0.font.style=italic&text.0.background.opacity=50&text.0.outline.width=6`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break

case 'ff1':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis3.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.y=59%25&text.0.size=89&text.0.color=000000&text.0.opacity=71&text.0.font.family=Changa%20One&text.0.font.style=italic&text.0.background.opacity=10&text.0.outline.color=ffffff&text.0.outline.width=3`)
sandro.sendMessage(from, { image: venomk }, {quoted: selo })
break	

case 'game':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis5.jpg?text.0.text=${q}&text.0.position.gravity=center&text.0.position.x=1%25&text.0.position.y=22%25&text.0.align=left&text.0.size=59&text.0.font.family=Permanent%20Marker&text.0.outline.color=df00ff&text.0.outline.width=2&text.0.outline.blur=18`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break

case 'ff2':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis6.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.x=1%25&text.0.position.y=50%25&text.0.size=68&text.0.color=464646&text.0.opacity=51&text.0.font.family=Sigmar%20One&text.0.background.opacity=2&text.0.outline.color=ffffff&text.0.outline.width=2&text.0.outline.opacity=61`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break	

case 'anime2':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis7.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.x=1%25&text.0.position.y=58%25&text.0.size=69&text.0.color=00ffea&text.0.opacity=37&text.0.font.family=Bangers&text.0.background.opacity=77&text.0.outline.color=ffffff&text.0.outline.width=2&text.0.outline.blur=20`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break

case 'entardecer':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis9.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.y=50%25&text.0.size=68&text.0.color=ffffff&text.0.opacity=61&text.0.font.family=Tangerine&text.0.font.style=italic&text.0.background.opacity=61&text.0.outline.color=ff6f00&text.0.outline.width=9`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break

case 'indian':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis10.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.y=62%25&text.0.size=63&text.0.color=004124&text.0.opacity=99&text.0.font.family=Permanent%20Marker&text.0.font.style=italic&text.0.background.color=feff00&text.0.outline.color=ffe8a3&text.0.outline.width=9&text.0.outline.blur=21`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break 

case 'lixo': case 'lgbt': case 'morto': case 'preso': case 'deletem':
case 'procurado': case 'hitler': case 'borrar': case 'merda':
try {
IMG = JSON.parse(JSON.stringify(info)?.replace('quotedM','m'))?.message?.extendedTextMessage?.contextInfo?.message?.imageMessage || info.message?.imageMessage
PXR = await getFileBuffer(IMG, "image")
link = await upload(PXR)
sandro.sendMessage(from, {image: {url:`https://api.bronxyshost.com.br/api-bronxys/montagem?url=${link}&category=${command}&apikey=${API_SANDRO_MD}`}}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply('Marque uma imagem no WhatsApp, formato jpeg/jpg');
}
break

case 'ffrose':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis12.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.y=65%25&text.0.size=61&text.0.color=ff00e6&text.0.opacity=32&text.0.font.family=Chewy&text.0.font.style=italic&text.0.outline.width=6`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break	

case 'ffgren':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis13.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.y=63%25&text.0.size=68&text.0.color=ffffff&text.0.opacity=92&text.0.font.family=Permanent%20Marker&text.0.font.weight=800&text.0.outline.color=5dff00&text.0.outline.width=13&text.0.outline.blur=21`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break		

case 'chufuyu':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis14.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.y=68%25&text.0.size=60&text.0.color=ffffff&text.0.font.family=Sigmar%20One&text.0.font.style=italic&text.0.background.opacity=17&text.0.outline.color=a99cff&text.0.outline.width=9&text.0.outline.blur=16`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break	

case 'wolf':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis15.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.y=62%25&text.0.size=63&text.0.color=000000&text.0.font.family=Audiowide&text.0.font.style=italic&text.0.background.opacity=15&text.0.outline.color=ffffff&text.0.outline.width=9&text.0.outline.blur=33`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break	

case 'dragonred':
if (args.length < 1) return reply(mess.syntaxLogos())
teks = body.slice(7)
if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
reply(enviar.espere)
venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis16.jpg?text.0.text=${q}&text.0.position.gravity=north&text.0.position.y=58%25&text.0.size=99&text.0.color=fffefe&text.0.font.family=Permanent%20Marker&text.0.background.color=000000&text.0.outline.color=000000&text.0.outline.width=19&text.0.outline.blur=66`)
sandro.sendMessage(from, { image: venomk }, { quoted: selo })
break	

case 'grupos': {
reply("[‚ùó] aguarde uns minutinho estou processado")
blue = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/grupos?q=${q}&apikey=${API_SANDRO_MD}`)
let red = "Listagem de grupos para voc√™:\n\n"
blue.forEach(function(ab) {
red += ` - Url do Grupo: ${ab.link}\n\n - Descri√ß√£o: ${ab.desc}\n\n${"-".repeat(20)}\n\n`
})
reply(red)
}
break;

case "orangejuice":
textin = args.join(" ")
if(!textin) return reply(mess.syntaxLogos())
reply(enviar.espere)
bla = await fetchJson(`https://yurimodz-apis.xyz/api/textpro/3d-orange-juice?texto=${textin}&apikey=${SANDRO_MD_BOT}`)
dllink = await getBuffer(bla.resultado)
sandro.sendMessage(from, {image: dllink}, {quoted: selo}).catch(e =>{
reply("Erro ao criar sua logo! Tente novamente mais tarde.")   
})
break

case "neonlight":
textin = args.join(" ")
if(!textin) return reply(mess.syntaxLogos())
reply(enviar.espere)
bla = await fetchJson(`https://yurimodz-apis.xyz/api/textpro/3d-neon-light?texto=${textin}&apikey=${SANDRO_MD_BOT}`)
dllink = await getBuffer(bla.resultado)
sandro.sendMessage(from, {image: dllink}, {quoted: selo}).catch(e =>{
reply("Erro ao criar sua logo! Tente novamente mais tarde.")  
})
break

case "brilhante":
case "vietnam":
case "seta":
case "grafite":
case "goldt":
case "tela":
textin = args.join(" ")
if(!textin) return reply(mess.syntaxLogos())
reply(enviar.espere)
bla = await getBuffer(`https://yurimodz-apis.xyz/api/ephoto/${command}?texto=${textin}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: bla}, {quoted: selo}).catch(e =>{
reply("Erro ao criar sua logo! Tente novamente mais tarde.")  
})
break

case "desfocado":
textin = args.join(" ")
if(!textin) return reply(mess.syntaxLogos())
reply(enviar.espere)
bla = await getBuffer(`https://yurimodz-apis.xyz/api/ephoto/blur?texto=${textin}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: bla}, {quoted: selo}).catch(e =>{
reply("Erro ao criar sua logo! Tente novamente mais tarde.")  
})
break

case 'pubgv': 
case 'natalmsg': 
case 'anonovo': 
case 'trigrev':
textin = args.join(" ")
if(!textin) return reply(mess.syntaxLogos())
reply(enviar.espere)
bla = await getBuffer(`https://yurimodz-apis.xyz/api/ephoto/${command}?texto=${textin}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {video: bla}, {quoted: selo}).catch(e =>{
reply("Erro ao criar sua logo em v√≠deo! Tente novamente mais tarde.")  
})
break

case 'qc':
if(!q) return reply(`Para usar este comando √© nescess√°rio adicionar algo ap√≥s o comando.`)
reply(enviar.espere)
try {
ppimg = await sandro.profilePictureUrl(sender, 'image')} catch {ppimg = 'https://telegra.ph/file/24fa902ead26340f3df2c.png'}
const json = {"type": "quote", "format": "png", "backgroundColor": "#FFFFFF", "width": 512, "height": 768, "scale": 2, "messages": [{"entities": [], "avatar": true, "from": {"id": 1, "name": pushname, "photo": {"url": ppimg}}, "text": q, "replyMessage": {}}]};
axios.post('https://quote.btch.bz/generate', json, {headers: {'Content-Type': 'application/json'}}).then(res => {
const buffer = Buffer.from(res.data.result.image, 'base64')
sandro.sendImageAsSticker(from, buffer, {author: `üìå Criado(a) por: ${NomeDoBot}`})
}).catch((e) => {
return reply(mess.error())
})
break

case 'figuweb':
verificartext = args.join(" ")
if(!verificartext) return reply(mess.syntaxWebSticker(prefix));
let text, colorNumber;
if (q.includes('/')) {[text, colorNumber] = q.split('/')} else {text = q; colorNumber = '1'}
reply("‚Ä¢ Aguarde, estou gerando a figurinha de acordo o que voc√™ solicitou!");
setTimeout(() => { reagir(from, "üí¨"); }, 500);
const colorC = {'1': '#000000', '2': '#FFFFFF','3': '#FF0000', '4': '#0000FF'};
const backgroundColor = colorC[colorNumber] || '#000000';
try {ppimg = await sandro.profilePictureUrl(sender, 'image')} catch {ppimg = 'https://i.imgur.com/OqeFhHP.jpeg'}
const avatar = `${ppimg}`
const jsonNew = {"type": "quote", "format": "png", "backgroundColor": backgroundColor, "width": 512, "height": 768, "scale": 2, "messages": [{"entities": [], "avatar": true, "from": {"id": 1, "name": pushname, "photo": {"url": avatar}}, "text": text, "replyMessage": {}}]};
axios.post('https://bot.lyo.su/quote/generate', jsonNew, {headers: {'Content-Type': 'application/json'}}).then((reesult) => {
const bufferE = Buffer.from(reesult.data.result.image, 'base64')
sandro.sendImageAsSticker(from, bufferE, {author: `üìå Criado(a) por: ${NomeDoBot}`})
}).catch((e) => {
return reply(mess.error())
})
break


case 'amazon': 
case 'amazonsearch':
if(q.trim().length < 4) return reply(`Exemplo: ${prefix+command} fone redmi airdots 2`)
reply(enviar.espere);
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/amazon?nome=${q}&apikey=${SANDRO_MD_BOT}`);
RST = "üõí *ùêèùêÑùêíùêêùêîùêàùêíùêÄ - ùêÄùêåùêÄùêôùêéùêç ùêíùêìùêéùêëùêÑ:*\n‚Äì\n"
RST += ABC.resultado.map((v, index) => `*${index+1}.* Produto: *${v.titulo}*\n‚Ä¢ Valor do Produto: *${v.valor}*\n‚Ä¢ Link: *${v.link}*`).join('\n‚Äì\n')
return reply(RST)
} catch(e) {
return reply(mess.error())
}
break;
/*
case 'brasileirao':
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/brasileirao?apikey=${SANDRO_MD_BOT}`);
RST = "‚öΩÔ∏èüìä *Tabela Brasileir√£o:*\n‚Äì\n"
RST += ABC.resultado.map((v, index) => `${index+1}¬∞) Time: *${v.equipe}*\n‚Ä¢ Pontos alcan√ßados pelo time: *${v.pontos}*\n‚Ä¢ Jogos jogados pelo time: *${v.jogosJogados}*`).join("\n‚Äì\n")
return reply(RST)
} catch(e) {
return reply(mess.error())
}
break;
*/

case 'receita': 
case 'revenue': 
if (!q) return reply(`NaN, voc√™ esqueceu de digitar ap√≥s o comando.`)
try {
data = await fetchJson(`https://yurimodz-apis.xyz/api/search/cybercook?query=${q}&apikey=${SANDRO_MD_BOT}`)
if (data.resultado.length == 0) return reply(mess.noresult())
RST = "¬© ‚Ä¢ *ùêèùêÑùêíùêêùêîùêàùêíùêÄ ùêÉùêÑ ùêëùêÑùêÇùêÑùêàùêìùêÄùêí*\n  ‚Ä¢ Fonte: https://cybercook.com.br/\n‚Äî\n"
RST += data.resultado.map((v, index) => `*${index+1}.* T√≠tulo: *Receita de ${v.title}*\n‚Ä¢ Avalia√ß√£o: *${v.assessment.starEmoji} (${v.assessment.star})*\n‚Ä¢ Enviada por: *${v.by}*\n‚Ä¢ Foto: *${v.image}*\n‚Ä¢ Acesse o link para saber mais sobre a receita: *${v.url}*`).join('\n‚Äî\n')
sandro.sendMessage(from, {text: RST, contextInfo: {externalAdReply: {title: `[Total: ${data.resultado.length}] ‚Ä¢ üë©üèº‚Äçüç≥ Encontre as melhores receitas culin√°rias no CyberCook!`, thumbnail: await getBuffer(data.resultado[0].image), mediaType: 2, sourceUrl: "https://cybercook.com.br/"}}}, {quoted: info});
} catch(error) {
return reply(mess.error())
}
break

case 'playstore':
try {
await carregamento()
await sleep(3000)
if(!q) return reply(mess.noArgsSearch()+`use como exemplo: *${prefix+command} minecraft*`);
await reply(`Enviando.. caso demore de mais nao consegui te enviar `)
AB = await fetchJson(`http://br1.bronxyshost.com:4360/api/playstore?nome=${q}&apikey=${SANDRO_MD}`)
ABC = ` *Pesquisa:* ${q} - *[ PlayStore ]*\nTotal de aplicativos encontrados: ${AB.pesquisa.resultado.length}\n${"-\t".repeat(24)}\n`
for (var i of AB.pesquisa.resultado) {
ABC += `*Aplicativo:* ${i.nome}\n* Desenvolvedor do App:* ${i.desenvolvedor}\n* Avalia√ß√£o do Aplicativo:* ${i.estrelas}\n* Link do Aplicativo:* ${i.link}\n`;
ABC += `${"-\t".repeat(24)}\n`
}
sandro.sendMessage(from, {image:{url: AB.pesquisa.resultado[0].imagem}, caption: ABC});
} catch (e) {
reply(`alguma coisa deu errado entre em contato com o Sandro para descobrir.`)
}
break


case 'rastrear':
if (!q) return reply(mess.syntaxTrackParcels(prefix))
if (q.length < 13 || q.length > 13) return reply(mess.invalidCodeRastrear())
data = await fetchJson(`https://yurimodz-apis.xyz/api/rastreio?code=${q}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {text: mess.rastrearEncomenda(data, q)}, {quoted:info}).catch(e => {
return reply(mess.error())
})
break

case 'e-sportnews': 
case 'gamesnews': 
case 'gamenews':
if(!q) return reply(mess.syntaxNewsGame(prefix))
if (args[0] === '-cod') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=cod&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-csgo') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=csgo&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-fifa') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=fifa&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-fortnite') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=fortnite&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-gamexp') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=gamexp&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-pes') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=pes&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-lol') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=lol&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-pokemon') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=pokemon&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-rainbow-6') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=rainbow-6&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-valorant') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=valorant&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-tcg') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/e-sports_noticias?query=tcg&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: ABC.resultado[0].linkImagem}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
}
break



case 'esporte_news': 
case 'esportenoticias': 
case 'esportenews':
if(!q) return reply(mess.syntaxNewsEsportes(prefix))
if (args[0] === '-all') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-futebol') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=futebol&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-futsal') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=futsal&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-skate') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=skate&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-surfe') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=surfe&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-basquete') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=basquete&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-volei') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=volei&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-tenis') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=tenis&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-atletismo') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=atletismo&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-natacao') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=natacao&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-ciclismo') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=ciclismo&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-boxe') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=boxe&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-beisebol') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=beisebol&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-futebol-eua') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=futebol-americano&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
} 
} else if (args[0] === '-judo') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=judo&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
}
} else if (args[0] === '-ginastica') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=ginastica-artistica&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
} 
} else if (args[0] === '-golfe') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=golfe&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
} 
} else if (args[0] === '-formula-1') {
try {
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/esporte_noticias?esporte=formula-1&apikey=${SANDRO_MD_BOT}`);
RST = ""
RST += `${ABC.resultado.map(v => `*${v.titulo}*\n‚Ä¢ ${v.trechoManchete}`).join('\n‚Äì\n')}`
sandro.sendMessage(from,{image: {url: "https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg"}, caption: RST}, {quoted:info})
} catch(e) {
return reply(mess.error())
} 
}
break
/*
case 'prox_jogo':
case 'proximojogo':
if (!q) return reply("Voc√™ esqueceu de colocar o nome do time, o qual voc√™ deseja saber informa√ß√µes sobre os pr√≥ximos jogos!")
timeMap = {"S√£o Paulo": "sao-paulo", "Am√©rica-MG": "america-mg", "Atl√©tico-MG": "atletico-mg"};
qModified = Object.keys(timeMap).reduce((acc, word) => acc.replace(new RegExp(word, "ig"), timeMap[word]), q.toLowerCase());
encModified = encodeURIComponent(qModified);
try {
setTimeout(() => {reagir(from, "‚öΩ")}, 50)
data = await fetchJson(`http://api.baddeveloper.space:25572/api/prox_jogo?time=${encModified}`);
if(data.jogos.length == 0) return reply("N√£o tem nenhuma *resposta do servidor*, ou seja, _n√£o existe nenhum jogo confirmado ainda pelo time._")
reply(`‚Ä¢ Dia(s) do(s) jogo(s) confirmado(s) a serem jogados:\n\t‚Ä¢ Time: *${q}*\n‚Äì\n${data.jogos.map((v, index) => `*${index+1}.* ${v.liga} ‚Ä∫ *${v.data}* | ${v.timeCasa} x ${v.timeVisitante}`).join("\n‚Äì‚Äì\n")}`)
} catch(error) {
setTimeout(() => {reagir(from, "‚ùåÔ∏è")}, 50)
reply(mess.error())
}
break


case 'meutime':
if (!q) return reply('Informe o nome do time.');
try {
setTimeout(() => {reagir(from, "‚öΩ")}, 50)
data = await fetchJson(`http://api.baddeveloper.space:25572/api/meutime?q=${q}`);
if (data.resultado.length === 0) return reply('Nenhum time encontrado.');
reply(`‚öΩ | ùêàùêçùêÖùêéùêëùêåùêÄùêÇÃßùêéÃÉùêÑùêí ùêìùêàùêåùêÑ:\n‚Äì\n‚Ä∫ Time informado: *${q}*\n‚Ä∫ Coloca√ß√£o/posi√ß√£o atual do time: *${data.resultado[0].position}¬∞*\n‚Ä∫ Quantidade de Pontos no time: *${data.resultado[0].points}*\n‚Ä∫ Quantidade de jogo(s) disputado(s) pelo time: *${data.resultado[0].gamesPlayed}*\n‚Ä∫ Quantidade de jogo(s) empatado(s) pelo time: *${data.resultado[0].draws}*\n‚Ä∫ Quantidade de jogo(s) de perdidos/derrota do time: *${data.resultado[0].losses}*\n‚Äî\n‚Ä∫ Quantidade de gols sofridos pelos time(s) advers√°rio(s): *${data.resultado[0].goalsFor}*\n‚Ä∫ Quantidade de gols feitos: *${data.resultado[0].goalsAgainst}*\n‚Ä∫ Quantidade total de saldo de gols feito pelo time: *${data.resultado[0].goalDifference}*\n‚Äî\n‚Ä∫ Aproveitamento (%): *${data.resultado[0].approval}%*`);
} catch(error) {
setTimeout(() => {reagir(from, "‚ùåÔ∏è")}, 50)
reply(mess.error());
}
break;
*/
case 'imdb':
if (!q) return reply(`‚Ä¢ Para realizar a pesquisa do filme no *IMDb* √© necess√°rio conter pelo menos um g√™nero ou nome do filme.\n      ‚Ä¢ Exemplo: *${prefix}imdb A√ß√£o*\n‚Äì\nüîç Saber mais informa√ß√µes sobre o filme pesquisado? Use: *${prefix}imdbinfo [link]*\n      ‚Ä¢ Lembrando que o *link do filme* para ser usado ele √© apresentado na pesquisa, *se obter sucesso.*\n          ‚Ä¢ Exemplo: *https://m.imdb.com/title/tt6495770/?ref_=fn_al_tt_5*`)
AB = await fetchJson(`https://yurimodz-apis.xyz/api/search/imdb?query=${q}&apikey=${SANDRO_MD_BOT}`)
ABC = `‚Ä¢ ùêàùêåùêÉùêõ ùêèùêÑùêíùêêùêîùêàùêíùêÄ - *( ${date} ${hora} )*\n     ‚Ä¢ *Nota:* Para ver as informa√ß√µes do filme de uma forma detalhada, use o comando: *${prefix}imdbinfo [link do filme]*\n         Exemplo: *${prefix}imdbinfo ${AB.resultado[0].url}*\n‚Äì\n`
ABC += AB.resultado.map((v, index) => `*1.* T√≠tulo: *${v.title}*\n‚Ä¢ Ano de Lan√ßamento: *${v.release}*\n‚Ä¢ Cr√©ditos principais: *${v.topCredits[0]} e ${v.topCredits[1]}*\n‚Ä¢ Link: *${v.url}*`).join('\n‚Äì\n')
reply(ABC).catch(e => {
return reply(mess.error())
})
break;

case 'imdbinfo':
if(!q.includes("m.imdb.com")) return reply("Coloque o link do filme que voc√™ deseja puxar informa√ß√µes.")
try {
RST = await fetchJson(`https://yurimodz-apis.xyz/api/search/imdb_info?url=${q}&apikey=${SANDRO_MD_BOT}`)
ABC = `‚Ä¢ ùêàùêåùêÉùêõ ùêàùêçùêÖùêé - *( ${date} ${hora} )*\n‚Äì\n‚Ä¢ T√≠tulo em Portugu√™s: *${RST.resultado.titulo}*\n‚Ä¢ T√≠tulo Original: *${RST.resultado.tituloOriginal}*\n‚Äì\n‚Ä¢ Trama/Sinopse: *${RST.resultado.trama}*\n‚Äì\n‚Ä¢ Status do filme: *${RST.resultado.status}*\n‚Ä¢ Data de lan√ßamento: *${RST.resultado.dataLancamento.dia}.${RST.resultado.dataLancamento.mes}.${RST.resultado.dataLancamento.ano}*\n‚Ä¢ Dura√ß√£o do filme: *${RST.resultado.duracao}*\n‚Ä¢ N√∫meros de certificados: *${RST.resultado.certificado}*\n‚Äì\n‚Ä¢ Avalia√ß√£o total de usu√°rios: *${RST.resultado.avaliacaoTotalUsers}*\n‚Ä¢ Total de cr√≠ticas: *${RST.resultado.criticaTotal}*\n‚Äì\n‚Ä¢ Valor or√ßament√°rio: *$ ${RST.resultado.dinheiro.orcamento.valor}*\n‚Ä¢ Valor bruto por pa√≠ses: *$ ${RST.resultado.dinheiro.brutoPaises.valor}*\n‚Ä¢ Valor semanal: *$ ${RST.resultado.dinheiro.semana.valor}*\n‚Ä¢ Valor bruto pelo mundo: *$ ${RST.resultado.dinheiro.brutoMundial.valor}*\n‚Äì\n‚Ä¢ Pr√™mios: *${RST.resultado.avaliado.vitorias} vit√≥ria(s) e ${RST.resultado.avaliado.indicacoes} indica√ß√£o(s)*\n‚Ä¢ Disputando no rank em: *${RST.resultado.avaliado.rank}¬∞ lugar*\n‚Äì`
ABC += `\n‚Ä¢ Mixagens: *${RST.resultado.mixagens.map(v => `${v}`).join(', ')}*\n`
ABC += `‚Ä¢ Produ√ß√£o: *${RST.resultado.producao.map(v => `${v}`).join(', ')}*\n‚Äì\n`
ABC += `‚Ä¢ G√™nero(s): *${RST.resultado.genero.map(v => `${v}`).join(', ')}*\n‚Äì\n`
ABC += `‚Ä¢ *Elenco* - Atrizes e atores participantes do elenco principal do filme:\n‚Äì\n${RST.resultado.elencoPrincipal.map(v => `     ‚Ä¢ Nome: ${v.nome} - ( ${v.categoria} )\n     ‚Ä¢ Personagem(ns): *${v.personagem}*`).join('\n‚Äì\n')}\n‚Äì\n`
ABC += `‚Ä¢ *Cr√©ditos principais:*\n${RST.resultado.creditosPrincipais.map(v => `     ‚Ä¢ ${v.categoria}: *${v.creditos}*`).join('\n')}`
reply(ABC)
} catch(e) {
return reply(mess.error())
}
break;

case 'movie2':
if(!q) return reply("Coloque o nome do filme que voc√™ deseja puxar informa√ß√µes.")
try {
AB = await fetchJson(`https://yurimodz-apis.xyz/api/search/imdb?query=${q}&apikey=${SANDRO_MD_BOT}`)
RST = await fetchJson(`https://yurimodz-apis.xyz/api/search/imdb_info?url=${AB.resultado[0].url}&apikey=${SANDRO_MD_BOT}`)
ABC = `‚Ä¢ ùêàùêåùêÉùêõ ùêàùêçùêÖùêé - *( ${date} ${hora} )*\n‚Äì\n‚Ä¢ T√≠tulo em Portugu√™s: *${RST.resultado.titulo}*\n‚Ä¢ T√≠tulo Original: *${RST.resultado.tituloOriginal}*\n‚Äì\n‚Ä¢ Trama/Sinopse: *${RST.resultado.trama}*\n‚Äì\n‚Ä¢ Status do filme: *${RST.resultado.status}*\n‚Ä¢ Data de lan√ßamento: *${RST.resultado.dataLancamento.dia}.${RST.resultado.dataLancamento.mes}.${RST.resultado.dataLancamento.ano}*\n‚Ä¢ Dura√ß√£o do filme: *${RST.resultado.duracao}*\n‚Ä¢ N√∫meros de certificados: *${RST.resultado.certificado}*\n‚Äì\n‚Ä¢ Avalia√ß√£o total de usu√°rios: *${RST.resultado.avaliacaoTotalUsers}*\n‚Ä¢ Total de cr√≠ticas: *${RST.resultado.criticaTotal}*\n‚Äì\n‚Ä¢ Valor or√ßament√°rio: *$ ${RST.resultado.dinheiro.orcamento.valor}*\n‚Ä¢ Valor bruto por pa√≠ses: *$ ${RST.resultado.dinheiro.brutoPaises.valor}*\n‚Ä¢ Valor semanal: *$ ${RST.resultado.dinheiro.semana.valor}*\n‚Ä¢ Valor bruto pelo mundo: *$ ${RST.resultado.dinheiro.brutoMundial.valor}*\n‚Äì\n‚Ä¢ Pr√™mios: *${RST.resultado.avaliado.vitorias} vit√≥ria(s) e ${RST.resultado.avaliado.indicacoes} indica√ß√£o(s)*\n‚Ä¢ Disputando no rank em: *${RST.resultado.avaliado.rank}¬∞ lugar*\n‚Äì`
ABC += `\n‚Ä¢ Mixagens: *${RST.resultado.mixagens.map(v => `${v}`).join(', ')}*\n`
ABC += `‚Ä¢ Produ√ß√£o: *${RST.resultado.producao.map(v => `${v}`).join(', ')}*\n‚Äì\n`
ABC += `‚Ä¢ G√™nero(s): *${RST.resultado.genero.map(v => `${v}`).join(', ')}*\n‚Äì\n`
ABC += `‚Ä¢ *Elenco* - Atrizes e atores participantes do elenco principal do filme:\n‚Äì\n${RST.resultado.elencoPrincipal.map(v => `     ‚Ä¢ Nome: ${v.nome} - ( ${v.categoria} )\n     ‚Ä¢ Personagem(ns): *${v.personagem}*`).join('\n‚Äì\n')}\n‚Äì\n`
ABC += `‚Ä¢ *Cr√©ditos principais:*\n${RST.resultado.creditosPrincipais.map(v => `     ‚Ä¢ ${v.categoria}: *${v.creditos}*`).join('\n')}`
reply(ABC)
} catch(e) {
return reply(mess.error())
}
break;

case 'sanime': case 'animetv':
if(!q) return reply("Voc√™ n√£o digitou nenhuma palavra ao lado do comando.")
try {
RST = await fetchJson(`https://yurimodz-apis.xyz/api/animetv_search?query=${q}&apikey=${SANDRO_MD_BOT}`)
ABC = `${RST.resultado.map(v => `‚Ä¢ T√≠tulo: *${v.title}* | *${v.type}*\n‚Ä¢ Foto: *${v.thumb}*\n‚Ä¢ Link: *${v.url}*`).join('\n‚Äì\n')}`
reply(ABC)
} catch(e) {
return reply(mess.error())
}
break;

case 'frases': case 'pensador':
if(!q) return reply(mess.noArgsSearch()+`Exemplo: *${prefix+command} Amor`);
AB = await fetchJson(`https://yurimodz-apis.xyz/search/pensador?query=${q}&apikey=${SANDRO_MD_BOT}`)
ABC = ""
ABC += `${AB.resultado.map(v => `‚Äú${v.frase}‚Äù`).join('\n‚Äì\n')}`
reply(ABC).catch(e => {
return reply(mess.error())
})
break;

case 'negativo':
if(!q) return reply("Voc√™ esqueceu de colocar o nome do aplicativo ap√≥s o comando.")
data = await fetch()
break;

case 'megadl':
if (!q.includes("mega.nz")) return reply(`Voc√™ esqueceu de colocar um link do *mega.nz* ap√≥s o comando.`);
try {
const { File } = require("megajs");
const fileListINFO = File.fromURL(q);
await fileListINFO.loadAttributes(); // Rodar a fun√ß√£o para executar o resultado.
if (fileListINFO.size >= 300000000) return reply(`üòø Infelizmente, n√£o foi poss√≠vel concluir a a√ß√£o, *pois o tamanho do arquivo excede o limite m√°ximo de 300MB.*`);
function formatSize(bytes){if(bytes >= 1073741824) {bytes = (bytes / 1073741824).toFixed(2) + " GB"} else if (bytes >= 1048576) {bytes = (bytes / 1048576).toFixed(2) + " MB"} else if(bytes >= 1024) {bytes = (bytes / 1024).toFixed(2) + " KB"} else if(bytes > 1) {bytes = bytes + " bytes"} else if(bytes == 1) {bytes = bytes + " byte"} else {bytes = "0 bytes"} return bytes};
sandro.sendMessage(from, {text: `ü§ñüí´ Por favor, aguarde alguns minutos! O arquivo est√° sendo baixado!\n‚Ä¢ Arquivo: *${fileListINFO.name}* - [${formatSize(fileListINFO.size)}]`, contextInfo: {forwardingScore: 1000000, isForwarded: true, forwardedNewsletterMessageInfo: {newsletterJid: channel}}}, {quoted: info});
const dataFileBuffer = await fileListINFO.downloadBuffer();
// Adicionadas extens√µes suportadas (zip, rar, 7z, jpg, png, zip) √† lista.
if (/mp4/.test(fileListINFO.name)) {
await sandro.sendMessage(from, {document: dataFileBuffer, caption: fileListINFO.name, mimetype: "video/mp4", fileName: `Download Completo! Obrigado por esperar *${pushname}*...`}, {quoted: selo});
} else if (/mp3|mpeg/.test(fileListINFO.name)) {
await sandro.sendMessage(from, {document: dataFileBuffer, caption: fileListINFO.name, mimetype: "audio/mpeg", fileName: `Download Completo! Obrigado por esperar *${pushname}*...`}, {quoted: selo});
} else if (/pdf/.test(fileListINFO.name)) {
await sandro.sendMessage(from, {document: dataFileBuffer, caption: `Download Completo: *100%* - ${fileListINFO.name}`, mimetype: "application/pdf", fileName: fileListINFO.name}, {quoted: selo});
} else if (/txt/.test(fileListINFO.name)) {
await sandro.sendMessage(from, {document: dataFileBuffer, caption: `Download Completo! Obrigado por esperar *${pushname}*...`, mimetype: "text/plain", fileName: fileListINFO.name}, {quoted: selo});
} else if (/zip/.test(fileListINFO.name)) {
await sandro.sendMessage(from, { document: dataFileBuffer, caption: `Download Completo! Obrigado por esperar *${pushname}*...`, mimetype: "application/zip", fileName: fileListINFO.name}, {quoted: selo});
} else if (/rar/.test(fileListINFO.name)) {
await sandro.sendMessage(from, { document: dataFileBuffer, caption: `Download Completo! Obrigado por esperar *${pushname}*...`, mimetype: "application/x-rar-compressed", fileName: fileListINFO.name }, {quoted: selo});
} else if (/7z/.test(fileListINFO.name)) {
await sandro.sendMessage(from, {document: dataFileBuffer, caption: `Download Completo! Obrigado por esperar *${pushname}*...`, mimetype: "application/x-7z-compressed", fileName: `${fileListINFO.name}` }, {quoted: selo});
} else if (/jpg|jpeg/.test(fileListINFO.name)) {
await sandro.sendMessage(from, {document: dataFileBuffer, caption: `Download Completo! Obrigado por esperar *${pushname}*...`, mimetype: "image/jpeg", fileName: fileListINFO.name}, {quoted: selo});
} else if (/png/.test(fileListINFO.name)) {
await sandro.sendMessage(from, {document: dataFileBuffer, caption: `Download Completo! Obrigado por esperar *${pushname}*...`, mimetype: "image/png", fileName: fileListINFO.name}, {quoted: selo});
} else if (/apk/.test(fileListINFO.name)) {
await sandro.sendMessage(from, {document: dataFileBuffer, caption: `Download Completo! Obrigado por esperar *${pushname}*...`, mimetype: "application/vnd.android.package-archive", fileName: fileListINFO.name}, {quoted: selo});
} else {
return reply('- Desculpe-me, ocorreu um erro ao encaminhar o arquivo!üòø O formato de arquivo apresentado n√£o √© suportado.');
}
} catch (error) {
  return console.log(`Error: ${error.message}`);
}
break;

case 'dicionario': 
if (!q) return reply(mess.noArgsSearch()+`Exemplo: *${prefix+command} [palavra]*`)
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/dicionario?q=${q}&apikey=${SANDRO_MD_BOT}`)
reply(`${ABC.significado}`).catch(e => {
reply(mess.error());
})
break;

case 'encurtalink': 
case 'tinyurl':
if(args.length < 1) return reply(`‚ùåÔ∏è *Forma incorreta, use est√° como exemplo:* ${prefix + command} https://instagram.com/sandrobot.wpp`)
anu = await axios.get(`https://tinyurl.com/api-create.php?url=${q}`)
reply(`*Link encurtado com sucesso, aqui est√°:* ${anu.data}`).catch(e => {
reply(mess.error())
})
break

case 'encurtarlink2': 
case 'cuttly':
if(args.length < 1) return reply(`‚ùåÔ∏è *Forma incorreta, use est√° como exemplo:* ${prefix + command} https://instagram.com/sandrobot.wpp`)
anu = await axios.get(`https://yurimodz-apis.xyz/api/linkshort/cuttly?link=${q}&apikey=${SANDRO_MD_BOT}`)
reply(`*Link encurtado com sucesso, aqui est√°:* ${anu.data.result}`).catch(e => {
emror = String(e)
reply(mess.error())
})
break

case 'biografia':
case 'bio':
try {
status = (await sandro.fetchStatus(sender_ou_n)).status
} catch {
status = "üîí Privada üîí"
}
reply(status)
break

case 'encurtarlink3': 
case 'bitly':
if(args.length < 1) return reply(`‚ùåÔ∏è *Forma incorreta, use est√° como exemplo:* ${prefix + command} https://instagram.com/sandrobot.wpp`)
anu = await axios.get(`https://yurimodz-apis.xyz/api/linkshort/bitly?link=${q}&apikey=${SANDRO_MD_BOT}`)
reply(`*Link encurtado com sucesso, aqui est√°:* ${anu.data.result}`).catch(e => {
reply(mess.error())
})
break

case 'jogo': 
case 'jogos': 
case 'game': 
case 'games': 
// @Darkzy7
if (!q) return reply(`Voc√™ esqueceu de colocar o nome do jogo ap√≥s o comando.`)
const gamesearch = await axios.get(`https://api.rawg.io/api/games?key=34e936a681924c8cba8711d2dacb999e&search=${q}&page_size=1`)
let searchapi = gamesearch.data.results[0]
if (gamesearch.data.results.length == 0) return await reply("Sem resultados para sua pesquisa, tente novamente mais tarde...");
titulo = searchapi.name
let genero = '';
for (let i = 0; i < searchapi.genres.length; i++) {
genero += `${searchapi.genres[i].name}, `;}
genero += `${searchapi.genres[searchapi.genres.length - 1].name}`;
let plataforma = '';
for (let i = 0; i < searchapi.platforms.length; i++) {
plataforma += `${searchapi.platforms[i].platform.name}, `;}
plataforma += `${searchapi.platforms[searchapi.platforms.length - 1].platform.name}`;
let compreaqui = '';
if (searchapi.stores !== null) {
for (let i = 0; i < searchapi.stores.length; i++) {
compreaqui += `${searchapi.stores[i].store.name}, `;}
compreaqui += `${searchapi.stores[searchapi.stores.length - 1].store.name}`;
let tempodejogatina = searchapi.playtime
let datadelancamento = searchapi.released
let avaliacaodojogo = searchapi.rating
let rating_top = searchapi.rating_top
let esrb = gamesearch.data.results[0].esrb_rating === null ? '' : gamesearch.data.results[0].esrb_rating.name;
sandro.sendMessage(from, {image: await getBuffer(searchapi.background_image), caption: mess.gamesResult(titulo, genero, plataforma, compreaqui, tempodejogatina, datadelancamento, avaliacaodojogo, rating_top, esrb)}, {quoted: info})
}
break;

case 'celular':
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} galaxy a9 2018`);
reply("[‚ùó] aguarde uns minutinho estou processado");
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/info_celular?celular=${q}&apikey=${API_SANDRO_MD}`);
reply(`üì± Celular: ${ABC.celular || "N√£o encontrado"}\n\nInforma√ß√µes:\n${ABC.resumo || ABC.infoc || "N√£o encontrado, seja mais espec√≠fico, a marca e a vers√£o"}`);
} catch (e) {
return reply("Erro...");
}
break;

case 'threads':
if(!q.includes("threads.net")) return reply("Por favor, adicione um link v√°lido do threads. (foto ou v√≠deo)");
try {
data = await fetchJson(`https://yurimodz-apis.xyz/api/dl/threads?url=${q}&apikey=${SANDRO_MD_BOT}`);
for (let i = 0; i < data.resultado.image_urls.length; i++) {
photos = await fetch(data.resultado.image_urls[i]).then(v => v.buffer())
sandro.sendMessage(from, {image: photos})
}
} finally {
for (let i = 0; i < data.resultado.video_urls.length; i++) {
videoUrl = await fetch(data.resultado.video_urls[i].download_url).then(v => v.buffer())
sandro.sendMessage(from, {video: videoUrl})
}
}
break

case 'spotify': {
if(!q.trim().includes("spotify")) return reply(`Cad√™ a url do spotiy? exemplo: ${prefix+command} https://open.spotify.com/intl-pt/track/4m3mrHuttXhK58f6Tenai1\nN√£o baixo playlist, quiser pegar o link da m√∫sica, acessa o site: https://open.spotify.com/search e pesquisa l√°.`)
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
try {
sandro.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/spotify?url=${q.trim()}&apikey=${API_SANDRO_MD}`}, mimetype: "audio/mpeg"}, {quoted: info}).catch(() => reply("Erro!"))
} catch (e) {
console.log(e);
return reply("Erro...");
}
}
break;
       
case 'reagir':
const reactionMessage = {
react: {
text: "ü•∞",
key: info.key
}
}
sendMsg = await sandro.sendMessage(from, reactionMessage)
break

case "ytsearch":
try {
if(!q) return reply(`Digite o nome de algum v√≠deo ou m√∫sica que deseja encontrar..`);
AB = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=${API_SANDRO_MD}`)
ABC = `${"-\t".repeat(13)}\n\n`
for (var i of AB) {
ABC += `Titulo: ${i.titulo}\nUrl: ${i.url}\npublicado`;
ABC += `${"-\t".repeat(13)}\n\n`
}
reply(ABC);
} catch (e) {
return reply(`Erro....`)
}
break

case 'pesquisa_yt': case 'ytsearch':
case 'pesquisa':
try {
if(!q.trim()) return reply(`Digite o nome de algum v√≠deo ou m√∫sica que deseja encontrar..`);
AB = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=${API_SANDRO_MD}`)
ABC = `${"-\t".repeat(13)}\n\n`
for (var i of AB) {
ABC += `Titulo: ${i.titulo}\nUrl: ${i.url}\nTempo: ${i.tempo}\nPostado: ${i.postado}\n\nDescri√ß√£o: ${i.desc}\n\n`;
ABC += `${"-\t".repeat(13)}\n\n`
}
reply(ABC);
} catch (e) {
return reply(`Erro....`)
}
break;

case 'play333':
await carregamento()
await sleep(3000)
if(!q) return reply(`${pushname} Cade o nome da musica?\n Exemplo: ${prefix}${command} MTG BARRACO DELA`)
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
try {
ytbr = await fetchJson(`http://br1.bronxyshost.com:4360/youtube/play?query=${q}&apikey=${SANDRO_MD}`)
ytbrt = `„ÄåüéµùêèùêãùêÄùêò ùêÄùêîùêÉùêàùêéüéµ„Äç
ü•Ç‚àÜùêÅùêÑùêå‚ú∞ùêïùêàùêçùêÉùêé‚àÜü•Ç

> ‚Ä¢ *T√≠tulo*: ${ytbr.Title}
> ‚Ä¢ *Author*: ${ytbr.Author} 
> ‚Ä¢ *Dura√ß√£o*: ${ytbr.Duration}
> ‚Ä¢ *Views*: ${ytbr.Viewer}
> ‚Ä¢ *Descri√ß√£o*: ${ytbr.Description}
> ‚Ä¢ *Link*: ${ytbr.Link}
> ‚Ä¢ *Site-api*: ${ytbr.site}
> ‚Ä¢ *Criador: SANDRO BOT*

> 0:35 ‚îÅ‚ùç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -${ytbr.Duration} ‚Üª ‚ä≤ ‚Ö° ‚ä≥ ‚Ü∫ VOLUME: ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá 100%`
sandro.sendMessage(from, {image: {url: `${ytbr.Thumb}`}, caption: ytbrt}, {quoted: info})
sandro.sendMessage(from, {audio: {url: `http://br1.bronxyshost.com:4360/youtube/mp3?url=${ytbr.Link}&apikey=${SANDRO_MD}` }, mimetype: "audio/mpeg"}, {quoted: info})
} catch (err) {
reply(`alguma coisa deu errado entre em contato com o Sandro para descobrir.`)
console.log(err)
} 
break

case 'play5': 
case 'p5':
if(!q) return reply(mess.syntaxDownloadMusic())
try {
data = await fetchJson(`https://yurimodz-apis.xyz/api/ytsrc/videos?q=${q}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from,{image: {url: `${data.resultado[0].image}`}, caption: mess.playResult(data)}, {quoted:info})
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=${data.resultado[0].url}&apikey=${SANDRO_MD_BOT}`}, fileName: data.resultado[0].title+'.mp3', mimetype: "audio/mpeg"}, {quoted: info}).catch(e => {
return reply(mess.error())
})
} catch(error) {
reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto...");
}
break

case 'playdoc':
try {
await carregamento()
await sleep(3000)
if(!q.trim()) return reply(`- Exemplo: ${prefix}play nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`)
data = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=${API_SANDRO_MD}`)
if(data[0]?.tempo?.length >= 7) return reply("Desculpe, este video ou audio √© muito grande, n√£o poderei realizar este pedido, pe√ßa outra m√∫sica abaixo de uma hora.")
var N_E = " N√£o encontrado."
var bla = `
> Titulo: ${data[0]?.titulo||N_E}
> Tempo: ${data[0]?.tempo||N_E}
> Postado: ${data[0]?.postado||N_E}
> Descri√ß√£o: ${data[0]?.desc||N_E}`
sandro.sendMessage(from, {image: {url: data[0]?.thumb || logoslink.logo}, caption: bla}, {quoted: info})
sandro.sendMessage(from, {document: {url: `https://api.bronxyshost.com.br/api-bronxys/play?nome_url=${q}&apikey=${API_SANDRO_MD}`}, mimetype: "audio/mpeg", fileName: data[0]?.titulo || "play.mp3"}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
console.log(e)
return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
}
break;

case 'ytmp4': 
if(!q) return reply(`Cada o link do video para eu baixar?\n\nExemplo: *${prefix+command} https://www.youtube.com/watch?v=hmBAvAugQqA&t=160s*`)
await reply(`Enviando.. caso demore de mais nao consegui te enviar `)
sandro.sendMessage(from, {video: {url: (`https://api.bronxyshost.com.br/api-bronxys/play_video?nome_url=${q}&apikey=${API_SANDRO_MD}`)}, mimetype: "video/mp4"}, {quoted: info}).catch(e => {
reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto...");
})
break

case 'console':   
if(!SoDono) return reply(Res_SoDono)
if(!isConsole) {
nescessario.consoleoff = true
setNes(nescessario)
reply(`- O comando de tirar o console foi ativado _- COM SUCESSO - _ Agora n√£o ver√° mais os comandos nem mensagem dadas no console, mas funcionar√° perfeitamente, ok?, √© bom para evitar banimento de spam no heroku.\n\nSe quiser Desativar - S√≥ digitar o comando novamente`)
} else if(isConsole) {
nescessario.consoleoff = false
setNes(nescessario)
reply(`- O comando de tirar o console foi Desativado  _- COM SUCESSO - _ Agora ver√° os comandos e mensagens dadas no console, mas se for utilizar no heroku, recomendo ativar. √© bom para evitar banimento de spam no heroku.\n\nSe quiser Ativar - S√≥ digitar o comando novamente`) 
}
break;

/*case 'play99':
reply(`erro mn`)
if(!q) return reply(mess.syntaxDownloadMusic());
try {
data = await fetchJson(`http://br1.bronxyshost.com:4360/youtube/play?query=${q}&apikey=${SANDRO_MD}`);
sandro.sendInteractiveIMG('./database/data/media/images/play-thumb.jpg', from, mess.playResult(data), "¬© sandro Supremacy", {participant: sender, quotedMessage: info.message}, {buttons: [{name: "quick_reply", buttonParamsJson: JSON.stringify({display_text: "„Äå ü©∏ „ÄçùêÉùêéùêÇùêîùêåùêÑùêçùêìùêé„Äå ü©∏ „Äç", id: `${prefix}ytdoc ${data.resultado[0].url}`})}, {name: "quick_reply", buttonParamsJson: JSON.stringify({display_text: "„Äå ü©∏ „ÄçùêÄùêîùêÉùêàùêé„Äå ü©∏ „Äç", id: `${prefix}ytmp3 ${data.resultado[0].url}`})}, {name: "quick_reply", buttonParamsJson: JSON.stringify({display_text: "„Äå ü©∏ „ÄçùêïùêàùêÉùêÑùêé„Äå ü©∏ „Äç", id: `${prefix}ytmp4 ${data.resultado[0].url}`})}]});
} catch(error) {
reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto...");
}
break*/

case 'soundcloud':
if(!q.trim().includes("soundcloud")) return reply("Cad√™ o link do soundcloud?")
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
try {
sandro.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/soundcloud?url=${q.trim()}&apikey=${API_SANDRO_MD}`}, mimetype: "audio/mpeg"}, {quoted: info})
} catch (e) {
console.log(e)
reply("Erro...")
}
break;


case 'play2':
case 'play3':
case 'play':
case 'play98': case 'play1': {
try {
await carregamento()
await sleep(3000)
if(!q.trim()) return reply(`Exemplo: ${prefix}play nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`)
data = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=${API_SANDRO_MD}`)
if(data[0]?.tempo?.length >= 7) return reply("Desculpe, este video ou audio √© muito grande, n√£o poderei realizar este pedido, pe√ßa outra m√∫sica abaixo de uma hora.")
var N_E = " N√£o encontrado."
var bla = `„Äî ùó£ùóüùóîùó¨ √Åùó®ùóóùóúùó¢ „Äï

> Ola: @${pushname}

> Titulo: ${data[0]?.titulo||N_E}
> Tempo: ${data[0]?.tempo||N_E}
> Postado: ${data[0]?.postado||N_E}
> Descri√ß√£o: ${data[0]?.desc||N_E}
> Criador: SANDRO BOT

> 0:35 ‚îÅ‚ùç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ-${data[0]?.tempo||N_E} ‚Üª ‚ä≤ ‚Ö° ‚ä≥ ‚Ü∫
> *VOLUME:* ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá 100%
> ƒ±lƒ±.lƒ±llƒ±lƒ±.ƒ±llƒ±..ƒ±lƒ±.lƒ±llƒ±lƒ±.ƒ±llƒ±`
sandro.sendMessage(from, {image: {url: data[0]?.thumb || logoslink?.logo}, caption: bla}, {quoted: info})
sandro.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/play?nome_url=${q}&apikey=${API_SANDRO_MD}`}, mimetype: "audio/mpeg", fileName: data[0]?.titulo || "play.mp3"}, {quoted: info}).catch(e => {
return reply(`_Ola ${pushname} N√£o foi poss√≠vel enviar o √°udio *${q}*. Por favor, selecione outra m√∫sica e tente novamente._`)
})
} catch (e) {
console.log(e)
return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
}
}
break;

/*case 'play':
case 'p2': 
    try {
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
        if (!q) return reply(mess.syntaxDownloadMusic());
        const ytbr = await fetchJson(`http://br1.bronxyshost.com:4360/youtube/play?query=${q}&apikey=${SANDRO_MD}`);
        const thumbBuffer = await getBuffer(ytbr.Thumb);
        fs.writeFileSync(`./database/data/media/images/play-thumb.jpg`, thumbBuffer);
        await sandro.sendInteractiveIMG('./database/data/media/images/play-thumb.jpg', from, mess.playResult(ytbr), "¬© ùôéùòºùôâùòøùôçùôä ùôàùòø", 
        {
            participant: sender,
            quotedMessage: info.message
        }, 
        {
            buttons: [
                {   // Configura√ß√£o dos bot√µes interativos
                    name: "single_select",
                    buttonParamsJson: JSON.stringify({
                        title: "ùêíùêÑùêãùêÑùêÇùêàùêéùêçùêÄùêë",
                        sections: [{
                            title: `¬© ùôéùòºùôâùòøùôçùôä ùôàùòø`,
                            rows: [
                                {
                                    header: `üîπùêÄùêîùêÉùêàùêéüîπ`,
                                    title: `${ytbr.Title}`,
                                    description: `¬© ùôéùòºùôâùòøùôçùôä ùôàùòø`,
                                    id: `${prefix}play4 ${ytbr.Title}`
                                },{
                                    header: `üîπùêïùêàùêÉùêÑùêéüîπ`,
                                    title: `${ytbr.Title}`,
                                    description: `¬© ùôéùòºùôâùòøùôçùôä ùôàùòø`,
                                    id: `${prefix}playvid ${ytbr.Title}`
                                },
                                {
                                    header: `üîπùêÉùêéùêÇùêîùêåùêÑùêçùêìùêéüîπ`,
                                    title: ` ${ytbr.Title}`,
                                    description: `¬© ùôéùòºùôâùòøùôçùôä ùôàùòø`,
                                    id: `${prefix}playdoc ${ytbr.Title}`							
                               
                                }
                            ]
                        }]
                    })
                }
            ]
        });
    } catch (e) {
        console.error(e);
        reply("‚ùå *Ocorreu um erro!* ‚ùå");
    }
    break*/

case 'play4': 
await carregamento()
await sleep(3000)
if(!q) return reply(`${pushname} Cade o nome da musica?\n Exemplo: ${prefix}${command} MTG BARRACO DELA`)
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
try {
ytbr = await fetchJson(`http://br1.bronxyshost.com:4360/youtube/play?query=${q}&apikey=${SANDRO_MD}`)
ytbrt = `„ÄåüéµùêèùêãùêÄùêò ùêÄùêîùêÉùêàùêéüéµ„Äç
ü•Ç‚àÜùêÅùêÑùêå‚ú∞ùêïùêàùêçùêÉùêé‚àÜü•Ç

> ‚Ä¢ *T√≠tulo*: ${ytbr.Title}
> ‚Ä¢ *Author*: ${ytbr.Author} 
> ‚Ä¢ *Dura√ß√£o*: ${ytbr.Duration}
> ‚Ä¢ *Views*: ${ytbr.Viewer}
> ‚Ä¢ *Descri√ß√£o*: ${ytbr.Description}
> ‚Ä¢ *Link*: ${ytbr.Link}
> ‚Ä¢ *Site-api*: ${ytbr.site}

> 0:35 ‚îÅ‚ùç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -${ytbr.Duration} ‚Üª ‚ä≤ ‚Ö° ‚ä≥ ‚Ü∫ VOLUME: ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá 100%`
sandro.sendMessage(from, {image: {url: `${ytbr.Thumb}`}, caption: ytbrt}, {quoted: info})
sandro.sendMessage(from, {audio: {url: `http://br1.bronxyshost.com:4360/youtube/mp3?url=${ytbr.Link}&apikey=${SANDRO_MD}` }, mimetype: "audio/mpeg"}, {quoted: info})
} catch (err) {
reply(`${err}`)
console.log(err)
} 
break

case "letra": case "liryc": case "letram": case "letramusic": case "letramusica": {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} Cansei de me apegar`)
try {
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
const abc = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/letra_musica?letra=${q.trim()}&apikey=${API_SANDRO_MD}`)
reply(` - Titulo: ${abc.titulo}\n\n - Compositor: ${abc.compositor}\n\n - Letra: ${abc.letra}`)
} catch (e) {
reply("Erro...")
}
}
break;

case 'faceaudio':
try {
if(!q.includes("facebook") && !q.includes("fb.watch")) return reply(`Exemplo: ${prefix+command} o link do Facebook`);
reply("[‚ùó] aguarde uns minutinho estou processado")
sandro.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/${command}?url=${q}&apikey=${API_SANDRO_MD}`}, mimetype: "audio/mpeg"}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

/*
case 'p22':
if(!q) return reply(mess.syntaxDownloadMusic());
try {
data = await fetchJson(`https://yurimodz-apis.xyz/api/ytsrc/videos?q=${q}&apikey=${SANDRO_MD_BOT}`);
Lrows = []
for(let v of data.resultado) {
Lrows.push({title: v.title, description: `${v.description}`, id: `${prefix}play ${v.title}`, header: `Tipo: √Åudio > Canal: ${v.author.name} | Dura√ß√£o: ${v.duration.timestamp}`}, {title: v.title, description: v.description, id: `${prefix}playvid ${v.title}`, header: `Tipo: V√≠deo > Canal: ${v.author.name} | Dura√ß√£o: ${v.duration.timestamp}`})
};
await sandro.relayMessage(from, {interactiveMessage: {body: {text: `‚∏∫ÕüÕûÍ™∂ùêòùêéùêîùêìùêîùêÅùêÑ - ùêèùêãùêÄùêò ùêïùüêÍ´Ç ‚ô™`}, footer: {text: `${tempo}, ${pushname}! Aqui est√° o resultado da sua pesquisa, selecione a m√∫sica a qual voc√™ deseja baixar.`}, contextInfo: {participant: sender, quotedMessage: info.message}, nativeFlowMessage: {buttons: [{name: "single_select", buttonParamsJson: JSON.stringify({title: "SELECIONAR", sections: [{title: NomeDoBot, highlight_label: "", rows: Lrows}]})}]}}}, {});
} catch(error) {
return await reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto...");
}
break
*/


case 'ytmp3':
if(!q) return reply(`Cad√™ o link do v√≠deo para eu baixar no formato de √°udio?\n\nExemplo: *${prefix+command} https://www.youtube.com/watch?v=hmBAvAugQqA&t=160s*`)
reply(`Enviando.. caso demore de mais nao consegui te enviar `)
sandro.sendMessage(from, {audio: {url: (`https://api.bronxyshost.com.br/api-bronxys/play?nome_url=${q}&apikey=${API_SANDRO_MD}`)}, mimetype: "audio/mpeg"}).catch(err => {
return reply(mess.error())
})
break

case 'ytdoc':
if(!q) return reply(`Por favor, insira um link de um *v√≠deo do YouTube* ap√≥s o comando.\n   ‚Ä¢ Exemplo: *${prefix+command} https://youtube.com/watch?v=JXGpTLg7qoQ*`)
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
sandro.sendMessage(from, {document: {url: `https://api.bronxyshost.com.br/api-bronxys/play?nome_url=${q}&apikey=${API_SANDRO_MD}`}, fileName: '.mp3', mimetype: "audio/mpeg"}, {quoted: info}).catch(e => {
reply(`Alguma coisa deu errado...`)
})
break


case 'ytaudio': 
case 'ytvideo': 
case 'ytdoc1':
if(!q) return reply("Voc√™ esqueceu de adicionar um link de um v√≠deo, ap√≥s o comando.")
reply(enviar.espere)
if(cmd == "ytmp3" || cmd == "ytaudio") {
try {
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=${q}&apikey=${SANDRO_MD_BOT}`}}, {quoted: info})
.catch((error) => {return reply(mess.error())})
} catch(error) {return console.error(error)}
} else if(cmd == "ytmp4" || cmd == "ytvideo") {
try {
sandro.sendMessage(from, {video: {url: `https://yurimodz-apis.xyz/api/dl/ytvideo?url=${q}&apikey=${SANDRO_MD_BOT}`}}, {quoted: info})
.catch((error) => {return reply(mess.error())})
} catch(error) {return console.error(error)}
} else if(cmd == "ytdoc") {
try {
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=${q}&apikey=${SANDRO_MD_BOT}`}}, {quoted: info})
.catch((error) => {return reply(mess.error())})
} catch(error) {return console.error(error)}
}
break

case 'shazam':
if (!isQuotedAudio) return reply('Envie o √°udio para eu detectar o nome da m√∫sica!')
dataMedia = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage, 'audio')
let mime = (quoted.info || quoted).mimetype || ""
let m = mime.split('/')[1]
fs.writeFileSync(`./database/data/media/audios/shazam/shazam-${sender}.mp3`, dataMedia)
let aud_ = fs.readFileSync(`./database/data/media/audios/shazam/shazam-${sender}.mp3`, {encoding: "base64" })
try {
let hasil = await arcloud(aud_)
data = await fetchJson(`https://yurimodz-apis.xyz/api/ytsrc/videos?q=${hasil[0].titulo}&apikey=${SANDRO_MD_BOT}`)
} catch (e) {
reply ('Desculpe, n√£o consegui identificar a m√∫sica. Por favor, tente novamente!Ô∏è')
}
shzi = await getBuffer(data.resultado[0].image)
sandro.sendMessage(from, {image: shzi, caption: mess.shazamResult(data)}, {quoted: selo})
audioShz = await getBuffer(`https://yurimodz-apis.xyz/api/dl/ytaudio?url=${data.resultado[0].url}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {audio: audioShz, mimetype: 'audio/mpeg'}).catch((e) => {
reply(mess.error())
})
DLT_FL(`./database/data/media/audios/shazam/shazam-${sender}.mp3`)
break

case 'playmix': 
case 'pmix':
if(!q) return reply(mess.syntaxPlayMix())
data = await fetchJson(`https://yurimodz-apis.xyz/api/ytsrc/videos?q=${q}&apikey=${SANDRO_MD_BOT}`)
// Enviar a thumbnail + nomes das m√∫sicas. 
sandro.sendMessage(from,{image: {url: `${data.resultado[0].image}`}, caption: mess.playMixResult(data)})
// Enviar os √°udios. 
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=${data.resultado[0].url}&apikey=${SANDRO_MD_BOT}`}, mimetype: "audio/mpeg"}).catch(e => {
return reply(mess.error())
})
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=${data.resultado[1].url}&apikey=${SANDRO_MD_BOT}`}, mimetype: "audio/mpeg"}).catch(e => {
return reply(mess.error())
})
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=${data.resultado[2].url}&apikey=${SANDRO_MD_BOT}`}, mimetype: "audio/mpeg"}).catch(e => {
return reply(mess.error())
})
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=${data.resultado[3].url}&apikey=${SANDRO_MD_BOT}`}, mimetype: "audio/mpeg"}).catch(e => {
return reply(mess.error())
})
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=${data.resultado[4].url}&apikey=${SANDRO_MD_BOT}`}, mimetype: "audio/mpeg"}).catch(e => {
return reply(mess.error())
})
break

case 'audiomeme': 
case 'playmeme':
if(!q) return reply(`NaN, voc√™ n√£o digitou nada... Exemplo: *${prefix+command} Lula*`);
reagir(from, "üò∏")
try {
bla = await fetchJson(`https://yurimodz-apis.xyz/api/audiomeme?query=${q}&apikey=${SANDRO_MD_BOT}`)
teks = pickRandom(bla.resultado)
sandro.sendMessage(from, {audio: {url: teks}, mimetype: "audio/mpeg", ptt:true}, {quoted: selo})
} catch(e) {
reagir(from, "üòø")
reply("Sem Resultados.");
}
break;

case 'audiomeme2': 
case 'playmeme2':
if(!q) return reply(`NaN, voc√™ n√£o digitou nada... Exemplo: *${prefix+command} Lula*`);
reagir(from, "üò∏")
try {
bla = await fetchJson(`https://yurimodz-apis.xyz/api/audiomeme?query=${q}&apikey=${SANDRO_MD_BOT}`)
teks = pickRandom(bla.resultado)
sandro.sendMessage(from, {audio: {url: teks}, mimetype: "audio/mpeg", ptt:true}, {quoted: selo})
} catch(e) {
reagir(from, "üòø")
reply("Sem Resultados.");
}
break;

case 'ringtone': 
case 'meloboom': 
case 'toque':
if(!q) return reply(`NaN, voc√™ n√£o digitou nada... Exemplo: *${prefix+command} iPhone*`);
setTimeout(() => {reagir(from, "ü´®")}, 100)
try {
bla = await fetchJson(`https://yurimodz-apis.xyz/api/ringtone?query=${q}&apikey=${SANDRO_MD_BOT}`)
teks = pickRandom(bla.resultado.resultado);
mention(`Ol√° @${sender.split("@")[0]}, o toque est√° intitulado como: *${teks.titulo}*.\n‚Ä¢ Deseja mais? √â s√≥ pedir, que eu t√¥ enviando! Voc√™ manda e eu obede√ßo.`)
sandro.sendMessage(from, {audio: {url: teks.audio}, mimetype: "audio/mpeg", ptt:true})
} catch(e) {
return reply(mess.error())
}
break;

case 'imgpralink':
case 'gerarlink2':
  try {
    if (isQuotedImage) {
      boij = isQuotedImage || isQuotedVideo 
        ? JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage 
        : info;
      const fetch = require('node-fetch');
      const FormData = require('form-data');
      async function uploadImageToImgur(imageBuffer) {
        const form = new FormData();
        form.append('image', imageBuffer, { filename: 'image.jpg' });
        const response = await fetch('https://api.imgur.com/3/image', {
          method: 'POST',
          body: form,
          headers: {
            'Authorization': 'Client-ID 0d900984933aada'
          }
        });
        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers.raw());
        const data = await response.json();
        console.log('Response data:', data); 
        if (response.ok && data.data && data.data.link) {
          return data.data.link;
        } else {
          throw new Error('Failed to retrieve the image URL from the response.');
        }
      }
      const owgi = await getFileBuffer(boij, "image");
      const imageUrl = await uploadImageToImgur(owgi);
      reply(imageUrl);
    } else {
      reply('Marque a foto.');
    }
  } catch (e) {
    console.log('Error details:', e); 
    reply('Erro...');
  }
  break;

case 'imgpraanime': 
case 'animeia': 
case 'toanime':
if((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
imagem = await downloadContentFromMessage(post, 'image')
base64 = Buffer.from([])
for await(const send of imagem) { base64 = Buffer.concat( [ base64, send ] ) }
reply(`Criando seu avatar, aguarde! N√£o vai demorar muito amiguinho(a)...Ô∏è`)
link = await upload(base64)
data = await fetchJson(`https://yurimodz-apis.xyz/api/ia/toanime?link=${link}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: {url: data.resultado.imagem}}, {quoted: selo}).catch(e => {
return reply(mess.error())
})
} else {
reply('Mencione uma imagem para atribuir o efeito a foto.')
}
break

case 'hack': reply(JSON.stringify(info.message.extendedTextMessage.contextInfo, null, 50));
break;

case 'ler': 
case 'ocr': 
case 'lerfoto':  
if((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
imagem = await downloadContentFromMessage(post, 'image')
base64 = Buffer.from([])
for await(const send of imagem) { base64 = Buffer.concat( [ base64, send ] ) }
reply(enviar.espere)
link = await upload(base64)
data = await fetchJson(`https://yurimodz-apis.xyz/api/leitura/ocr?image=${link}&apikey=${SANDRO_MD_BOT}`)
reply(data.resultado).catch(e => {
return reply(mess.error())
})
} else {
reply("Mencione uma imagem, por favor!")
}
break

case 'nofap'://By: MisheruModz 
const datazinha = moment.tz('America/Sao_Paulo')
const MisheruModzNofap = datazinha.format('MM')
const NahidaSupremacyNofap = datazinha.date()
if (MisheruModzNofap !== '09') {
nahida.sendMessage(from, {text: `N√£o estamos no m√™s de setembro que √© o m√™s da nofap, mas isso n√£o significa que vc deve ir ver coisas 18+!!`},{quoted:info})
}//By: MisheruModz
const antipunheta = moment('01/09/24', 'DD/MM/YY')
const partiuvencer = NahidaSupremacyNofap - antipunheta.date() + 1
let patente = `Soldado üá∫üá¶`
if (partiuvencer >= 30) patente = `Monge ‚ôæÔ∏è`
else if (partiuvencer === 29) patente = `Rei üëë`
else if (partiuvencer === 28) patente = `General de Ex√©rcito ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê`
else if (partiuvencer === 27) patente = `Coronel ‚≠ê`
else if (partiuvencer === 26) patente = `Major üèÖüèÖüèÖüèÖüèÖ`
else if (partiuvencer === 25) patente = `Capit√£o üèÖüèÖüèÖ`
else if (partiuvencer === 24) patente = `Primeiro Tenente üèÖüèÖ`
else if (partiuvencer >= 21 && partiuvencer <= 23) patente = `Segundo Tenente üèÖ`
else if (partiuvencer >= 16 && partiuvencer <= 20) patente = `Aspirante a Oficial ‚öúÔ∏è‚öúÔ∏è`
else if (partiuvencer >= 14 && partiuvencer <= 15) patente = `Subtenente ‚öúÔ∏è`
else if (partiuvencer >= 11 && partiuvencer <= 13) patente = `Primeiro Sargento ü•á`
else if (partiuvencer >= 6 && partiuvencer <= 10) patente = `Segundo Sargento ü•à`
else if (partiuvencer >= 3 && partiuvencer <= 5) patente = `Terceiro Sargento ü•â`
else if (partiuvencer === 2) patente = `Cabo üéóÔ∏è`
sandro.sendMessage(from, {text: `*_Se voc√™ n√£o se masturbou e nem acessou conte√∫do 18+ desde 1 de setembro, sua patente agora √©:_* \n\n *Patente:* *${patente}*`},{quoted: info})
break

case 'deezer':
if(!q) return reply(`Exemplo: ${prefix+command} Ela n√£o √© santa`)
musicFind = (await axios.get(`https://api.deezer.com/search?q=${encodeURIComponent(q)}`)).data;
if (musicFind.length == 0) return reply(mess.noresult())
sandro.sendMessage(from, { text: mess.deezerMusic(musicFind.data[0], prefix)})
sandro.sendMessage(from, {audio: {url: musicFind.data[0].preview}, mimetype: 'audio/mpeg'}, {quoted: selo}).catch(e => {
return reply(mess.error())
})
break

case 'movie':
if (args.length == 0) return await reply(`Cad√™ o nome do filme o qual voc√™ deseja ver informa√ß√µes?`)
movieInfo = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=ddfcb99fae93e4723232e4de755d2423&query=${encodeURIComponent(q)}&language=pt`);
if (movieInfo.data.total_results == 0) return reply(mess.noresult())
var ImageMovieLink = `https://image.tmdb.org/t/p/original${movieInfo.data.results[0].backdrop_path}`;
var fotoFilme = await getBuffer(ImageMovieLink)
sandro.sendMessage(from, {image: fotoFilme, caption: mess.movies(movieInfo)}, {quoted: selo})
.catch(e => {
return reply(mess.error())
})
break

case 'fakechat': 
case 'fakemsg':
if(!isGroup) return reply(enviar.msg.grupo);
var [repplace, tarrget, bott] = q.split("|")
var m_ = info.message.extendedTextMessage && info.message.extendedTextMessage.contextInfo && info.message.extendedTextMessage.contextInfo.mentionedJid ? info.message.extendedTextMessage.contextInfo.mentionedJid[0] : null
if (m_ && tarrget && bott) {
sandro.sendMessage(from, {text: bott}, {quoted: {key: {fromMe: false, participant: m_}, message: {conversation: tarrget}}});
} else {
reply(`Crie mensagens fakes com qualquer uma pessoa! Explicando abaixo:\n‚Äî\n‚Ä¢ Voc√™ precisaria mencionar a pessoa e adicionar a mensagem que ele supostamente iria enviar e que voc√™ responderia a seguinte mensagem, todos usando a *|* para separar o que foi pedido dito nesse textinho...\n‚Ä¢ *Ex:* ${prefix+command} @vitima|msg1|msg2`);
}
break;

case 'spoiler': 
case 'morechat':
var [text1_a, text2_b] = q.split("/"); // Separador
if (!text1_a) text1_a = ""; // Caso o texto1 esteja vazio, vai retornar v√°zio o par√¢metro.
if (!text2_b) text2_b = ""; // Caso o texto2 esteja vazio, vai retornar v√°zio o par√¢metro.
reply(text1_a + String.fromCharCode(8206).repeat(4001) + text2_b); // Enviar o spoiler.
break;

case 'obesidade': 
case 'obeso': // @Crap </>
if(!q.includes("/")) return reply(`Ex.: *${prefix+command} peso/altura*`)
var [peso, altura] = q.split("/");
const resultado = obeso(peso, altura)
if (resultado <= 17 || resultado <= 18.4) {
await sandro.sendMessage(from, {react: {text: `üò∏`, key: info.key}})
reply(`‚Ä¢ Seu √≠ndice de massa corporal √© de: *${resultado}* -> Voc√™ est√° abaixo do peso.`)
} else if (resultado <= 18.5 || resultado <= 24.9) {
await sandro.sendMessage(from, {react: {text: `üëç`, key: info.key}})
reply(`‚Ä¢ Seu √≠ndice de massa corporal √©: *${resultado}* -> Voc√™ est√° no peso ideal.`)
} else if (resultado <= 25 || resultado <= 29.9) {
await sandro.sendMessage(from, {react: {text: `ü´§`, key: info.key}})
reply(`‚Ä¢ Seu √≠ndice de massa corporal √©: *${resultado}* -> Voc√™ est√° com sobrepeso.`);
} else if (resultado <= 30 || resultado <= 39.9) {
await sandro.sendMessage(from, {react: {text: `ü§®`, key: info.key}})
reply(`‚Ä¢ Seu √≠ndice de massa corporal √©: *${resultado}* -> Obesidade.`);
} else if (resultado > 40) {
await sandro.sendMessage(from, {react: {text: `üòµ`, key: info.key}})
reply(`‚Ä¢ Seu √≠ndice de massa corporal √©: *${resultado}* -> Obesidade m√≥rbida!`);
}
break;

case 'contardias': 
case 'countdays': 
if(!q.includes("/")) return reply(`Voc√™ esqueceu da */* para separar os campos.. Exemplo: *31/03/2024*`)
if(q.length < 10) return reply(`Deve conter a data completa *(dia/m√™s/ano)* ap√≥s o comando!\n‚Ä¢ Exemplo: *${prefix+command} 31/03/2024*`)
try {
const tempo = timeDate('DD/MM/YYYY')
countDay = countDays(q.split("/"), tempo.split("/"))
reply(`*${countDay}* dia(s).`)
} catch(e) {
return reply(mess.error())
}
break;

case 'serie':
if (args.length == 0) return await reply(`Cad√™ o nome da serie o qual voc√™ deseja ver informa√ß√µes?`)
serieInfo = await axios.get(`https://api.themoviedb.org/3/search/tv?api_key=ddfcb99fae93e4723232e4de755d2423&query=${encodeURIComponent(q)}&language=pt`);
if (serieInfo.data.total_results == 0) return reply(mess.noresult())
var ImageSerieLink = `https://image.tmdb.org/t/p/original${serieInfo.data.results[0].backdrop_path}`;
var fotoSerie = await getBuffer(ImageSerieLink)
sandro.sendMessage(from, {image: fotoSerie, caption: mess.series(serieInfo)}, {quoted: selo})
.catch(e => {
return reply(mess.error())
})
break

case 'soundcloud': case 'scdl':
if(!q) return reply(`T√° faltando a√≠! Cad√™ o link da m√∫sica no SoundCloud hein?`)
data = await fetchJson(`https://yurimodz-apis.xyz/api/soundcloud?url=${q}&apikey=${SANDRO_MD_BOT}`) 
tinyUrl = await axios.get(`https://tinyurl.com/api-create.php?url=${data.resultado.link_dl}`)
sandro.sendMessage(from, {image: {url: data.resultado.capa}, caption: mess.soundcloud(data, tinyUrl)}, {quoted: selo})
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/scdl?url=${q}&apikey=${SANDRO_MD_BOT}` }, mimetype: 'audio/mpeg'}, {quoted: selo}).catch(e => {
return reply(mess.error())
})
break

case 'tiktok_video':
case 'tiktokvideo':
case 'tiktok':
    try {
        await carregamento();
        await sleep(3000);
        reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`);
        if (!q.includes("tiktok")) return reply(`${prefix + command} link do Tiktok`);

        const texto = `Aqui est√° o seu v√≠deo ${pushname}`; // Texto que ser√° enviado junto com o v√≠deo
        sandro.sendMessage(
            from, 
            { 
                video: { url: `https://api.bronxyshost.com.br/api-bronxys/tiktok?url=${q}&apikey=${API_SANDRO_MD}` }, 
                mimetype: "video/mp4", 
                caption: texto // Adiciona o texto junto com o v√≠deo
            }, 
            { quoted: info }
        ).catch(e => {
            console.log(e);
            return reply("Erro..");
        });
    } catch (e) {
        console.log(e);
        return reply("Erro...");
    }
    break;

case 'tiktok_audio':
case 'tiktokaudio':
try {
await carregamento()
await sleep(3000)
reply(`·¥á…¥·¥†…™·¥Ä…¥·¥Ö·¥è.. ·¥Ñ·¥ÄÍú±·¥è ·¥Ö·¥á·¥ç·¥è Ä·¥á ·¥Ö·¥á ·¥ç·¥Ä…™Íú± …¥·¥Ä·¥è ·¥Ñ·¥è…¥Íú±·¥á…¢·¥ú…™ ·¥õ·¥á ·¥á…¥·¥†…™·¥Ä Ä`)
if(!q.includes("tiktok")) return reply(`${prefix+command} link do Tiktok`);
sandro.sendMessage(from, {audio: {url:`https://api.bronxyshost.com.br/api-bronxys/tiktok?url=${q}&apikey=${API_SANDRO_MD}`}, mimetype: "audio/mpeg"}, {quoted: info}).catch(e => {
console.log(e)
return reply("Erro..")
})
} catch (e) {
console.log(e)
return reply("Erro...");
}
break;

case 'kwai': {
if(!q.trim().includes("kwai")) return reply(`Exemplo: ${prefix+command} LINK DO KWAI`);
reply(enviar.aguarde);
try {
sandro.sendMessage(from, {video: {url: `https://api.bronxyshost.com.br/api-bronxys/kwai?url=${q.trim()}&apikey=${API_SANDRO_MD}`}, mimetype: "video/mp4"}, {quoted: info})
} catch (e) {
console.log(e);
return reply("Erro...");
}
}
break;

case 'spotify': {
if(!q.trim().includes("spotify")) return reply(`Cad√™ a url do spotiy? exemplo: ${prefix+command} https://open.spotify.com/intl-pt/track/4m3mrHuttXhK58f6Tenai1\nN√£o baixo playlist, quiser pegar o link da m√∫sica, acessa o site: https://open.spotify.com/search e pesquisa l√°.`)
reply(`Enviando.. caso demore de mais nao consegui te enviar `)
try {
sandro.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/spotify?url=${q.trim()}&apikey=${API_SANDRO_MD}`}, mimetype: "audio/mpeg"}, {quoted: info}).catch(() => reply("Erro!"))
} catch (e) {
console.log(e);
return reply("Erro...");
}
}
break;

case 'tiktokimg': case 'tiktokimage':
await carregamento()
await sleep(3000)
if(!q) return reply('Por favor, adicione um link do tiktok (imagens).')
reagir(from, "üòâ")
try {
data = await fetchJson(`https://yurimodz-apis.xyz/download/tiktok?url=${q}&apikey=${SANDRO_MD_BOT}`) 
if(data.resultado.photo.length === 0) return reply(`Ocorreu um erro ao abrir o link, por favor tente novamente mais tarde.`)
audioDl = await getBuffer(data.resultado.audio)
sandro.sendMessage(from, {audio: audioDl, mimetype: 'audio/mpeg'}, {quoted: selo})
for (let i = 0; i < data.resultado.photo.length; i++) {
photos = await fetch(data.resultado.photo[i].url).then(v => v.buffer())
sandro.sendMessage(from, {image: photos})
} 
} catch(e) {
reagir(from, "‚ùåÔ∏è")
reply(mess.error()+`\n‚Äì\n*Erro:* Isso n√£o √© uma sequ√™ncia de fotos, para baixar v√≠deos use: *${prefix}tiktok*`)
}
break

case 'capcut': case 'capcutmodel':
if(!q) return reply('Por favor, adicione um link de um modelo do CapCut.')
reagir(from, "üòº")
try {
data = await fetchJson(`https://yurimodz-apis.xyz/api/dl/capcut?url=${q}&apikey=${SANDRO_MD_BOT}`) 
c = await getBuffer(data.resultado.videoOriginal)
sandro.sendMessage(from, {video: c, caption: `‚Ä¢ *${data.resultado.title} | ${data.resultado.fullUse}*\n‚Ä¢ *Desc:* ${data.resultado.description}`}, {quoted: selo})
} catch(e) {
reply(mess.error())
}
break

//‚îÅ‚îÅCOMANDOS +18‚îÅ‚îÅ‚îÅ

case 'aqua': { // Sandro bot
    try {
    if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`)
        reply(`Enviando a imagem no pv...`);
        
        const response = await fetch(`https://sandroapi.shop/nsfw/aqua?apikey=${SANDRO_MD}`);
        const imageBuffer = await response.buffer();
        
        if (!imageBuffer) {
            return reply("Erro ao obter a imagem. Tente novamente mais tarde.");
        }

        // Gera informa√ß√µes aleat√≥rias
        const randomName = `Nome_${Math.floor(Math.random() * 100)}`;
        const randomLikes = Math.floor(Math.random() * 1000);
        const randomEmail = `sandromd${Math.floor(Math.random() * 100)}@exemplo.com`;

        // Monta o texto com as informa√ß√µes
        const infoText = `Nome: Sandro\nLikes: ${randomLikes}\nEmail: ${randomEmail}`;

        // Envia a imagem com o texto
        await sandro.sendMessage(sender, { 
            image: imageBuffer, 
            caption: `${infoText}\n\nAqui est√° a sua imagem.` 
        }, { quoted: info });

    } catch (e) {
        console.log(e);
        return reply("Erro ao enviar a imagem.");
    }
}
break;

case 'ass': //sandro api
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`)
reply(`Enviando.. No privado caso demore de mais nao consegui te enviar`)
const ass = await getBuffer(`http://br1.bronxyshost.com:4360/nsfw/ahegao?apikey=${SANDRO_MD}`);
sandro.sendMessage(sender, {image: ass}, {quoted: info});
break;

case 'bdsm': //sandro api
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`)
reply(`Enviando.. No privado caso demore de mais nao consegui te enviar`)
const bdsm = await getBuffer(`http://br1.bronxyshost.com:4360/nsfw/ahegao?apikey=${SANDRO_MD}`);
sandro.sendMessage(sender, {image: bdsm}, {quoted: info});
break;

case 'cuckold': //sandro api
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`)
reply(`Enviando.. No privado caso demore de mais nao consegui te enviar`)
const cuckold = await getBuffer(`http://br1.bronxyshost.com:4360/nsfw/ahegao?apikey=${SANDRO_MD}`);
sandro.sendMessage(sender, {image: cuckold}, {quoted: info});
break;

case 'blowjob': //sandro api
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`)
reply(`Enviando.. No privado caso demore de mais nao consegui te enviar`)
const blowjob = await getBuffer(`http://br1.bronxyshost.com:4360/nsfw/ahegao?apikey=${SANDRO_MD}`);
sandro.sendMessage(sender, {image: blowjob}, {quoted: info});
break;

case 'cum': //sandro api
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`)
reply(`Enviando.. No privado caso demore de mais nao consegui te enviar`)
const cum = await getBuffer(`http://br1.bronxyshost.com:4360/nsfw/cum?apikey=${SANDRO_MD}`);
sandro.sendMessage(sender, {image: cum}, {quoted: info});
break;

case 'gangbang': //sandro api
if(!isNsfw && isGroup) return reply(`√â necess√°rio que o comando seja ativado por um adm\nExemplo: ${prefix}modonsfw 1`)
reply(`Enviando.. No privado caso demore de mais nao consegui te enviar`)
const gangbang = await getBuffer(`https://sandroapi.shop/nsfw/gangbang?apikey=${SANDRO_MD}`);
sandro.sendMessage(sender, {image: gangbang}, {quoted: info});
break;

case 'insta_audio': case 'instaaudio':
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} o link`);
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/instagram?url=${q.trim()}&apikey=${API_SANDRO_MD}`)
reply(`Enviando.. caso demore de mais nao consegui te enviar `)
let DM_T = ABC.msg[0].type
var A_T = DM_T === "webp" ? "image/webp" : DM_T === "jpg" ? "image/jpeg" : DM_T === "mp3" ? "audio/mpeg" : "audio/mpeg"
sandro.sendMessage(from, {[A_T.split("/")[0]]: {url: ABC.msg[0].url}, mimetype: A_T}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

case 'multidl': case 'pocbi':
if(q.length < 5) return reply('Por favor, adicione um link de uma rede social de m√≠dia. (Ex.: Tiktok, insta, threads, etc...)');
try {
setTimeout(() => {reagir(from, "üòâ")}, 100)
data = await MultiDownload(q)
for (let i = 0; i < data.medias.length; i++) {
let dmt = data.medias[i].extension
mimety = dmt === "mp4" ? "video/mp4" : dmt === "webp" ? "image/webp" : dmt === "jpg" ? "image/jpeg" : dmt === "mp3" ? "audio/mpeg" : "video/mp4"
sandro.sendMessage(from, {[mimety.split("/")[0]]: {url: data.medias[i].url}, mimetype: mimety}, {quoted: info})
}
} catch(e) {
return reply(mess.error())
}
break

case 'menuadmb0':
if (isBotao) {
await sandro.relayMessage(from,
{interactiveMessage: {
body: { text: `*COMANDOS ADM*

*DESATIVA√á√ÉO‚ö†Ô∏è*`,
},nativeFlowMessage: {
buttons: [{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-LINK",
id: `${prefix}antilink 0`
}),},
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-LINK-GP",
id: `${prefix}antilinkgp 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-DOC",
id: `${prefix}antidoc 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANT-IIMG",
id: `${prefix}antiimg 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-VIDEO",
id: `${prefix}antivideo 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "X9-VISUUNICA",
id: `${prefix}x9visuunica 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-CONTATO",
id: `${prefix}antictt 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-AUDIO",
id: `${prefix}antiaudio 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "SO_ADM",
id: `${prefix}So_adm 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-STICKER",
id: `${prefix}antisticker 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "FECHAR GRUPO",
id: `${prefix}grupo f`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "anti-fake",
id: `${prefix}antifake 0`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ABRIR GRUPO",
id: `${prefix}grupo a`
}),}, 
            ],
            messageParamsJson: "",
          },
        },
      },
      {}
    ).then((r) => console.log(r));
} else {


}
break

case 'menuadmb':
if (isBotao) {
await sandro.relayMessage(from,
{interactiveMessage: {
body: { text: `*COMANDOS ADM*

*ATIVA√á√ÉO‚ö†Ô∏è*`,
},nativeFlowMessage: {
buttons: [{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-LINK",
id: `${prefix}antilink 1`
}),},
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-LINK-GP",
id: `${prefix}antilinkgp 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-DOC",
id: `${prefix}antidoc 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANT-IIMG",
id: `${prefix}antiimg 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-VIDEO",
id: `${prefix}antivideo 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "X9-VISUUNICA",
id: `${prefix}x9visuunica 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-CONTATO",
id: `${prefix}antictt 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-AUDIO",
id: `${prefix}antiaudio 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "SO_ADM",
id: `${prefix}So_adm 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ANTI-STICKER",
id: `${prefix}antisticker 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "FECHAR GRUPO",
id: `${prefix}grupo f`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "anti-fake",
id: `${prefix}antifake 1`
}),}, 
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "ABRIR GRUPO",
id: `${prefix}grupo a`
}),}, 
            ],
            messageParamsJson: "",
          },
        },
      },
      {}
    ).then((r) => console.log(r));
} else {


}
break

case 'igstory':
case 'instastorys':
case 'instastory':
if (!q) return reply(`Cad√™ o *usu√°rio da pessoa* que voc√™ deseja baixar os storys?\n     ‚Ä¢ Exemplo: *${prefix+command} @jaoferreira*`);
if (!q.includes("@")) return reply(`Coloque o *@* na frente do usu√°rio para obter um resultado positivo.\nüìå Exemplo: *${prefix+command} @jaoferreira*\n     ‚Ä¢ *N√£o use links de perfil*, coloque o @. Caso apresente um link o resultado ser√° negativo.\n     ‚Ä¢ Este comando s√≥ baixa storys, *para baixar reels ou entre outras variedades*, use: *${prefix}igdl [link do post/reels]*`);
await reagir(from, "üò∏");
try {
reply(`Buscando stories do usu√°rio: *${q}*, aguarde o retorno...`)
data = await fetchJson(`https://yurimodz-apis.xyz/api/dl/igstory?usuario=${q.replace("@", "")}&apikey=${SANDRO_MD_BOT}`)
for (let i = 0; i < data.resultado.length; i++) {
let dmt = data.resultado[i].extension
mimety = dmt === ".mp4" ? "video/mp4" : dmt === ".webp" ? "image/webp" : dmt === ".jpg" ? "image/jpeg" : dmt === ".mp3" ? "audio/mpeg" : "video/mp4"
sandro.sendMessage(from, {[mimety.split("/")[0]]: {url: data.resultado[i].url}, mimetype: mimety}, {quoted: info})
}
} catch (e) {
return reply(mess.error())
}
break

case 'twitter_video': case 'twittervideo':
try {
if(!q.includes("twitter")) return reply(`Exemplo: ${prefix+command} o link do Twitter`);
reply(`Enviando.. caso demore de mais nao consegui te enviar `)
sandro.sendMessage(from, {video: {url: `https://api.bronxyshost.com.br/api-bronxys/${command}?url=${q}&apikey=${API_SANDRO_MD}`}, mimetype: "video/mp4"}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

case 'twitter_audio': case 'twitteraudio':
try {
if(!q.includes("twitter")) return reply(`Exemplo: ${prefix+command} o link do Twitter`);
reply(`Enviando.. caso demore de mais nao consegui te enviar `)
sandro.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/${command}?url=${q}&apikey=${API_SANDRO_MD}`}, mimetype: "audio/mpeg"}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

case 'igstalk': case 'instastalk': case 'igsh':
if (!q) return reply(`Cad√™ o *usu√°rio da pessoa* que voc√™ deseja stalkear?\n     ‚Ä¢ Exemplo: *${prefix+command} @jaoferreira*`);
if (!q.includes("@")) return reply(`Coloque o *@* na frente do usu√°rio para obter um resultado positivo.\nüìå Exemplo: *${prefix+command} @jaoferreira*\n     ‚Ä¢ *N√£o use links de perfil*, coloque o @. Caso apresente um link o resultado ser√° negativo.`)
try {
reagir(from, "üò∏")
reply(`Buscando informa√ß√µes sobre o usu√°rio: *${q}* no Instagram.`)
data = await fetchJson(`https://yurimodz-apis.xyz/api/igstalk?usuario=${q.replace("@", "")}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {text: mess.igstalk(data), contextInfo: {externalAdReply: {title: "D√™ um clique aqui e visualize o perfil stalkeado.", thumbnail: await getBuffer(data.resultado.profile_photo), mediaType: 1, sourceUrl: "http://instagram.com/"+data.resultado.username}}}) 
} catch(e) {
return console.log(e)
}
break

case 'instaaudio': case 'igaudio':
if(q.length < 5) return reply('Por favor, forne√ßa o link de um *reels/video* do Instagram.')
reply(enviar.espere)
try {
setTimeout(() => {reagir(from, "üòâ")}, 100)
data = await fetchJson(`https://yurimodz-apis.xyz/api/instagram?url=${q}&apikey=${SANDRO_MD_BOT}`) 
audioInsta = await fetch(data.resultado[0]).then(v => v.buffer())
sandro.sendMessage(from, {audio: audioInsta, mimetype: 'audio/mpeg'}, {quoted: selo})
} catch(e) {
reply(mess.error())
}
break

case 'igreels': case 'instareels':
if (!q) return reply('Por favor, forne√ßa o link do v√≠deo de um *reels do Instagram*.');
reply(enviar.espere);
try {
setTimeout(() => {reagir(from, "üò∏")}, 100)
result = await fetchJson(`https://yurimodz-apis.xyz/api/instareels?url=${q}&apikey=${SANDRO_MD_BOT}`);
sandro.sendMessage(from, {video: {url: result.url}}, {quoted: selo})
} catch(e) {
reply(mess.error())
}
break;

case 'operadora':
if(!q) return reply(mess.syntaxOperadora(prefix))
reagir(from, "üîç")
try {
data = await fetchJson(`https://yurimodz-apis.xyz/api/operadora?numero=55${q}&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {text: mess.qualOperadora(data), contextInfo: {externalAdReply: {title: "Qual Operadora - Descubra qual √© a operadora antes de ligar.", thumbnail: await getBuffer("https://telegra.ph/file/d22b8f916d880564f26ed.jpg"), mediaType: 1, sourceUrl: `https://www.qualoperadora.net`}}}) 
} catch(e) {
return console.log(e)
}
break

case 'mediafire2':
if(!isVip) return reply(enviar.msg.vip)
try {
if(!q.includes("mediafire.com")) return reply("Faltando o link do mediafire para download do arquivo, cade?");
ABC = await fetchJson(`${API_URL}/api/dl/mediafire?url=${q}&apikey=${SANDRO_MD_BOT}`)
reply(`üìÇ *Nome:* ${ABC.resultado.filename}\nüßÆ *Tamanho:* ${ABC.resultado.size}\n_Criado em ${ABC.resultado.uploadDate}_`)
sandro.sendMessage(from, {document: {url: ABC.resultado.url}, mimetype: "application/"+ABC.resultado.filetype, fileName: ABC.resultado.filename}).catch(e => {
return reply("Erro..");
})
} catch (e) {
return reply("Erro..")
}
break

case 'mediafire':
try {
if(!q.includes("mediafire.com")) return reply("Faltando o link do mediafire para download do arquivo, cade?");
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/mediafire?url=${q}&apikey=${API_SANDRO_MD}`)
reply(`Enviando: ${ABC.resultado[0].nama}\n\nPeso: ${ABC.resultado[0].size}`)
sandro.sendMessage(from, {document: {url: ABC.resultado[0].link}, mimetype: "application/"+ABC.resultado[0].mime, fileName: ABC.resultado[0].nama}).catch(e => {
return reply("Erro..");
})
} catch (e) {
console.log(String(e))
return reply("Erro..")
}
break;

case 'gdrive': case 'googledrive':
if(!q.includes("drive.google.com")) return reply("Faltando o link do google drive para download do arquivo, cade?");
ABC = await fetchJson(`https://yurimodz-apis.xyz/api/dl/gdrive?url=${q}&apikey=${SANDRO_MD_BOT}`)
reply("Aguarde, estou encaminhando o arquivo. Pode demorar at√© *2min* para enviar!")
sandro.sendMessage(from, {document: {url: ABC.resultado.downloadUrl}, mimetype: ABC.resultado.mimetype, fileName: ABC.resultado.fileName}).catch(e => {
return reply(mess.error())  
})
break;

case 'gitclone':
let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
if (!q) return reply(`Exemplo: ${prefix}gitclone https://github.com/YajiirDev/avatar`)
if (!args[0]) reply(`Exemplo: ${prefix}gitclone https://github.com/YajiirDev/avatar`)
reply(enviar.espere)
if (!regex1.test(args[0])) return reply('Aguarde...')
let [, user, repo] = args[0].match(regex1) || []
repo = repo.replace(/.git$/, '')
let url = `https://api.github.com/repos/${user}/${repo}/zipball`
let filename = (await fetch(url, {method: 'HEAD'})).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
sandro.sendMessage(from, { document: { url: url }, fileName: filename+'.zip', mimetype: 'application/zip' }, { quoted: selo }).catch(e => {
return reply(mess.error())  
})
break

case 'editanime':
if(!q) return reply(mess.exeAnimeEdit(prefix))
if (args[0] === 'random') {
reply(enviar.aguarde)
sandro.sendMessage(from, {video: {url:`https://yurimodz-apis.xyz/api/editsvideo?categoria=aleatorios&apikey=${SANDRO_MD_BOT}`}, mimetype: "video/mp4"}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'bleach') {
reply(enviar.aguarde)
sandro.sendMessage(from, {video: {url:`https://yurimodz-apis.xyz/api/editsvideo?categoria=bleach&apikey=${SANDRO_MD_BOT}`}, mimetype: "video/mp4"}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'chainsaw') {
reply(enviar.aguarde)
sandro.sendMessage(from, {video: {url:`https://yurimodz-apis.xyz/api/editsvideo?categoria=chainsaw&apikey=${SANDRO_MD_BOT}`}, mimetype: "video/mp4"}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'kimetsu') {
reply(enviar.aguarde)
sandro.sendMessage(from, {video: {url:`https://yurimodz-apis.xyz/api/editsvideo?categoria=demon_slayer&apikey=${SANDRO_MD_BOT}`}, mimetype: "video/mp4"}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'dragonball') {
reply(enviar.aguarde)
sandro.sendMessage(from, {video: {url:`https://yurimodz-apis.xyz/api/editsvideo?categoria=dragonball&apikey=${SANDRO_MD_BOT}`}, mimetype: "video/mp4"}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'jujutsu') {
reply(enviar.aguarde)
sandro.sendMessage(from, {video: {url:`https://yurimodz-apis.xyz/api/editsvideo?categoria=jujutsu_kaisen&apikey=${SANDRO_MD_BOT}`}, mimetype: "video/mp4"}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'naruto') {
reply(enviar.aguarde)
sandro.sendMessage(from, {video: {url:`https://yurimodz-apis.xyz/api/editsvideo?categoria=naruto&apikey=${SANDRO_MD_BOT}`}, mimetype: "video/mp4"}).catch(e => {
return reply(mess.error())
})
}
break

case 'animesimg': 
case 'animeimg': 
case 'animeimage':
if(!q) return reply(mess.exeAnimeImage(prefix))
if (args[0] === 'cosplay') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/cosplay?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'waifu') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/waifu?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'loli') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/loli?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'shota') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/shota?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'yotsuba') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/yotsuba?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'shinomiya') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/shinomiya?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'yumeko') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/yumeko?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'tejina') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/tejina?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'chiho') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/chiho?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'boruto') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/boruto?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'kaori') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/kaori?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'shizuka') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/shizuka?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'kaga') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/kaga?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'kotori') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/kotori?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'mikasa') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/mikasa?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'akiyama') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/akiyama?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'gremory') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/gremory?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'izuku') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/izuku?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'shina') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/shina?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'kagura') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/kagura?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'shinka') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/shinka?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'eba') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/eba?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'yuri') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/yuri?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'erza') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/erza?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'elaina') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/elaina?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'hinata') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/hinata?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'naruto') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/naruto?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'minato') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/minato?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'sagari') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/sagari?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'nezuko') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/nezuko?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'rize') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/rize?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'anna') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/anna?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'deidara') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/deidara?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'asuna') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/asuna?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'ayuzawa') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/ayuzawa?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'emilia') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/emilia?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'chitoge') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/chitoge?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'hestia') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/hestia?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'inori') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/inori?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'itachi') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/itachi?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'madara') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/madara?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'sakura') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/sakura?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'sasuke') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/sasuke?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'tsunade') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/tsunade?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'onepiece') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/onepiece?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'mobil') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/mobil?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'montor') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/montor?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'keneki') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/keneki?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'megumin') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/megumin?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
} else if (args[0] === 'toukachan') {
reply(enviar.aguarde)
photos = await getBuffer(`https://yurimodz-apis.xyz/random/toukachan?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: photos}).catch(e => {
return reply(mess.error())
})
}
break

case 'bc': 
case 'bcgroup': 
case 'transmitir': 
case 'transmiss√£o': {
if(!SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe) return reply(enviar.msg.donosmt)
if(!q) return reply( `Texto onde? Exemplo : ${prefix + command} Hasta la vista baby`)
let getGroups = await sandro.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
let anu = groups.map(v => v.id)
for (i = 0; i < anu.length; i++) {
await sleep(1500)
let txt = `„ÄåTRANSMISS√ÉO DO BOT„Äç\n\n ${q}`
sandro.sendMessage(anu[i], {text: txt})
}
reply(`Enviado com sucesso...`)
}
break

case "transcrever": {
if((isMedia && !info.message.imageMessage && info.message.videoMessage || isQuotedVideo || isQuotedAudio)) {
reply("Aguarde.. transcrevendo seu √°udio..")
muk = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.videoMessage : isQuotedAudio ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.audioMessage : info.message.audioMessage

let base64String = await getFileBuffer(muk, isQuotedAudio ? 'audio': 'video');
let buffer = Buffer.from(base64String, 'base64');

let formData = new FormData();
formData.append('file', buffer, {filename: isQuotedAudio ? 'audiofile': 'videofile', contentType: muk.mimetype });

fetch(`https://api.bronxyshost.com.br/transcrever?apikey=${API_SANDRO_MD}`, {
method: 'POST',
body: formData
}).then(response => response.json())
.then(data => {
reply(data.texto);
}).catch((Err) => {
console.log(Err);
reply("Sinto muito, alguns formatos de √°udio/v√≠deo, eu n√£o consigo transcrever, em caso de d√∫vidas, tente novamente...");
});
} else {
return reply("Marque um audio ou um v√≠deo.")
}
}
break;

case 'join': case 'entrar':
if(!SoDono) return reply(enviar.msg.donosmt)
string = args.join(' ')
if(!string) return reply('Insira um link de convite ao lado do comando.')
if(string.includes('chat.whatsapp.com/') || reply('Ops, verifique o link que voc√™ inseriu.') ) {
link = string.split('app.com/')[1]
try {
sandro.groupAcceptInvite(`${link}`)
} catch(erro) {
if(String(erro).includes('resource-limit') ) {
reply('O grupo j√° est√° com o alcance de 257 membros.')
}
if(String(erro).includes('not-authorized') ) {
reply('N√£o foi poss√≠vel entrar no grupo.\nMotivo: Banimento.')
}
}
}
break

case 'antiimg':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('Hmmmm')
if(Number(args[0]) === 1) {
if(isAntiImg) return reply('O recurso de anti imagem j√° est√° ativado.')
dataGp[0].antiimg = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti imagem neste grupo.Ô∏è')
} else if(Number(args[0]) === 0) {
if(!isAntiImg) return reply('O recurso de anti imagem j√° est√° desativado.')
dataGp[0].antiimg = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anti imagem neste grupo.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antivideo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('Hmmmm')
if(Number(args[0]) === 1) {
if(isAntiVid) return reply('O recurso de anti v√≠deo j√° est√° ativado.')
dataGp[0].antivideo = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti video neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isAntiVid) return reply('O recurso de anti v√≠deo j√° est√° desativado.')
dataGp[0].antivideo = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anti video neste grupo.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

                    case 'loli33':
            {
              json = JSON.parse(fs.readFileSync('./arquivos/loli.json').toString())
              random = json[Math.floor(Math.random() * json.length)]
              /*
              let proximo = [
                {buttonId: `${prefix + command}`, buttonText: {displayText: 'üçâPROXIMOüçâ'}, type: 1},
                ]
                */
              templateMassage = {
                image: {
                  url: random,
                  quoted: info
                },
                caption: `${command}`,
                footer: `${botName}`,
              }
              sandro.sendMessage(from, templateMassage)
            }
            break

case 'aqua33':
    // L√™ o arquivo aqua.json
    const aquaData = fs.readFileSync('./arquivos/aqua.json');
    const aquaImages = JSON.parse(aquaData);
reply('olha o pv üòè')
    // Seleciona uma imagem aleat√≥ria
    const imageLoli = aquaImages[Math.floor(Math.random() * aquaImages.length)];
    
    // Texto personalizado com nome diferente
    const textoPersonalizadoLoli = `
Fonte: *${NomeDoBot}*
Cole√ß√£o: SANDRO-MD Oficial 
Curtidas: ${Math.floor(Math.random() * 1000)}
Categoria: üòà`;

    // Envia a imagem com a legenda
    await sandro.sendMessage(sender, {
        image: { url: imageLoli },
        caption: textoPersonalizadoLoli,
        footer: `${NomeDoBot}`,
        contextInfo: { participant: sender, quotedMessage: info.message }
    });
    break;
      
case 'porno33':
const vids22 = fs.readFileSync('./arquivos/sexv.json')
const videos101 = JSON.parse(vids22);
const video101 = videos101[Math.floor(Math.random() * videos101.length)];
const votos = Math.floor(Math.random() * 1000);
const textoPersonalizado = `
Fonte: Instagram 
Cole√ß√£o: SANDRO-MD Oficial 
Curtidas: ${votos}
Vategoria: üòà`;
const video = await prepareWAMessageMedia({ video: { url: video101, gifPlayback: true } }, { upload: sandro.waUploadToServer });

sandro.relayMessage(
sender,
{
interactiveMessage: {
header: {
hasMediaAttachment: true,
videoMessage: { ...video.videoMessage, gifPlayback: true }
},
headerType: 'VIDEO',
body: { text: textoPersonalizado },
footer: { text: "SANDRO MD V11" },
contextInfo: { participant: sender, quotedMessage: info.message },
nativeFlowMessage: {
buttons: [
{
name: "quick_reply",
buttonParamsJson: JSON.stringify({
display_text: "PR√ìXIMA",
id: `${prefix+command}`,
disabled: false
}),
}
],
messageParamsJson: "",
},
},
},
{}
);
break

case 'antiaudio':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('Hmmmm')
if(Number(args[0]) === 1) {
if(isAntiAudio) return reply('O recurso de anti √°udio j√° est√° ativado.')
dataGp[0].antiaudio = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti audio neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isAntiAudio) return reply('O recurso de anti √°udio j√° est√° desativado.')  
dataGp[0].antiaudio = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anti audio neste grupo.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antisticker':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('Hmmmm')
if(Number(args[0]) === 1) {
if(isAntiSticker) return reply('O recurso de anti sticker j√° est√° ativado.')
dataGp[0].antisticker = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti sticker neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isAntiSticker) return reply('O recurso de anti sticker j√° est√° desativado.')
dataGp[0].antisticker = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anti sticker neste grupo.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antidocumento':
case 'antidoc':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(Antidoc) return reply('O recurso de anti documento j√° est√° ativado.')
dataGp[0].antidoc = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti documento neste grupo.')
} else if(Number(args[0]) === 0) {
if(!Antidoc) return reply('O recurso de anti documento j√° est√° desativado.')
dataGp[0].antidoc = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anti documento neste grupo.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antictt':
case 'anticontato':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isAntiCtt) return reply('O recurso de anti contato j√° est√° ativado.')
dataGp[0].antictt = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti contato neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isAntiCtt) return reply('O recurso de anti contato j√° est√° desativado.')
dataGp[0].antictt = false
setGp(dataGp)
reply('Ô∏èDesativou com sucesso o recurso de anticontato neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antiloc':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
try {									
if(args.length < 1) return reply('1 pra ativar, 0 pra desligar')
if(Number(args[0]) === 1) {
if(Antiloc) return reply('O recurso de anti loc j√° est√° ativado.')
dataGp[0].antiloc = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti loc neste grupo.')
} else if(Number(args[0]) === 0) {
if(!Antiloc) return reply('O recurso de anti loc j√° est√° desativado.')
dataGp[0].antiloc = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anti loc neste grupo.')
} else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Deu erro, tente novamente :/')
}
break

case 'antilinkgp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isAntilinkgp) return reply('O recurso de antilink de grupo j√° est√° ativado.')
dataGp[0].antilinkgp = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de antilink de grupo + channel.')
} else if(Number(args[0]) === 0) {
if(!isAntilinkgp) return reply('O recurso de antilink de grupo + channel j√° est√° desativado.')
dataGp[0].antilinkgp = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de antilink de grupo + channel.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'antilinkhard':
case 'antilink':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isAntiLinkHard) return reply('O recurso de antilink hardcore j√° est√° ativado.')
dataGp[0].antilinkhard = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de antilink hardcore neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isAntiLinkHard) return reply('O recurso de antilink hardcore j√° est√° desativado.')
dataGp[0].antilinkhard = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de antilink harcore neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'x9':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isx9) return reply('O recurso de x9 j√° est√° ativado.')
dataGp[0].x9 = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de x9 neste grupo, irei notificar quando algu√©m for rebaixado/promovido a adm e tamb√©m quando ouver fixa√ß√£o/desafixa√ß√£o de mensagem do(s) adminstrador(es).')
} else if(Number(args[0]) === 0) {
if(!isx9) return reply('O recurso de x9 j√° est√° desativado.')
dataGp[0].x9 = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de x9 neste grupo, n√£o irei mais notificar promo√ß√£o de adm nem rebaixamento ou fixa√ß√£o/desafixa√ß√£o de mensagem do(s) adminstrador(es).')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'visualizarmsg':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isVisualizar) {
nescessario.visualizarmsg = true
setNes(nescessario)
reply('Ativou com sucesso o recurso de visualizar todas as mensagens enviada em grupos e privado.')
} else if(isVisualizar) {
nescessario.visualizarmsg = false
setNes(nescessario)
reply('Desativou com sucesso o recurso de visualizar todas as mensagens enviada em grupos e privado.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'x9visuunica':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isX9VisuUnica) return reply('O recurso de revelar visu √∫nica j√° est√° ativado.')
dataGp[0].visuUnica = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de revelar visu √∫nica neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isX9VisuUnica) return reply('O recurso de revelar visu √∫nica j√° est√° desativado.')
dataGp[0].visuUnica = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de revelar visu √∫nica neste grupo.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'so_adm':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(So_Adm) return reply('Ja esta ativo')
dataGp[0].soadm = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de s√≥ adm utilizar comandos neste grupo.')
} else if(Number(args[0]) === 0) {
if(!So_Adm) return reply('Ja esta Desativado')
dataGp[0].soadm = false
setGp(dataGp)
reply('Desativou o recurso de s√≥ adm utilizar comandos neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'odelete':
if(!isGroup) return reply(enviar.msg.grupo)
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(IS_DELETE) return reply('O recurso de delete j√° est√° ativado.')
nescessario.Odelete = true
setNes(nescessario)
reply('Ativou com sucesso o recurso de delete nos grupos.')
} else if(Number(args[0]) === 0) {
if(!IS_DELETE) return reply('O recurso de delete j√° est√° desativado.')
nescessario.Odelete = false
setNes(nescessario)
reply('Ô∏èDesativou com sucesso o recurso de delete nos grupos.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break


            
case 'antifake':
if(!isGroup) return reply(enviar.msg.grupo)
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar.')
if(Number(args[0]) === 1) {
if(isAntifake) return reply('O recurso de antifake neste grupo j√° est√° ativado.')
dataGp[0].antifake = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de antifake neste grupo!')
} else if(Number(args[0]) === 0) {
if(!isAntifake) return reply('O recurso de antifake neste grupo j√° est√° desativado.')
dataGp[0].antifake = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de antifake neste grupo!')
} else {
reply('1 para ativar, 0 para desativar.')
}
break;

case 'prefixos':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isMultiP) return reply(`Para usar este comando, voc√™ deve ativar o comando, multiprefix\nExemplo: ${prefix}multiprefixo`)
if(dataGp[0].prefixos.length < 1) return reply("N√£o contem nenhum prefixo a mais adicionado neste grupo.")
reply(`Lista de prefixos para uso do bot, no Grupo: *${groupName}*:\n‚Ä¢ *[Total: ${dataGp[0].prefixos.length}]* - ${dataGp[0].prefixos.map((v, index) => `( ${v} )`).join(", ")}`)
break

case 'figaleatoria':
reply("Estou gerando sua figurinha, aguarde um pouco amigo(a)...")
try {
bla = await getBuffer(`https://yurimodz-apis.xyz/api/stickera?apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {sticker: bla}, {quoted: selo})
} catch(e) {
reply(mess.error())
}
break

case 'add_prefixo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isMultiP) return reply(`Para usar este comando, voc√™ deve ativar o comando, multiprefix\nExemplo: ${prefix}multiprefixo`)
if(ANT_LTR_MD_EMJ(q)) return reply("N√£o pode letra modificada, nem emoji..")
if(!q.trim()) return reply("Determine o novo prefixo, n√£o pode espa√ßo vazio...")
if(q.trim() > 1) return reply(`Calma, o prefixo s√≥ pode ser um\nExemplo: ${prefix+command} _\nAe o bot vai passar √° responder _ como prefixo do bot..`)
if(dataGp[0].prefixos.indexOf(q.trim()) >= 0) return reply(`Esse prefixo j√° se encontra incluso, procure ver na lista dos prefixos\nExemplo: ${prefix}prefixos`)
dataGp[0].prefixos.push(q.trim())
setGp(dataGp)
reply(`Prefixo ${q.trim()} foi adicionado com sucesso na lista de prefixos para uso do bot, neste grupo...`)
break

case 'tirar_prefixo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isMultiP) return reply(`Para usar este comando, voc√™ deve ativar o comando, multiprefix\nExemplo: ${prefix}multiprefixo`)  
if(ANT_LTR_MD_EMJ(q)) return reply("N√£o pode letra modificada, nem emoji..")
if(!q.trim()) return reply("Determine o prefixo que deseja tirar, n√£o pode espa√ßo vazio...")
if(q.trim() > 1) return reply(`Calma, o prefixo s√≥ pode ser tirado um por vez..\nExemplo: ${prefix+command} _\nAe o bot n√£o vai responder mais com _`)
if(dataGp[0].prefixos.indexOf(q.trim()) < 0) return reply(`Esse prefixo n√£o est√° incluso, procure ver na lista dos prefixos. Veja: ${prefix}prefixos`)
if(dataGp[0].prefixos.length == 1) return reply("Adicione um prefixo para pode tirar este, tem que ter pelo menos 1 prefixo j√° incluso dentro do sistema para tirar outro.")
dataGp[0].prefixos.splice(dataGp[0].prefixos.indexOf(q.trim()), 1)
setGp(dataGp)
reply(`Prefixo ${q.trim()} tirado com sucesso da lista de prefixos de uso deste grupo..`)
break

case 'multiprefixo': 
case 'multiprefix':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins && !SoDono) return reply(enviar.msg.adm)
if(!isMultiP) {
dataGp[0].multiprefix = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de multi prefixos neste grupo.')
}
if(isMultiP) {
dataGp[0].multiprefix = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de multi prefixos neste grupo.')
}
break

case 'ephemeral': 
case 'msgtemp':
if (!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
getInfoG = await sandro.groupMetadata(from); /* Pegar as informa√ß√µes total do grupo! */
if (getInfoG.ephemeralDuration == undefined) {
reply(`As mensagens tempor√°rias no grupo foram ativadas com sucesso.`)
await sandro.sendMessage(from, { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL})
} else if (getInfoG.ephemeralDuration > 1) {
reply(`As mensagens tempor√°rias no grupo foram desativadas com sucesso.`)
await sandro.sendMessage(from, { disappearingMessagesInChat: false})
}
break

case 'changegroup': 
case 'config_gp': 
case 'config-group': {
if (!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if (!q) return reply(`Insira all / adms para escolher quem pode atualizar os dados do grupo. A decis√£o √© sua, adm! `)
if (args[0] === 'adms') {
reply(`üîê Sucesso! - Agora somente os adm poder√° editar os dados do grupo.`)
await sandro.groupSettingUpdate(from, 'locked')
} else if (args[0] === 'all') {
reply(`üîì Sucesso! - Agora todos os participantes pode alterar os dados do grupo.`)
await sandro.groupSettingUpdate(from, 'unlocked')
}
}
break

case 'rmphotogp': case 'rmfotogroup': {
if (!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
reply(`A foto do grupo foi removida com sucesso.`)
await sandro.removeProfilePicture(from)
}
break

case 'antinotas':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('Hmmmm')
if(Number(args[0]) === 1) {
if(isAntiNotas) return reply('J√° esta ativo')
dataGp[0].antinotas = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti notas neste grupo.Ô∏è')
} else if(Number(args[0]) === 0) {
if(!isAntiNotas) return reply('Ja esta Desativado.')
dataGp[0].antinotas = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anti notas neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'anticatalogo':
case 'anticatalg':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isAnticatalogo) return reply('Ja esta ativo')
dataGp[0].anticatalogo = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anticatalogo neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isAnticatalogo) return reply('J√° est√° desativado.')
dataGp[0].anticatalogo = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anticatalogo neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'bemvindo2':  case 'bemvindo': case 'bemvindo1':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply(`Digite da forma correta:\nComando: ${prefix + command} 1 para ativar `)
if(Number(args[0]) === 1) {
if(isWelkom2) return reply('O recurso j√° est√° ativado no grupo.')
dataGp[0].wellcome[1].bemvindo2 = true
setGp(dataGp)
reply('O recurso foi ativado.')
} else if(Number(args[0]) === 0) {
if(!isWelkom2) return reply('O recurso n√£o est√° ativado no grupo.')
dataGp[0].wellcome[1].bemvindo2 = false
setGp(dataGp)
reply('O recurso foi desativado.')
} else {
reply(`Digite da forma correta, ${prefix + command} 1, para ativar e 0 para desativar`)
}
break

case 'infocmd': 
case 'info': 
if(!q) return reply(`Coloque um comando para conhecer o uso do comando que voc√™ almeja usar, por exemplo: ${prefix+command} play`)
const CMD_P = JSON.parse(fs.readFileSync("./settings/media/infocmd.json")); 
const searchCmds = CMD_P.map(i => i.command).indexOf(q)
if(searchCmds < 0) return reply("A explica√ß√£o do comando ainda n√£o est√° dispon√≠vel..")
const returnMessage = CMD_P[searchCmds].info.replace(/#prefixo#/g, prefix)
reply(returnMessage)
break

case 'infocmd_add': case 'add_infocmd':
if(!SoDono) return reply(enviar.msg.donosmt)
const CMD_S = JSON.parse(fs.readFileSync("./settings/media/infocmd.json")); 
dirInfoCmd = "./settings/media/infocmd.json"
var [y, x] = q.split('|')
if(!q.includes("|")) return reply(`Faltando a primeira |\nExemplo: ${prefix+command} comando|info`)
if(q.lastIndexOf("|") < 0) return reply(`Faltando a segunda |\nExemplo: ${prefix+command} comando|info`)
kirv = []
for (i of CMD_S) {kirv.push(i.command)}
if(kirv.indexOf(y) >= 0) return reply("A informa√ß√£o sobre este comando j√° foi adicionada, ou seja, j√° √© existente...")
CMD_S.push({command: y, info: x})
fs.writeFileSync(dirInfoCmd, JSON.stringify(CMD_S, null, 2))
reply(`Informa√ß√£o sobre o comando ${y} foi atribuida a ele com sucesso...`)
break 

case 'infocmd_del': case 'del_infocmd':
if(!SoDono) return reply(enviar.msg.donosmt) 
const CMD_D = JSON.parse(fs.readFileSync("./settings/media/infocmd.json")); 
var i7 = CMD_D.map(i => i.command).indexOf(q.trim())
dirInfoCmd = "./settings/media/infocmd.json"
CMD_D.splice(i7, 1)
fs.writeFileSync(dirInfoCmd, JSON.stringify(CMD_D, null, 2))
reply(`A informa√ß√£o sobre o comando ${q} foi removida com sucesso...`)
break

case 'legendabv':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('*Escreva a mensagem de boas-vindas*')
teks = body.slice(11)
if(isWelkom) {
dataGp[0].wellcome[0].legendabv = teks
setGp(dataGp)
reply('*Mensagem de boas vindas definida com sucesso!*')
} else {
reply(`Ative o ${prefix}bemvindo 1`)
}
break

case 'legendabv2':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('*Escreva a mensagem de boas-vindas*')
teks = body.slice(12)
if(isWelkom2) {
dataGp[0].wellcome[1].legendabv = teks
setGp(dataGp)
reply('*Mensagem de boas vindas2 definida com sucesso!*')
} else {
reply(`Ative o ${prefix}bemvindo2 1`)
}
break

case 'legendasaiu':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply("Escreva a mensagem de sa√≠da ou para desativar, use: 0")
teks = body.slice(13)
if(isWelkom) {
dataGp[0].wellcome[0].legendasaiu = Number(teks) === 0 ? 0 : teks
setGp(dataGp)
reply('Mensagem de sa√≠da definida com sucesso!')
} else {
reply(`Ative o ${prefix}bemvindo 1 para o recurso de edi√ß√£o de mensagem.`)
}
break;
case 'legendasaiu2':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(q.length < 1) return reply('Escreva a mensagem de sa√≠da ou para desativar, use: 0')
if(isWelkom2) {
dataGp[0].wellcome[1].legendasaiu = Number(teks) === 0 ? 0 : q
setGp(dataGp)
reply('Mensagem de sa√≠da [2] definida com sucesso!')
} else {
reply(`Ative o ${prefix}bemvindo2 1 para o recurso de edi√ß√£o de mensagem.`)
}
break;

case 'legenda_estrangeiro':
case 'legenda_estrangeiros': 
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('*Escreva a mensagem de remo√ß√£o de estrangeiros*')
if(isAntifake) {
dataGp[0].legenda_estrangeiro = q
setGp(dataGp)
reply('*Mensagem de remo√ß√£o de estrangeiros definida com sucesso!*')
} else {
reply(`Ative o antifake primeiro com ${prefix}antifake 1`)
}
break

case 'legenda_video': 
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('*Escreva a mensagem de remo√ß√£o de estrangeiros*')
dataGp[0].legenda_video = q
setGp(dataGp)
reply('*Mensagem de remo√ß√£o de video definida com sucesso!*')
break

case 'legenda_imagem': 
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('*Escreva a mensagem de remo√ß√£o de estrangeiros*')
dataGp[0].legenda_imagem = q
setGp(dataGp)
reply('*Mensagem de remo√ß√£o de imagem definida com sucesso!*')
break

case 'legenda_documento': 
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('*Escreva a mensagem de remo√ß√£o de estrangeiros*')
dataGp[0].legenda_documento = q
setGp(dataGp)
reply('*Mensagem de remo√ß√£o de documento definida com sucesso!*')
break

case 'addautorm':
case 'addautoban':
case 'listanegra':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins && !SoDono) return reply('Precisa ser Dono ou Adm')
if(!mrc_ou_numero) return reply("Marque a mensagem do usu√°rio com o comando ou utilize o comando com o n√∫mero do usu√°rio que deseja adicionar na lista negra..")
if(dataGp[0].listanegra.includes(mrc_ou_numero)) return reply('*Esse N√∫mero ja esta incluso*')
dataGp[0].listanegra.push(mrc_ou_numero)
setGp(dataGp)
reply(`*N√∫mero adicionado a lista de autoban*`)
break

case 'autobang':
case 'listanegrag':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!mrc_ou_numero) return reply("Marque a mensagem do usu√°rio com o comando ou utilize o comando com o n√∫mero do usu√°rio que deseja adicionar na lista negra Global..")
if(listanegraG.includes(mrc_ou_numero)) return reply('*Esse N√∫mero ja esta incluso*')
listanegraG.push(mrc_ou_numero)
fs.writeFileSync('./settings/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`*N√∫mero adicionado a lista de autoban*`)
break

case 'tirardalistag':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!mrc_ou_numero) return reply("Marque a mensagem do usu√°rio com o comando ou utilize o comando com o n√∫mero do usu√°rio que deseja tirar da lista negra..")
if(!listanegraG.includes(mrc_ou_numero)) return reply('*Esse N√∫mero n√£o esta incluso*')
var i = listanegraG.indexOf(mrc_ou_numero)
listanegraG.splice(i, 1)
fs.writeFileSync('./settings/nescessario.json', JSON.stringify(nescessario, null, '\t'))
reply(`*N√∫mero foi removido da lista negra*`)
break

case 'playvid':
case 'playvideo':
case 'playmp4':  case "play_video": {
try {
await carregamento()
await sleep(3000)
if(!q.trim()) return reply(`- Exemplo: ${prefix}play nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`)
data = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=${API_SANDRO_MD}`)
if(data[0]?.tempo?.length >= 7) return reply("Desculpe, este video ou audio √© muito grande, n√£o poderei realizar este pedido, pe√ßa outra m√∫sica abaixo de uma hora.")
var N_E = " N√£o encontrado."
var bla = `ü•Ç„Äî ùó£ùóüùóîùó¨ ùó©ùóúùóóùóòùó¢ „Äïü•Ç

> Titulo: ${data[0]?.titulo||N_E}
> Tempo: ${data[0]?.tempo||N_E}
> Postado: ${data[0]?.postado||N_E}
> Descri√ß√£o: ${data[0]?.desc||N_E}`
sandro.sendMessage(from, {image: {url: data[0]?.thumb || logoslink?.logo}, caption: bla}, {quoted: info})
sandro.sendMessage(from, {video: {url: `https://api.bronxyshost.com.br/api-bronxys/play_video?nome_url=${q}&apikey=${API_SANDRO_MD}`}, mimetype: "video/mp4", fileName: data[0]?.titulo || "play.mp4"}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
console.log(e)
return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
}
}
break;

case 'delremover':
case 'delautorm':  
case 'delautoban': 
case 'tirardalista':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins && !SoDono) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!mrc_ou_numero) return reply("Marque a mensagem do usu√°rio com o comando ou utilize o comando com o n√∫mero do usu√°rio que deseja tirar da lista negra..")
if(!dataGp[0].listanegra.includes(mrc_ou_numero)) return reply('*Esse N√∫mero n√£o esta incluso*')
var i = dataGp[0].listanegra.indexOf(mrc_ou_numero)
dataGp[0].listanegra.splice(i, 1)
setGp(dataGp)
reply(`*N√∫mero foi removido da lista de autoban*`)
break

case 'listban':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(dataGp[0].listanegra.length < 1) return reply('*Nenhum N√∫mero n√£o foi adicionado*')
teks = '*N√∫meros que vou moer na porrada se voltar:*\n'
for(i=0;i<dataGp[0].listanegra.length;++i) {
teks += `‚û§ *${dataGp[0].listanegra[i].split('@')[0]}*\n`
}
teks += '*Esses ai vou descer meu martelo do ban.*'
reply(teks)
break

case 'mute':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply('O bot precisa ser adm pra executar essa a√ß√£o.')
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Marque o n√∫mero que deseja mutar.')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if(isMuted) {
var ind = GroupsMutedActived.indexOf(from)
for (let _ of mentioned) {
teks = `Ol√° *@${_.split('@')[0]}*, voc√™ acaba de ser mutado, a√ß√£o realizada pelo(a) adm: *@${sender.split('@')[0]}*.`
muted[ind].numbers.push(_)
}
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2))
teks += '\n‚Äì\n‚Ä¢ Caso voc√™ dar um piu, sua(s) mensagem(ns) vai ser apagada.'
mentions(teks, [mentioned, sender], true)
} else {
 const data = {
jid: from,
numbers: mentioned
}
muted.push(data)
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `Ol√° *@${_.split('@')[0]}*, voc√™ acaba de ser mutado, a√ß√£o realizada pelo(a) adm: *@${sender.split('@')[0]}*.`
}
teks += '\n‚Äì\n‚Ä¢ Caso voc√™ dar um piu, sua(s) mensagem(ns) vai ser apagada.'
mentions(teks, [mentioned, sender], true)
}
break

case 'desmute':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply('O bot precisa ser adm pra executar essa a√ß√£o.')
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Marque o n√∫mero que deseja desmutar.')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
var ind = GroupsMutedActived.indexOf(from)
if(isMuted) {
for(let _ of mentioned) {
if(muted[ind].numbers.indexOf(_) >= 0) {
var rmind = muted[ind].numbers.indexOf(_)
muted[ind].numbers.splice(rmind, 1)
}
}
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `Ol√° usu√°rio *@${_.split('@')[0]}* voc√™ acaba de ser desmutado pelo(a) adm *@${sender.split('@')[0]}*.`
}
teks += '\n‚Äì\n‚Ä¢ Agora voc√™ pode falar a vontade no grupo, sem interrup√ß√µes.'
mentions(teks, [mentioned, sender], true)
} else {
const data = {
jid: from,
numbers: []
}
muted.push(data)
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `Ol√° usu√°rio @${_.split('@')[0]} voc√™ acaba de ser desmutado pelo(a) adm @${sender.split('@')[0]}.`
}
teks += '\n‚Äì\n‚Ä¢ Agora voc√™ pode falar a vontade no grupo, sem interrup√ß√µes.'
mentions(teks, [mentioned, sender], true)
}
break

case 'roletarussa':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
TAMBOR = ["na perna.","na cabe√ßa.","no pesco√ßo.","no peito.","no olho.","no est√¥mago.","na boca.","na perna.","na testa.","no bra√ßo."]
C2 = somembros[Math.floor(Math.random() * somembros.length)]
if(somembros.length == 0) return reply("N√£o existe *membros comuns* no grupo, somente admins.")
if(C2 === sender || C2 === botNumber) return mentions(`Escolhi *@${C2.split('@')[0]}*, mas conseguiu escapar...`, [C2], true)
if(C2 === sender || C2 === numerodono[0]) return mentions(`Escolhi *@${C2.split('@')[0]}*, mas conseguiu escapar...`, [C2], true)		
reply(`A escolha √© minha! 1 membro ir√° morrer, que os jogos comecem...`)
setTimeout(() => { 
mentions(`Que pena... voc√™ n√£o sobreviveu ao meu jogo *@${C2.split('@')[0]}*, hora de enterrar o cad√°ver, infelizmente morreu com tiro ${TAMBOR[Math.floor(Math.random() * (TAMBOR.length))]}`, [C2], true) 
}, 5000)	 
setTimeout(() => {
sandro.groupParticipantsUpdate(from, [C2], "remove")
}, 6000)
break

case 'createimg': case 'texttoimage': case 'imagine':
if(!q) return reply(`O que voc√™ deseja criar amiguinho? Coloque ap√≥s o comando o que voc√™ deseja criar... Por exemplo: ${prefix+command} macaco dirigindo uma bmw`);
try {
await replyWithReaction('Ol√°, estou criando a imagem a partir de seu questionamento, aguarde senhor(a)...', {react: {text: 'üé®', key: info.key}});
dataResultAI = await fetchJson(`https://hercai.onrender.com/v3/text2image?prompt=${q}`);
  await sandro.sendMessage(from, {image: {url: dataResultAI.url}}, {quoted: info});
} catch(error) {
await replyWithReaction(mess.error(), {react: {text: '‚ùå', key: info.key}});
}
break

case 'pergunta': case 'openai': case 'gpt': case 'chatgpt':
try {
reply("*üîç BUSCANDO üîç*");
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/PERGUNTE_E_EU_RESPONDO?q=${q.trim()}&apikey=${API_SANDRO_MD}`)
reply(`( ${ABC.msg} )`)
} catch { 
reply("Erro..")
}
break;

/*
case 'photoleap': 
try {
if (!q) return reply("O que voc√™ deseja criar atrav√©s de seu questionamento?")
reply("Criando uma imagem a partir de seu questionamento, aguarde...");
data = await fetchJson(`https://vihangayt.me/tools/photoleap?q=${q}`)
sandro.sendMessage(from, {image: {url: data.data}}, {quoted: selo}).catch(() => {
return reply(mess.error())
})
} catch {
reply(mess.error())
}
break
*/
case 'dinextenso': // Invertexto-API com 3.000 requisi√ß√µes mensais, fique atento! [üìç]
if(!q.includes(".")) return reply(`‚ùåÔ∏è - Coloque apenas n√∫meros para realizar a transforma√ß√£o de digitos num√©rico para n√∫meros em extenso.\nPor exemplo: *${prefix}dinextenso 500.00 ou 756.50*, tudo que voc√™ colocar os valores deve colocar um ponto(.) para converter os valores.`)
try {
data = await fetchJson(`https://api.invertexto.com/v1/number-to-words?token=${API_KEY_INVERTEXTO}&number=${q}&language=pt&currency=BRL`);
reply(`*${q}* : ${capitalizeFirstLetter(data.text)}`);
} catch(e) {
reply(mess.error())
}
break;

case 'validarcpf': case 'validarcnpj':
if(command === "validarcpf") {
if(!q) return reply("Digite um CPF para realizar a verifica√ß√£o se √© v√°lido ou inv√°lido...")
if(q.length < 11) return reply("Voc√™ digitou um cpf que n√£o tem 11 d√≠gitos, verifique se colocou pontua√ß√£o, se estiver retire.")
try {
data = await fetchJson(`https://api.invertexto.com/v1/validator?token=${API_KEY_INVERTEXTO}&value=${q}`)
if(data.valid == true) return reply("V√°lido.")
if(data.valid == false) return reply("Inv√°lido.")
} catch(e) {
reply(mess.error())
}
} else if(command === "validarcnpj") {
if(!q) return reply("Digite um CNPJ para realizar a verifica√ß√£o se √© v√°lido ou inv√°lido!")
if(q.length < 14) return reply("Voc√™ digitou um CNPJ que n√£o tem 14 d√≠gitos, verifique se colocou pontua√ß√£o, se estiver retire.")
try {
data = await fetchJson(`https://api.invertexto.com/v1/validator?token=${API_KEY_INVERTEXTO}&value=${q}`)
if(data.valid == true) return reply("V√°lido.")
if(data.valid == false) return reply("Inv√°lido.")
} catch(e) {
reply(mess.error())
}
}
break;
/*
case 'pergunta': 
case 'openai': 
case 'gpt': 
case 'chatgpt':
try {
if(!q) return reply("Voc√™ esqueceu de perguntar ao lado do comando.")
let { key } = await sandro.sendMessage(from, {text: `Estou processando sua pergunta, isso pode levar alguns segundos...`}, {quoted: info})
anu1 = await fetchJson(`https://yurimodz-apis.xyz/api/ia/gpt?query=${q}&apikey=${SANDRO_MD_BOT}`)
await sandro.sendMessage(from, {text: mess.respostaChatGPT(anu1), edit: key});
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
reply(mess.error())
} else {
reply(mess.error())
}
}
break
*/
case 'pergunta': 
case 'openai': 
case 'gpt': 
case 'chatgpt':
try {
if(!q) return reply("Voc√™ esqueceu de perguntar ao lado do comando.")
let { key } = await sandro.sendMessage(from, {text: `Estou processando sua pergunta, isso pode levar alguns segundos...`}, {quoted: info})
anu1 = await fetchJson(`https://aemt.me/gpt4?text=${q}`)
await sandro.sendMessage(from, {text: anu1.result, edit: key});
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
reply(mess.error())
} else {
reply(mess.error())
}
}
break

case 'totext':
try {
if (!isQuotedAudio) return reply(`*_Por favor, mencione um √°udio para realizar a transcri√ß√£o do √°udio._*`)
if (info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage.fileLength > 2100000) return reply(`*_S√≥ realizo a transcri√ß√£o de √°udio de at√© "2MB", envie um arquivo menor._*`)
let getBufferAudio = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage, 'audio')
reply(`_Por favor, aguarde._`)
fs.writeFileSync(`./armor/src/totext-${sender}.mp3`, getBufferAudio)
let client = new AssemblyAI({apiKey: "2bdbb9a9046a4a938677122e7cf2dbd2"}) 
const dataTxt = await client.transcripts.create({audio_url: `./armor/src/totext-${sender}.mp3`, language_code: "pt"})
if (dataTxt.words.length == 0) return reply(`*_N√£o foi poss√≠vel transcrever seu √°udio. Por favor, tente com outro._*`)
sandro.sendMessage(from, {text: `> ${dataTxt.text}`}, {quoted: info});
fs.unlinkSync(`./armor/src/totext-${sender}.mp3`)
} catch(e) {
console.log(e)
}
break
/*
case 'bard':
try {
if(!q) return reply("Voc√™ esqueceu de perguntar ao lado do comando.")
let { key } = await sandro.sendMessage(from, {text: `Estou processando sua pergunta, isso pode levar alguns segundos...`}, {quoted: info})
r = await fetchJson(`https://yurimodz-apis.xyz/api/ia/gbard?query=${q}&apikey=${SANDRO_MD_BOT}`)
await sandro.sendMessage(from, {text: mess.respostaBard(r), edit: key});
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
reply(mess.error())
} else {
reply(mess.error())
}
}
break
*/
case 'wikipedia': case 'wiki':
try {
  if(!q) return reply(`Exemplo: ${prefix+command} JavaScript`)
reply(`Aguarde, pesquisando sobre o que est√° perguntando..`)
wikip = await axios.get(`https://pt.wikipedia.org/w/api.php?action=query&format=json&list=search&srsearch=${encodeURIComponent(q)}&prop=info&inprop=url`);
wikis = await axios.get(`https://pt.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&pageids=${wikip.data.query.search[0].pageid}`);
msgSemQuoted(mess.wikiResposta(wikis))
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
reply('Nada foi encontrado, com base em sua pergunta.. Especifique um pouco!')
} else {
reply('Nada foi encontrado, com base em sua pergunta.. Especifique um pouco!')
}
}
break
/*
case 'gptvoz':
if(!q) return reply("Voc√™ esqueceu de perguntar ao lado do comando.")
reply(`Estou processando sua pergunta. Isso pode levar alguns segundos...`)
nznk = await fetchJson(`https://yurimodz-apis.xyz/api/ia/gpt?query=${q}&apikey=${SANDRO_MD_BOT}`)
const gpts = require('./arquivos/funcoes/gtts')('pt')
ranm = getRandom('.mp3')
rano = getRandom('.ogg')
gpts.save(ranm, `${nznk.resultado}`, function() {
exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
sandro.sendMessage(from, {audio: fs.readFileSync(ranm), ptt:true, mimetype: "audio/mpeg"}, {quoted: selo})
DLT_FL(ranm)
DLT_FL(rano)
})
})
break
*/
case 'corretor':
if(!q) return reply(`Parece que voc√™ esqueceu de adicionar sua frase, *use-o de forma correta*, siga o exemplo:\n‚Äî ${prefix+command} `+"```Eu te mamo```")
try {
let { key } = await sandro.sendMessage(from, {text: `Verificando os erros ortogr√°ficos em seu texto ou palavra... *Aguarde!*`}, {quoted: info})
promptUser = `Corrija gramaticalmente uma frase para o portugu√™s brasileiro tradicional: ${q}`
anu1 = await fetchJson(`https://yurimodz-apis.xyz/api/ia/gpt?query=${promptUser}&apikey=${SANDRO_MD_BOT}`)
await sandro.sendMessage(from, {text: mess.corretorOrtografico(anu1), edit: key});
} catch(e) {
return reply(mess.error())
}
break

case 'redacao':
if(!q) return reply(`Voc√™ esqueceu de colocar o tema de sua reda√ß√£o ao lado do comando.`)
try {
let { key } = await sandro.sendMessage(from, {text: `Estou processando sua solicita√ß√£o. Isso pode levar alguns segundos...`}, {quoted: info})
promptUser = `Crie um texto dissertativo-argumentativo com o tema: ${q}`
anu1 = await fetchJson(`https://aemt.me/gpt4?text=${promptUser}`)
await sandro.sendMessage(from, {text: mess.respostaRedacao(anu1), edit: key});
} catch(e) {
return reply(mess.error())
}
break
/*
case 'summerize':
if(!q) return reply(`Voc√™ esqueceu de colocar o que voc√™ deseja resumir ao lado do comando.`)
try {
let { key } = await sandro.sendMessage(from, {text: `Estou resumindo o texto solicitado. Isso pode levar alguns segundos...`}, {quoted: info})
promptUser = `Fa√ßa um resumo b√°sico do texto apresentado: ${q}`
anu1 = await fetchJson(`https://yurimodz-apis.xyz/api/ia/gpt?query=${promptUser}&apikey=${SANDRO_MD_BOT}`)
await sandro.sendMessage(from, {text: mess.respostaResumida(anu1), edit: key})
} catch(e) {
return reply(mess.error())
}
break
*/
case 'nasa':
try {
if (!q) return reply(`*Exemplo:* ${prefix}${command} 19-10-2007`)
dataSab = await fetchJson(`https://yurimodz-apis.xyz/api/nasaphoto?data=${q}&apikey=${SANDRO_MD_BOT}`)
resultExp = await fetchJson(`https://yurimodz-apis.xyz/api/info/translate?texto=${dataSab.nasa.explanation}&ling=pt&apikey=${SANDRO_MD_BOT}`)
sandro.sendMessage(from, {image: {url: dataSab.nasa.hdurl }, caption: mess.result_APOD(dataSab, resultExp)})
} catch (e) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")
reply(mess.error());
}
break;

case 'book':
if (args.length == 0) return reply(`*Exemplo:* ${prefix+command} Nome do Livro`)
try {
const takeBook = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(q)}&langRestrict=pt`);
const getBook = await axios.get(`${takeBook.data.items[0].selfLink}`);
var bookImage = await getBuffer(getBook.data.volumeInfo.imageLinks.thumbnail)
sandro.sendMessage(from, {image: bookImage, caption: mess.searchBooks(getBook)}).catch(e => {
reply(mess.error())
})
} catch (e) {
if(String(e).includes("invalid json response body at")) {
return console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
} else {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")
reply(mess.error())
}
}
break

case 'cotacao': {
moedas = ["dolar", "euro", "bitcoin", "libra", "ethereum"]
if(!moedas.includes(q_2)) return reply("A moeda est√° inexistente em meu banco de dados!\n*Dispon√≠veis:* dolar, euro, bitcoin, libra, ethereum\n*Observa√ß√£o:* Use letras min√∫sculas para n√£o ocorrer erros!")
if (encodeURIComponent(q) == "dolar") {
var money = "USD-BRL";
} else if (encodeURIComponent(q) == "euro") {
var money = "EUR-BRL";
} else if (encodeURIComponent(q) == "bitcoin") {
var money = "BTC-BRL";
} else if (encodeURIComponent(q) == "libra") {
var money = "GBP-BRL";
} else if (encodeURIComponent(q) == "ethereum") {
var money = "ETH-BRL";
}
axios.get(`https://economia.awesomeapi.com.br/last/${money}`)
.then((response) => {
if (encodeURIComponent(q) == "dolar") {
var resposta = response.data.USDBRL;
} else if (encodeURIComponent(q) == "euro") {
var resposta = response.data.EURBRL;
} else if (encodeURIComponent(q) == "bitcoin") {
var resposta = response.data.BTCBRL;
} else if (encodeURIComponent(q) == "ethereum") {
var resposta = response.data.ETHBRL;
} else if (encodeURIComponent(q) == "libra") {
var resposta = response.data.GBPBRL;
}
reply(mess.quoteCurrencies(resposta));
}).catch((response) => {
reply("Erro ao obter informa√ß√µes!Ô∏è");
});
}
break;

case 'clima':
case 'tempo':
if (args.length < 1) return reply(`*Sintaxe correta para uso:* ${prefix + command} cidade\n‚Ä¢ Caso tenha algum acento, retire ok?`)
cidade = body.slice(7)
clima = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cidade}&appid=548b8266f19038cfd1f6d6f007d8bc58&units=metric&lang=pt_br`)
if (clima.error) return reply(clima.error)
hora1 = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
jr = `‚ï≠‚îÅ„Äé‚õàÔ∏è ùêìùêÑùêåùêèùêé/ùêÇùêãùêàùêåùêÄ ‚åõ„Äè‚îÅ‚ïÆ
‚îÇ‡≥ã‚ùÄüå°Ô∏è ùòàùò®ùò∞ùò≥ùò¢‚ßΩ ${clima.data.main.temp}¬∫C
‚îÇ‡≥ã‚ùÄüèôÔ∏è ùòäùò™ùò•ùò¢ùò•ùò¶‚ßΩ ${clima.data.name}
‚îÇ‡≥ã‚ùÄüî∫ ùòõùò¶ùòÆùò±. ùòîùò¢ÃÅùòπùò™ùòÆùò¢‚ßΩ ${clima.data.main.temp_max}¬∞C
‚îÇ‡≥ã‚ùÄüîª ùòõùò¶ùòÆùò±. ùòîùò™ÃÅùòØùò™ùòÆùò¢‚ßΩ ${clima.data.main.temp_min}¬∞C
‚îÇ‡≥ã‚ùÄüå¶Ô∏è ùòäùò≠ùò™ùòÆùò¢‚ßΩ ${clima.data.weather[0].description}
‚îÇ‡≥ã‚ùÄüíß ùòúùòÆùò™ùò•ùò¢ùò•ùò¶ ùò•ùò∞ ùòàùò≥‚ßΩ ${clima.data.main.humidity}%
‚îÇ‡≥ã‚ùÄüå¨Ô∏è ùòùùò¶ùòØùòµùò∞ùò¥‚ßΩ ${clima.data.wind.speed}  
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ„Äî ${hora1} „Äï`
await sandro.sendMessage(from, {text: jr}, {quoted:info, contextInfo: {"mentionedJid": jr}})	
break

case 'simi':
if(!isGroup) return reply(enviar.msg.grupo)
try {
datasimi = await fetchJson(`https://api.simsimi.vn/v1/simtalk`, {method: 'POST', headers: {'content-type': "application/x-www-form-urlencoded"}, body: "text="+q+"&lc=pt"})
return reply(datasimi.message)
} catch (e){
return reply("Resposta n√£o encontrada..")
}
break

case 'simih':
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isSimi) return reply('O modo simi est√° ativo')
dataGp[0].simi1 = true
setGp(dataGp)
reply('Ativado com sucesso o modo simi neste grupo..')
} else if(Number(args[0]) === 0) {
if(!isSimi) return reply('J√° est√° Desativado.')
dataGp[0].simi1 = false
setGp(dataGp)
reply('Desativando o modo simi com sucesso neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar, lerdao vc emkkkk')
}
break

case 'simih2':
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isSimi2) return reply('O modo Simi est√° ativo')
dataGp[0].simi2 = true
setGp(dataGp)
reply('Ativado com sucesso o modo simi neste grupo..')
} else if(Number(args[0]) === 0) {
if(!isSimi2) return reply('J√° est√° Desativado.')
dataGp[0].simi2 = false
setGp(dataGp)
reply('Desativando o modo simi com sucesso neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar, lerdao vc emkkkk')
}
break

case 'autofigu': case 'autosticker':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isAutofigu) return reply('Ja esta ativo')
dataGp[0].autosticker = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de auto figurinhas neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isAutofigu) return reply('Ja esta Desativado')
dataGp[0].autosticker = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de auto figurinhas neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'autorepo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isAutorepo) return reply('Ja esta ativo')
dataGp[0].autoresposta = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de auto resposta neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isAutorepo) return reply('Ja esta Desativado')
dataGp[0].autoresposta = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de auto resposta neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'modobrincadeira':
case 'modobrincadeiras':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar.')
if(Number(args[0]) === 1) {
if(isModobn) return reply('O modo brincadeira j√° est√° ativo.')
dataGp[0].jogos = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de Modo brincadeira neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isModobn) return reply('O modo brincadeira j√° est√° desativado.')
dataGp[0].jogos = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de Modo brincadeira neste grupo.')
} else {
reply('1 para ativar, 0 para desativar')
}
break

//esse comando foi alterado por conta de bugs‚òëÔ∏è
case 'rename':
case 'roubar':
const { Sticker } = require('./armor/sticker/sticker.js');
if(!isQuotedSticker) return await reply(`Responda um *STICKER* com *${prefix+command}* pack/autor`);
try {
let [pack, autor] = q.split('/');
if(!pack || !autor) return await reply(`Responda um *STICKER* com *${prefix+command}* pack/autor`)
zzbuffer = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, 'sticker');
const _sticker = new Sticker()
_sticker.addFile(zzbuffer); 
_sticker.options.metadata = {pack: pack, author: autor, emojis: ['ü§†', 'ü•∂', 'üòª']};
resultadoSt = await _sticker.start();
await sandro.sendMessage(from, {sticker: fs.readFileSync(resultadoSt[0].value)}, {quoted: info})
await fs.unlinkSync(resultadoSt[0].value)
} catch(e) {
console.log(e)
await reply(`erro`);
}
break


case 'leveling':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('Ative pressione 1, desativar pressione 0')
if(Number(args[0]) === 1) {
if(isLevelingOn) return reply('O recurso de n√≠vel j√° estava ativo antes nesse grupo.')
dataGp[0].level = true
setGp(dataGp)
reply(enviar.levelon) 
} else if(Number(args[0]) === 0) {
if(!isLevelingOn) return reply(`O recurso de level j√° est√° desativado neste grupo.`)
dataGp[0].level = false
setGp(dataGp)
reply(enviar.leveloff)
} else {
reply('Adicionar par√¢metro 1 ou 0.')
}
break

case 'listafake':
if(!isGroup) return reply(enviar.msg.grupo)
if(!SoDono) return reply(enviar.msg.donosmt)
teks = 'ùóôùóîùóûùóòùó¶ ùó°ùó¢ ùóöùó•ùó®ùó£ùó¢  \n'
men = []
for(let mem of groupMembers) {
    if(!mem.id.startsWith(55)) {
teks += `‚û§ @${mem.id.split('@')[0]}\n`
men.push(mem.id)
    }
}
if(teks.indexOf('‚û§') < 0) return reply(' ùó°ùó≤ùóªùóµùòÇùó∫ ùóôùóÆùóπùòÄùóº ùóóùó≤ùòÅùó≤ùó∞ùòÅ??ùó±ùóº')
sandro.sendMessage(from, {text: teks, mentions: men})
break

case 'tinder': {
    // Checar se o comando tem o formato correto (nome/idade/status/bio/telefone)
    const args = q.trim().split('/');
    if (args.length !== 5) {
        return reply(`Por favor, forne√ßa as informa√ß√µes no formato: ${prefix}tinder nome/idade/status/bio/telefone\n\nN√£o entendeu? Use: ${prefix}infotinder`);
    }

    const [nome, idade, status, bio, telefone] = args.map(arg => arg.trim());

    // Checar se o telefone fornecido est√° no formato correto (por exemplo, um n√∫mero v√°lido)
    const telefoneRegex = /^\+?\d{10,15}$/;
    if (!telefoneRegex.test(telefone)) {
        return reply("Por favor, forne√ßa um n√∫mero de telefone v√°lido (com ou sem o +).");
    }

    // Carregar os dados do Tinder
    let tinderData = {};
    try {
        tinderData = loadTinderData(); // Fun√ß√£o que carrega os dados
    } catch (err) {
        tinderData = {}; // Inicializar como objeto vazio em caso de erro
    }

    // Verificar se o usu√°rio j√° tem um perfil
    if (tinderData[telefone]) {
        return reply("Voc√™ j√° est√° registrado no Tinder.");
    }

    // Adicionar as informa√ß√µes do usu√°rio ao objeto de dados
    tinderData[telefone] = { nome, idade, status, bio, telefone };

    // Salvar os dados atualizados no arquivo
    try {
        saveTinderData(tinderData); // Fun√ß√£o que salva os dados
    } catch (err) {
        return reply("Erro ao salvar os dados. Tente novamente.");
    }

    return reply(`Perfil registrado com sucesso! Use: ${prefix}vertinder`);
}
break;

case 'vertinder': {
    // Carregar os dados do Tinder
    let profileData = {};
    try {
        profileData = loadTinderData();
    } catch (err) {
        return reply("Erro ao carregar os perfis. Tente novamente.");
    }

    // Verificar se existem perfis registrados
    if (Object.keys(profileData).length === 0) {
        return reply("N√£o h√° perfis registrados no Tinder ainda.");
    }

    // Definir a foto padr√£o para todos os perfis
    const fotoPadrao = "https://i.imgur.com/PQXQm7g.jpeg";

    // Preparar a resposta com todos os perfis
    let allProfiles = "Perfis registrados no Tinder:\n\n";
    for (let telefone in profileData) {
        const userProfile = profileData[telefone];
        allProfiles += `Nome: ${userProfile.nome}\nIdade: ${userProfile.idade}\nStatus: ${userProfile.status}\nBio: ${userProfile.bio}\nTelefone: ${userProfile.telefone}\n\n`;
    }

    // Enviar todos os perfis com a foto padr√£o, apenas uma vez
    try {
        sandro.sendMessage(from, {
            image: { url: fotoPadrao },
            caption: allProfiles
        }, { quoted: info });
    } catch (err) {
        return reply("Erro ao enviar os perfis. Tente novamente.");
    }
}
break;

case 'limpartinder': {
if(!SoDono) return reply(enviar.msg.donosmt)
    try {
        // Salvar um objeto vazio para limpar todos os dados
        saveTinderData({});
        return reply("Todos os perfis do Tinder foram apagados com sucesso.");
    } catch (err) {
        return reply("Erro ao tentar limpar os perfis. Tente novamente.");
    }
}
break;

case 'infotinder':
reply(`Para usar o Tinder de forma correta use o seguinte comando *Exemplo*

${prefix}tinder Sandro/19/namorando/Sou sandro md/5531848√ó√ó√ó√ó

J√° que aprendeu se registrar agora para usar o tinder e come√ßar a conversar ou at√© mesmo achar o amor da sua vida üíò use 

${prefix}vertinder`)
break

case 'bangp':
case 'unbangp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!SoDono) return reply(enviar.msg.donosmt)
if(command == 'bangp'){
if(isBanchat) return reply(`Este grupo j√° est√° banido.`)
dataGp[0].bangp = true
setGp(dataGp)
reply(`Grupo banido com sucesso`)
} else {
if(!isBanchat) return reply(`Este grupo n√£o est√° mais banido.`)
dataGp[0].bangp = false
setGp(dataGp)
reply(`Grupo desbanido...`)
}
break

case 'boton':
case 'botoff':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isBotoff) {
nescessario.botoff = true
setNes(nescessario)
reply(`Desativando fun√ß√µes e parando a execu√ß√£o de comandos do ${NomeDoBot}`)
} else if(isBotoff) {
nescessario.botoff = false
setNes(nescessario)
reply(`Ativando todos os funcionamentos do ${NomeDoBot}`)
}
break

case 'modonsfw':
case 'nsfw':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(args.length < 1) return reply('Hmmmm')
if(Number(args[0]) === 1) {
if(isNsfw) return reply('O modo nsfw j√° est√° ativo.')
dataGp[0].nsfw = true
setGp(dataGp)
reply(`‚úì Ativado com sucesso o modo nsfw +18 no grupo: *${groupMetadata.subject}*`)
} else if(Number(args[0]) === 0) {
if(!isNsfw) return reply('O modo nsfw j√° est√° desativado.')  
dataGp[0].nsfw = false
setGp(dataGp)
reply(`‚úì Modo Nsfw +18 desativado com sucesso no grupo: *${groupMetadata.subject}*`)
} else {
reply('1 para ativar, 0 para desligar')
}
break

case 'antipalavr√£o':
case 'antipalavrao':  
case 'antipalavra':    
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply(`1/0, Exemplo: ${prefix + command} 1`)
if(Number(args[0]) === 1) {
if(isPalavrao) return reply('Ja esta ativo.')
dataGp[0].antipalavrao.active = true
setGp(dataGp)
reply('Ativou com sucesso o recurso de anti palavras hardcore neste grupo.')
} else if(Number(args[0]) === 0) {
if(!isPalavrao) return reply('Ja esta Desativado')
dataGp[0].antipalavrao.active = false
setGp(dataGp)
reply('Desativou com sucesso o recurso de anti palavra harcore neste grupo.Ô∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'addpalavra':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isPalavrao) return reply('Anti palavr√£o desativado!')
if(args.length < 1) return reply( `Use assim : ${prefix + command} [palavr√£o]. exemplo ${prefix + command} puta`)
texto = args.join(' ').toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "")
if(isPalavras.includes(texto)) return reply('J√° foi adicionada')
dataGp[0].antipalavrao.palavras.push(texto)
setGp(dataGp)
reply('Palavr√£o adicionado com sucesso!')
break

case 'delpalavra':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isPalavrao) return reply('Anti palavr√£o desativado!')
if(args.length < 1) return reply(`Use assim: ${prefix + command} [palavr√£o]. Exemplo: ${prefix + command} Rapariga`)
texto = args.join(' ').toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "")
if(!isPalavras.includes(texto)) return reply('J√° foi removida')
var i = dataGp[0].antipalavrao.palavras.indexOf(texto)
dataGp[0].antipalavrao.palavras.splice(i, 1)
setGp(dataGp)
reply('Palavr√£o removido da lista com sucesso!')
break

case 'listapalavr√£o': case 'listapalavra':
case 'listpalavra':
if(!isPalavrao) return reply('Anti palavr√£o desativado!')
let lbw = `Esta √© a lista de palavr√£o\nTotal: ${isPalavras.length}\n`
for (let i of isPalavras) {
lbw += `‚û∏ ${i}\n`
}
await reply(lbw)
break

case 'limitecaracteres':
case 'limiteflood':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(args.length < 1) return reply(`Digite ${prefix + command} 1 para ativar`)
if(Number(args[0]) === 1) {
if(isAntiFlood) return reply(`O recurso limite de caracteres j√° est√° ativo no grupo.`)
dataGp[0].limitec.active = true
setGp(dataGp)
reply(`O recurso limite de caracteres foi ativado nesse grupo.`)
} else if(Number(args[0]) === 0) {
 if(!isAntiFlood) return reply('O recurso limite de caracteres n√£o est√° ativado no grupo.')
dataGp[0].limitec.active = false
setGp(dataGp)
reply('O recurso limite de caracteres foi desativado nesse grupo.Ô∏è')
} else {
reply(`Digite ${prefix + command} 1 para ativar, 0 para desativar o recurso`)
}
break

case 'limitec_global':
case 'limitec':
if(!SoDono && !isnit && !ischyt) return reply(enviar.msg.donosmt)
if(!isAntiFlood) return reply(`Ative este recurso primeiro ${prefix}limiteflood 1`)
if(!q) return reply(`Cade a quantidade? Ex: ${prefix + command} 5000`)
if(isNaN(q) == true) return reply('Digite apenas n√∫meros')
if(command == 'limitec'){
dataGp[0].limitec.quantidade = q
setGp(dataGp)
reply(`Foi alterado o limite de caracteres para: ${q}`)
} else {
var data = { limitefl: q }
fs.writeFileSync('./database/usuarios/flood.json', JSON.stringify(data, null, '\t'))
reply(`Foi adicionado um limite global de caracteres de: ${q}`)
}
break

case 'status':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins && !SoDono && !isnit && !issupre && !ischyt && !info.key.fromMe) return reply(enviar.msg.adm)
reply(mess.statusBot(isAnticall, isAntiPv, isAntiImg, isAntiVid, isAntiAudio, isAntiSticker, isNsfw, Antidoc, isAntiCtt, Antiloc, isAntilinkgp, isAntiLinkHard, isAntifake, isAntiNotas, isAnticatalogo, isPalavrao, isAntiFlood, isWelkom, isWelkom2, isSimi, isSimi2, isAutofigu, isAutorepo, isModobn, isModoAluguel, isLevelingOn))
break

case 'reiniciar':
if(!SoDono) return reply(mess.onlyOwner())
reply("Reiniciando o sistema, em segundos j√° estarei de volta senhor(a) as suas ordens!")
setTimeout(async() => {process.exit()}, 1200)
break

case 'novoqr':
if(!SoDono) return reply(enviar.msg.donosmt);
reply("Ser√° apagado o qrcode, e ir√° gerar um novo, fique atento no terminal para ler novamente..");
setTimeout(() => {
fs.rmdirSync(folderUserAuth, { recursive: true}); }, 1500)
break;

//==========(Sticker-Stickers)===========\\

case 'emoji': case 'semoji':
if(!q) return reply(`*Exemplo:* ${prefix}emoji ‚òπÔ∏è/whatsapp`)
emot = q.split('/')[0]
jemot = q.split('/')[1]
if(jemot == 'apple'){ idemot = 0 }
else if(jemot == 'google'){ idemot = 1 }
else if(jemot == 'samsung'){ idemot = 2 }
else if(jemot == 'microsoft'){ idemot = 3 }
else if(jemot == 'whatsapp'){ idemot = 4 }
else if(jemot == 'twitter'){ idemot = 5 }
else if(jemot == 'facebook'){ idemot = 6 }
else if(jemot == 'joypixels'){ idemot = 7 }
else if(jemot == 'openmoji'){ idemot = 8 }
else if(jemot == 'emojidex'){ idemot = 9 }
else if(jemot == 'lg'){ idemot = 10 }
else if(jemot == 'htc'){ idemot = 11 }
else if(!jemot){ idemot = 4 }
else{
return reply(`Exemplo: ${prefix}emoji ‚òπÔ∏è/whatsapp`)
}
reply(enviar.espere)
if(idemot == undefined) return
emoji.get(emot)
.then(emoji => {
sendStickerFromUrl(from, emoji.images[idemot].url)
}).catch(e => {
reply("Emoji n√£o encontrado.. Tente com outro emoji para ver est√° funcionando..")
})
break


case 'fstiker':
case 'fsticker':
case 'f':
var RSM = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var boij = RSM?.imageMessage || info.message?.imageMessage || RSM?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage || RSM?.viewOnceMessage?.message?.imageMessage
var boij2 = RSM?.videoMessage || info.message?.videoMessage || RSM?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage || RSM?.viewOnceMessage?.message?.videoMessage  
if(boij) {
var pack = `‚Üß [ü§ñ] Criada por:\n‚Ä¢ ‚Ü≥ ${NomeDoBot}\n‚Äî\n‚Üß [üïµüèª‚Äç‚ôÇÔ∏è] Propriet√°rio:\n‚Ä¢ ‚Ü≥ ${NickDono}`
var author2 = `‚Üß [üë§] Feito por:\n‚Ä¢ ‚Ü≥ ${pushname}\n‚Äî\n‚Ä¢ [‚õÑ] A melhor bot do WhatsApp!`
reply(enviar.espere)
owgi = await getFileBuffer(boij, 'image')
let encmediaa = await sendImageAsSticker(sandro, from, owgi, info, { packname:pack, author:author2})
await DLT_FL(encmediaa)
} else if(boij2 && boij2?.seconds < 11) {
var pack = `‚Üß [ü§ñ] Criada por:\n‚Ä¢ ‚Ü≥ ${NomeDoBot}\n‚Äî\n‚Üß [üïµüèª‚Äç‚ôÇÔ∏è] Propriet√°rio:\n‚Ä¢ ‚Ü≥ ${NickDono}`
var author2 = `‚Üß [üë§] Feito por:\n‚Ä¢ ‚Ü≥ ${pushname}\n‚Äî\n‚Ä¢ [‚õÑ] A melhor bot do WhatsApp!`
reply(enviar.espere)
owgi = await getFileBuffer(boij2, 'video')
let encmedia = await sendVideoAsSticker(sandro, from, owgi, info, { packname:pack, author:author2})
await DLT_FL(encmedia)
} else {
reply(`Enviar imagem / v√≠deo / gif com legenda \n${prefix}sticker (dura√ß√£o do adesivo de v√≠deo de 1 a 10 segundos)`)
}
break

case 'figurinha': case 's': case 'stickergifp': case 'figura': case 'f': case 'figu': case 'st': case 'stk': case 'fgif':
(async function () {
    try {
        var legenda = q ? q?.split("/")[0] : `‚ïº‚ä≥‚ä∞ Solicitado Por:\n‚ïº‚ä≥‚ä∞ Bot:\n‚ïº‚ä≥‚ä∞ Dono:`;
        var autor = q ? q?.split("/")[1] : q?.split("/")[0] ? '' : `${pushname}\n${NomeDoBot}\n${NickDono}`;

        if (isMedia && info.message.imageMessage || isQuotedImage) {
            var encmedia = isQuotedImage 
                ? info.message.extendedTextMessage?.contextInfo?.quotedMessage?.imageMessage 
                : info.message.imageMessage;

            if (!encmedia || !encmedia.mimetype) {
                reply("Erro: N√£o foi poss√≠vel encontrar a m√≠dia.");
                return;
            }

            var rane = getRandom('.' + await getExtension(encmedia.mimetype));
            var buffimg = await getFileBuffer(encmedia, 'image');
            fs.writeFileSync(rane, buffimg);
            var rano = getRandom('.webp');

            exec(`ffmpeg -i ${rane} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 ${rano}`, (err) => {
                if (err) {
                    reply("Erro ao converter a imagem.");
                    fs.unlinkSync(rane);
                    return;
                }
                fs.unlinkSync(rane);

                var json = {
                    "sticker-pack-name": legenda,
                    "sticker-pack-publisher": autor
                };
                var exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00]);
                var jsonBuff = Buffer.from(JSON.stringify(json), "utf-8");
                var exif = Buffer.concat([exifAttr, jsonBuff]);
                exif.writeUIntLE(jsonBuff.length, 14, 4);
                var nomemeta = `${Math.floor(Math.random() * (99999 - 11111 + 1) + 11111)}.temp.exif`;
                fs.writeFileSync(`./${nomemeta}`, exif);

                exec(`webpmux -set exif ${nomemeta} ${rano} -o ${rano}`, () => {
                    sandro.sendMessage(from, { sticker: fs.readFileSync(rano) }, { quoted: info });
                    fs.unlinkSync(nomemeta);
                    fs.unlinkSync(rano);
                });
            });
        } else if (isMedia && info.message.videoMessage?.seconds < 11 || isQuotedVideo && info.message.extendedTextMessage?.contextInfo?.quotedMessage?.videoMessage?.seconds < 11) {
            var encmedia = isQuotedVideo 
                ? info.message.extendedTextMessage?.contextInfo?.quotedMessage?.videoMessage 
                : info.message.videoMessage;

            if (!encmedia || !encmedia.mimetype) {
                reply("Erro: N√£o foi poss√≠vel encontrar a m√≠dia.");
                return;
            }

            var rane = getRandom('.' + await getExtension(encmedia.mimetype));
            var buffimg = await getFileBuffer(encmedia, 'video');
            fs.writeFileSync(rane, buffimg);
            var rano = getRandom('.webp');

            exec(`ffmpeg -i ${rane} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 200:200 ${rano}`, (err) => {
                if (err) {
                    reply("Erro ao converter o v√≠deo.");
                    fs.unlinkSync(rane);
                    return;
                }
                fs.unlinkSync(rane);

                var json = {
                    "sticker-pack-name": legenda,
                    "sticker-pack-publisher": autor
                };
                var exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00]);
                var jsonBuff = Buffer.from(JSON.stringify(json), "utf-8");
                var exif = Buffer.concat([exifAttr, jsonBuff]);
                exif.writeUIntLE(jsonBuff.length, 14, 4);
                var nomemeta = `${Math.floor(Math.random() * (99999 - 11111 + 1) + 11111)}.temp.exif`;
                fs.writeFileSync(`./${nomemeta}`, exif);

                exec(`webpmux -set exif ${nomemeta} ${rano} -o ${rano}`, () => {
                    sandro.sendMessage(from, { sticker: fs.readFileSync(rano) }, { quoted: info });
                    fs.unlinkSync(nomemeta);
                    fs.unlinkSync(rano);
                });
            });
        } else {
            reply("Voc√™ precisa enviar ou marcar uma imagem ou v√≠deo com no m√°ximo 10 segundos.");
        }
    } catch (e) {
        console.log(e);
        reply("Hmm deu erro");
    }
})();
break;

case 'fstiker':
case 'fsticker':
case 'f':
var RSM = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var boij = RSM?.imageMessage || info.message?.imageMessage || RSM?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage || RSM?.viewOnceMessage?.message?.imageMessage
var boij2 = RSM?.videoMessage || info.message?.videoMessage || RSM?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage || RSM?.viewOnceMessage?.message?.videoMessage  
if(boij) {
var packnameStk = `‚Üß ‚ù™ü§ñ‡∏∫‡£™‡£≠ÕòÍï∏‚ñ∏ ùêÇùê´ùê¢ùêöùêùùêö ùê©ùê®ùê´:\n‚Ä¢ ‚Ü≥ ${NomeDoBot}\n‚Äî\n‚Üß ‚ù™üïµüèª‚Äç‚ôÇÔ∏è‡∏∫‡£™‡£≠ÕòÍï∏‚ñ∏ ùêèùê´ùê®ùê©ùê´ùê¢ùêûùê≠ùêöùê´ùê¢ùê®:\n‚Ä¢ ‚Ü≥ ${NickDono}`
var authorSticker = `‚Üß ‚ù™üë§‡∏∫‡£™‡£≠ÕòÍï∏‚ñ∏ ùêíùê®ùê•ùê¢ùêúùê¢ùê≠ùêöùêùùê® ùê©ùê®ùê´:\n‚Ä¢ ‚Ü≥ ${pushname}\n‚Äî\n‚Üß CANAL‚ô•Ô∏è
ùôéùòºùôâùòøùôçùôä ùôàùòø`
reply(enviar.espere)
owgi = await getFileBuffer(boij, 'image')
let ENC_MEDIA1 = await sendImageAsSticker(sandro, from, owgi, info, {packname: packnameStk, author: authorSticker})
await DLT_FL(ENC_MEDIA1)
} else if(boij2 && boij2?.seconds < 11) {
var packnameStk = `‚Üß ‚ù™ü§ñ‡∏∫‡£™‡£≠ÕòÍï∏‚ñ∏ ùêÇùê´ùê¢ùêöùêùùêö ùê©ùê®ùê´:\n‚Ä¢ ‚Ü≥ ${NomeDoBot}\n‚Äî\n‚Üß ‚ù™üïµüèª‚Äç‚ôÇÔ∏è‡∏∫‡£™‡£≠ÕòÍï∏‚ñ∏ ùêèùê´ùê®ùê©ùê´ùê¢ùêûùê≠ùêöùê´ùê¢ùê®:\n‚Ä¢ ‚Ü≥ ${NickDono}`
var authorSticker = `‚Üß ‚ù™üë§‡∏∫‡£™‡£≠ÕòÍï∏‚ñ∏ ùêíùê®ùê•ùê¢ùêúùê¢ùê≠ùêöùêùùê® ùê©ùê®ùê´:\n‚Ä¢ ‚Ü≥ ${pushname}\n‚Äî\n‚Üß ‚ù™‚õÑ‡∏∫‡£™‡£≠ÕòÍï∏‚ñ∏ ùêïùê¢ùê¨ùê¢ùê≠ùêû ùêßùê®ùê¨ùê¨ùê® ùê¨ùê¢ùê≠ùêû:\n‚Ä¢ ‚Ü≥ https://yurimodz-apis.xyz`
reply(enviar.espere)
owgi = await getFileBuffer(boij2, 'video')
let ENC_MEDIA2 = await sendVideoAsSticker(sandro, from, owgi, info, {packname: packnameStk, author: authorSticker})
await DLT_FL(ENC_MEDIA2)
} else {
reply(`Envie uma imagem, v√≠deo ou gif com legenda: ${prefix}sticker (dura√ß√£o do adesivo de v√≠deo de 1 a 10 segundos)`)
}
break

case 'togif': 
if(!isQuotedSticker) return reply('Por favor, atribua uma figurinha animada √† mensagem para realizar a convers√£o para v√≠deo/gif.');
try {
if((isMedia && !info.message.videoMessage || isQuotedSticker) && !q.length <= 1) {
const { FiguMp4OuGif } = require('./arquivos/funcoes/togif.js');
getBufferWebP = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
fs.writeFileSync("./database/data/media/sticker/convert.webp", getBufferWebP);
outputFile = "./database/data/media/sticker/convert.webp";
convertWebP = await FiguMp4OuGif(outputFile);
await sandro.sendMessage(from, {video: {url: convertWebP}, gifPlayback: true, fileName: 'sticker-sb.gif'}, {quoted: info}).catch(async(error) => {
    await reply(mess.error()); // Notificar ao usu√°rio que ocorreu um erro ao enviar o resultado da convers√£o do WebP para MP4.
    await DLT_FL(outputFile); // Apagar o arquivo, caso ocorrer um erro na convers√£o entre eles.
    console.log(error)
});
}
} catch(error) {
    await reply(mess.error()); // Notificar ao usu√°rio que ocorreu um erro ao realizar a convers√£o do WebP para MP4.
    console.log(error)
};
break

case 'toimg':
if(!isQuotedSticker) return reply('Por favor, *mencione um sticker* para executar o comando.')
try {
reply(enviar.espere)
buff = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, 'sticker')
sandro.sendMessage(from, {image: buff}, {quoted: selo}).catch(e => {
console.log(e);
reply('Ocorreu um erro ao converter o *sticker para imagem.*')
})
} catch {
reply(mess.error())
}
break

//=====================================\\

case 'metadinha':
reagir(from, "‚úÖ")
try {
MET = await fetchJson(`http://br1.bronxyshost.com:4360/random/metadinha?apikey=${SANDRO_MD}`);
sandro.sendMessage(from, {image: {url: MET.masculina}, caption: `*HOMEM*`})
sandro.sendMessage(from, {image: {url: MET.feminina}, caption: `*MULHER*`})
} catch (e) {
return reply("Erro..")
}
break;

case 'comunismo':
case 'bolsonaro':
case 'bnw':
case 'beautiful':
case 'blur':
case 'affect':
case 'del':
case 'circle':
case 'dither':
case 'facepalm':
case 'invert':
case 'magik':
case 'rotate':
case 'rip':
case 'jail':
case 'trash':
case 'pixelate':
case 'sepia':
case 'wanted':
case 'wasted':
case 'lgbt':
case 'karaba':
try {
if((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
imagem = await downloadContentFromMessage(post, 'image')
base64 = Buffer.from([])
for await(const send of imagem) { base64 = Buffer.concat( [ base64, send ] ) }
reply(enviar.espere)
link = await upload(base64)
sandro.sendMessage(from, {image: {url:`https://yurimodz-apis.xyz/api/canvas/${command}?link=${link}&apikey=${SANDRO_MD_BOT}`}}, {quoted: selo}).catch(e => {
return reply(mess.error())
})
} else {
reply('Mencione uma imagem para atribuir o efeito a foto.')
}
} catch (e) {
if(JSON.stringify(e).includes(API_KEY_sandro)) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
} else {
reply("Ocorreu um erro ao adicionar o *efeito na imagem. Tente novamente!")  
}
}
break
//========(SORTEIO-VOTAR-CASES)=========\\
//
case 'substituir':
if(!SoDono && !isnit) return reply("S√≥ dono..")
 if(isMedia && !info.message.videoMessage || isQuotedDocument) {
media = isQuotedDocument ? info.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : info.message.documentMessage
rane = getRandom('.'+await getExtension(media.mimetype))
doc = await getFileBuffer(media, 'document')
fs.writeFileSync(q, doc)
sandro.sendMessage(from, {text:'O arquivo foi substitu√≠do para outro local com sucesso.'},{quoted: selo})
} else {
reply('Marque o documento ou arquivo..')
}
break

case 'index-bot':
if(!SoDono)return reply(enviar.msg.donosmt)
if(isMedia && !info.message.videoMessage || isQuotedDocument) {
media = isQuotedDocument ? info.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : info.message.documentMessage
rane = getRandom('.'+await getExtension(media.mimetype))
doc = await getFileBuffer(media, 'document')
fs.writeFileSync('./sandro.js', doc)
sandro.sendMessage(from, {text: "O arquivo './sandro.js' foi atualizado com sucesso."},{quoted: selo})
} else {
reply('Marque o documento ou o arquivo que deseja enviar pra determinar pasta ou substituir..')
}
break

case 'getcase':
case 'puxarcase':
try{
if (!SoDono) return reply(enviar.msg.donosmt)
reply('Seu perdido √© uma ordem! Aguarde um pouco mestre! <3')
const getCase = (cases) => {
return 'case '+`'${cases}'`+fs.readFileSync("./sandro.js").toString().split('case \''+cases+'\'')[1].split("break")[0]+"break"
}
await sleep(500)
msgSemQuoted(`${getCase(q)}`)
} catch(e) {
reply('A case n√£o foi encontrada, voc√™ deve ter escrito errado...')
}
break

case 'rvisu': 
case 'revelarvisu': 
case 'open':
case 'rvisu':
case 'revelarvisu':
try{
if(!isQuotedVisuU || !isQuotedVisuU2) return reply(`marque uma foto/video em visualiza√ß√£o unica`)
reagir(from, "üëÅÔ∏è")
if(JSON.stringify(info).includes("videoMessage")) {
var vio = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var viewImage = vio?.imageMessage || info.message?.imageMessage || vio?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage || vio?.viewOnceMessage?.message?.imageMessage
var viewVideo = vio?.videoMessage || info.message?.videoMessage || vio?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage || vio?.viewOnceMessage?.message?.videoMessage
viewVideo.viewOnce = false
viewVideo.video = {url: viewVideo.url}
viewVideo.caption += "\n\nüëÅÔ∏è *REVELANDO ONE VISION* üëÅÔ∏è"
sandro.sendMessage(from, viewVideo, {quoted: info})
} else if(JSON.stringify(info).includes("imageMessage")) {
var vio = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var viewImage = vio?.imageMessage || info.message?.imageMessage || vio?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage || vio?.viewOnceMessage?.message?.imageMessage
var viewVideo = vio?.videoMessage || info.message?.videoMessage || vio?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage || vio?.viewOnceMessage?.message?.videoMessage
viewImage.viewOnce = false
viewImage.image = {url: viewImage.url}
viewImage.caption += "\n\nüëÅÔ∏è *REVELANDO ONE VISION* üëÅÔ∏è"
sandro.sendMessage(from, viewImage, {quoted: info})
} else if(info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.viewOnceMessageV2Extension?.message?.audioMessage) {
var viewAudio = info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.viewOnceMessageV2Extension?.message?.audioMessage
viewAudio.viewOnce = false
viewAudio.ptt = true
media = await getFileBuffer(viewAudio, `audio`)
sandro.sendMessage(from, {audio: media}, {quoted: info})
}
} catch(e){
console.log(e)
reply(`Erro`)
}
break

case 'bann':
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!menc_os2 || menc_jid2[1]) return reply("Marque a mensagem do usu√°rio ou marque o @ dele.., lembre de s√≥ marcar um usu√°rio...")
if(!JSON.stringify(groupMembers).includes(menc_os2)) return reply("Este usu√°rio j√° foi removido ou saiu do grupo.")
if(premium.includes(menc_os2)) return mentions(`@${menc_os2.split("@")[0]} a(o) @${sender.split("@")[0]} est√° querendo banir voc√™, visualiza esse problema ae üò∂`, [menc_os2], true)
if(groupAdmins.includes(menc_os2)) return mentions(`@${menc_os2.split("@")[0]} a(o) @${sender.split("@")[0]} est√° querendo banir voc√™, visualiza esse problema ae üò∂`, [menc_os2], true)
if(botNumber.includes(menc_os2)) return reply('N√£o sou besta de remover eu mesmo n√© üôÅ, mas estou decepcionado com voc√™')
if(numerodono.includes(menc_os2)) return reply('N√£o posso remover meu dono ü§ß')
sandro.sendMessage(from, {text: `@${menc_os2.split("@")[0]} Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos ainda n√£o esclarecidos) -`, mentions: [menc_os2]})
sandro.groupParticipantsUpdate(from, [menc_os2], "remove")  
break

case 'band':
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
try {
if(!menc_os2 || menc_jid2[1]) return reply("Marque a mensagem do usu√°rio ou marque o @ dele.., lembre de s√≥ marcar um usu√°rio...")
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify().includes(menc_os2)) return reply("Este usu√°rio j√° foi removido do grupo.")
if(botNumber.includes(menc_os2)) return reply('N√£o sou besta de remover eu mesmo n√© üôÅ, mas estou decepcionado com voc√™')
if(numerodono.includes(menc_os2)) return reply('N√£o posso remover meu dono ü§ß')
sandro.sendMessage(from, {text: `@${menc_os2.split("@")[0]} Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -`, mentions: [menc_os2]})
sandro.groupParticipantsUpdate(from, [menc_os2], "remove")  
} catch (e) {
console.log(e)
}
break

case 'add':  //esse comando pode dar ban no seu n√∫mero cuidado.
case 'unkick':
if(!SoDono) return reply(`Somente meu propriet√°rio pode utilizar esse comando!`);
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!q && info.message.extendedTextMessage === null) return reply('Marque a mensagem ou coloque o n√∫mero de quem voc√™ quer adicionar no grupo.')
try {
useradd = `${args.join(" ").replace(/\D/g,'')}` ? `${args.join(" ").replace(/\D/g,'')}` : info.message.extendedTextMessage.contextInfo.participant
let id = `${useradd.replace(/\D/g,'')}`
if(!id) return reply(`N√∫mero inv√°lido.`)
let [result] = await sandro.onWhatsApp(id)
if(!result) return reply(`Esse n√∫mero n√£o est√° registrado no WhatsApp.`)
let response = await sandro.groupParticipantsUpdate(from, [result.jid], "add")
if(response[0].status == "409") {
sandro.sendMessage(from, {text: `Ele j√° est√° no grupo, como eu vou adicionar?`, mentions: [result.jid, sender]})
} else if(response[0].status == "403") {
sandro.sendMessage(from, {text: `N√£o consegui adicionar o @${result.jid.split("@")[0]} porque ele privou a conta.`, mentions: [result.jid, sender]})
} else if(response[0].status == "408") {
sandro.sendMessage(from, {text: `N√£o consegui adicionar o @${result.jid.split("@")[0]} porque ele saiu recentemente do grupo.`, mentions: [result.jid, sender]})
} else if(response[0].status == "401") {
sandro.sendMessage(from, {text: `N√£o consegui adicionar o @${result.jid.split("@")[0]} porque ele bloqueou o bot.`, mentions: [result.jid, sender]})
} else if(response[0].status == "200") {
sandro.sendMessage(from, {text: `Prontinho fiz o que voc√™ pediu.`, mentions: [result.jid, sender]})
} else {
reply("Vish acho que algo deu errado")
}
} catch(e) {
console.log("[ERROR]:"+ e)
}
break

case 'ban': 
case 'banir': 
case 'kick': 
case 'avadakedavra':
if(!isGroupAdmins && !SoDono) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
try {
if(!menc_os2 || menc_jid2[1]) return reply("Marque a mensagem do usu√°rio ou marque o @ dele.., lembre de s√≥ marcar um usu√°rio...")
if(!JSON.stringify(groupMembers).includes(menc_os2)) return reply("Este usu√°rio j√° foi removido do grupo ou saiu.")
if(botNumber.includes(menc_os2)) return reply('N√£o sou besta de remover eu mesmo n√© üôÅ, mas estou decepcionado com voc√™')
if(JSON.stringify(numerodono).indexOf(menc_os2) >= 0) return reply('N√£o posso remover meu dono ü§ß')
sandro.sendMessage(from, {text: `@${menc_os2.split("@")[0]} Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -`, mentions: [menc_os2]})
sandro.groupParticipantsUpdate(from, [menc_os2], "remove")  
} catch (e) {
console.log(e)
}
break

case 'ultplv':
case 'ultimas-palavras':{
try {
if(!menc_os2 || menc_jid2[1]) return reply("Marque a mensagem do usu√°rio ou marque o @ dele.., lembre de s√≥ marcar um usu√°rio...")
if(!JSON.stringify(groupMembers).includes(menc_os2)) return reply("Este usu√°rio j√° foi removido do grupo ou saiu.")
if(botNumber.includes(menc_os2)) return reply('N√£o sou besta de remover eu mesmo n√© üôÅ, mas estou decepcionado com voc√™')
if(JSON.stringify(numerodono).indexOf(menc_os2) >= 0) return reply('N√£o posso remover meu dono ü§ß')
reply("Elx tem 30s para falar suas √∫ltimas palavras!")
await delay(30000)
sandro.sendMessage(from, {text: `@${menc_os2.split("@")[0]} foi Removido (a) üëæ`, mentions: [menc_os2]})
sandro.groupParticipantsUpdate(from, [menc_os2], "remove")  
} catch (e) {
console.log(e)
}
}
break

case 'promover': 
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!menc_os2 || menc_jid2[1]) return reply("Marque a mensagem do usu√°rio ou marque o @ dele.., lembre de s√≥ marcar um usu√°rio...")
if(!JSON.stringify(groupMembers).includes(menc_os2)) return reply("Este usu√°rio foi removido do grupo ou saiu, n√£o ser√° poss√≠vel promover..")
sandro.sendMessage(from, {text: `@${menc_os2.split("@")[0]} Foi promovido(a) para adm com sucesso.`, mentions: [menc_os2]})
sandro.groupParticipantsUpdate(from, [menc_os2], "promote")  
break

case 'rebaixar': 
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(!menc_os2 || menc_jid2[1]) return reply("Marque a mensagem do usu√°rio ou marque o @ dele.., lembre de s√≥ marcar um usu√°rio...")
if(!JSON.stringify(groupMembers).includes(menc_os2)) return reply("Este usu√°rio foi removido do grupo ou saiu, n√£o ser√° poss√≠vel rebaixar..")
sandro.sendMessage(from, {text: `@${menc_os2.split("@")[0]} Foi rebaixado para [ MEMBRO COMUM ] com sucesso.`, mentions: [menc_os2]})
sandro.groupParticipantsUpdate(from, [menc_os2], "demote")  
break

case 'sorteio':
if(!isGroupAdmins) return reply(enviar.msg.adm)
try{
if(!isGroup) return reply(enviar.msg.grupo)
if(!q) return reply(`Coloque algo, ap√≥s o comando sorteio, por exemplo, ${prefix}sorteio de 100 R$`)
d = []
teks = `üéâ Meus parab√©ns ao vencedor do sorteio: ${q}\n-\n`
for(i = 0; i < 1; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
teks += `‚Ä¢ *Mencionando o vencedor:*  @${groupMembers[r].id.split('@')[0]}`
d.push(groupMembers[r].id)
}
mentions(teks, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'nuke': 
case 'arquivargp':
if(!SoDono && !isnit) return reply("S√≥ dono pode utilizar este comando...")
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if(info.key.fromMe) return 
blup = []
for ( i of groupMembers) {
if(!numerodono.includes(i.id)) blup.push(i.id)
}
blup.splice(blup.indexOf(botNumber), 1)
for ( i = 0; i < blup.length; i++) {
await sleep(500)
sandro.groupParticipantsUpdate(from, [blup[i]], 'remove')
} 
break

case 'sorteionumero':
case 'sorteionumeros':  
if(!isGroupAdmins) return reply(enviar.msg.adm)
try{
if(!isGroup) return reply(enviar.msg.grupo)
if(!q) return reply(`Coloque algo, ap√≥s o comando sorteio, por exemplo, ${prefix}sorteionumero de 100 R$`)
var numerossrt = sortear[Math.floor(Math.random() * sortear.length)] 
d = []
teks =  `üéâ Parab√©ns ao n√∫mero do sortudo, por ganhar o sorteio ${q}:\n-\n`
for(i = 0; i < 1; i++) {
teks += `‚Ä¢ O n√∫mero sorteado foi: ${numerossrt}`
d.push(numerossrt)
}
mentions(teks, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'ttp':
if (!q) return reply(`*_‚ùïColoque o texto que voc√™ quiser!_*\n- *üßë‚Äçüè´ Por exemplo:* ${prefix + command} sandro`)
reagir(from, "üëª")
await sleep(1000)
reply(enviar.espere)
string = args.join(' ') || 'Texto indefinido'
post = `http://br1.bronxyshost.com:4360/api/ttp?texto=${q}&apikey=${SANDRO_MD}`
sendStickerFromUrl(from, post, {quoted: info}).catch(e => {
reply(mess.error())  
})
break


case 'attp9': 
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} sandro-md`);
reply(enviar.espere)
var Fontes = command === "attp2" ? "Roboto" : "Noto Emoji, Noto Sans Mono"
sandro.sendMessage(from, {sticker: {url: `https://yurimodz-apis.xyz/makerfig/rgb?fig=attp6&texto=${q}&apikey=${SANDRO_MD_BOT}`}}, {quoted: info}).catch(() => {
return reply("Erro..");
})
} catch (e) {
return reply("Erro..");
}
break;

case 'attp8': 
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} sandro-md`);
reply(enviar.espere)
var Fontes = command === "attp2" ? "Roboto" : "Noto Emoji, Noto Sans Mono"
sandro.sendMessage(from, {sticker: {url: `https://yurimodz-apis.xyz/makerfig/rgb?fig=attp2&texto=${q}&apikey=${SANDRO_MD_BOT}`}}, {quoted: info}).catch(() => {
return reply("Erro..");
})
} catch (e) {
return reply("Erro..");
}
break;

//==========(TTPS/ATTP)============\\
case 'attp': 
case 'attp1': 
case 'attp2': 
case 'attp3': 
case 'attp4': 
case 'attp5': 
case 'attp6': 
case 'attp7': 
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} sandro-md`);
reply(enviar.espere)
var Fontes = command === "attp2" ? "Roboto" : "Noto Emoji, Noto Sans Mono"
sandro.sendMessage(from, {sticker: {url: `https://api.bronxyshost.com.br/api-bronxys/attp_edit?texto=${encodeURIComponent(q)}&fonte=${Fontes}&apikey=${API_SANDRO_MD}`}}, {quoted: info}).catch(() => {
return reply("Erro..");
})
} catch (e) {
return reply("Erro..");
}
break;

//======================================\\


//===(ZOUEIRAS/BRINCADEIRAS/HUMOR)===\\

case 'gerarnick':
case 'nick':
reply(`Enviando.. caso demore de mais nao consegui te enviar `)
try {
nick = args.join(' ')
if(ANT_LTR_MD_EMJ(q)) return reply("Ao realizar a solicitaÔøΩÔøΩo de criaÔøΩÔøΩo foi detectada letras modificadas ou emojis, ou seja, nÔøΩo se pode conter emojis e letras modificadas.");
if(!q) return reply(`Escreveva um nome para eu enviar ele com letras modificadas.\n*Exemplo:* ${prefix+command}LB Bot`);
axios.get(`http://br1.bronxyshost.com:4360/api/fazernick?nome=${q}&apikey=${SANDRO_MD}`)
.then(dados => {
var emoji = `„ÄΩÔ∏è`
nicks = dados.data
txt = '] Nicks Gerados Com Sucesso! ]\n\n'
for (let i = 0; i < nicks.length; i++) {
txt += `${emoji} ${nicks[i]}\n`
}
txt += `\n
ùôéùòºùôâùòøùôçùôä ùôàùòø`
reply(`${txt.trim()}`)
}).catch(e => {
reply('Acho que a api caiu, mas volta logo logo...')  
})
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou nao foi possivel executar esta a√ß√£o., espere retornar")   
} else {
reply("Erro ao gerar as fontes modificadas!") 
}
}
break

case 'chance':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))  
var avb = body.slice(7)
if(args.length < 1) return sandro.sendMessage(from, {text: `Voc√™ precisa digitar da forma correta\nExemplo: ${prefix}chance do luuck ser gay`}, {quoted: selo})
random = `${Math.floor(Math.random() * 100)}`
hasil = `A chance ${body.slice(8)} √© de... ${random}%`
sandro.sendMessage(from, {text: hasil, mentions: [sender]}, {quoted: selo})
break

case 'namorar': 
case 'pediremnamoro': 
// @Matheus
setTimeout(() => {reagir(from, "üíç")}, 300)
if(!isGroup) return reply(enviar.msg.grupo)
if(!menc_os2) return reply('Marque a mensagem ou o @ que queira pedir ela em namoro. Se voc√™ tomar um fora, ju√≠zo!')
if(botNumber.includes(menc_os2)) return reply("N√£o √© poss√≠vel pedir o bot em namoro, seu baitola.üôÑ")
if(JSON.stringify(namoro2).includes(menc_os2)) return reply(`Este usu√°rio j√° foi pedido em namoro...`)
if(JSON.stringify(namoro1).includes(menc_os2) && namoro1[namoro1.map(i => i.usu1).indexOf(menc_os2)].namorados == false) return reply(`Essa pessoa j√° pediu algu√©m em namoro... Sinto muito ${pushname} üòï`)
if(JSON.stringify(namoro1).includes(menc_os2) && namoro1[namoro1.map(i => i.usu1).indexOf(menc_os2)].namorados == true) return reply(`N√£o ser√° poss√≠vel pedir essa pessoa em namoro, pois a mesma j√° est√° com outro(a). üåö`)
if(JSON.stringify(namoro1).includes(sender) && namoro1[namoro1.map(i => i.usu1).indexOf(sender)].namorados == false) return mention(`Voc√™ j√° pediu para namorar com o (a) @${namoro1[namoro1.map(i => i.usu1).indexOf(sender)].usu2}. N√£o brinque com os sentimentos dos outros! Se decida logo ou digite: ${prefix}cancelarpedido`)
if(JSON.stringify(namoro1).includes(sender) && namoro1[namoro1.map(i => i.usu1).indexOf(sender)].namorados == true) return mention(`Voc√™ j√° est√° namorando com o (a) @${namoro1[namoro1.map(i => i.usu1).indexOf(sender)].usu2}...`)
namoro1.push({usu1: sender, usu2: menc_os2.split('@')[0], namorados: false, idgp: from, hora: hora, data: date})
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.push({id: menc_os2, pedido: sender.split('@')[0], idgp: from})
fs.writeFileSync("./database/func/namoro2.json", JSON.stringify(namoro2))
mention(`üåüü•≥ Psiu *@${menc_os2.split('@')[0]}*! Voc√™ acaba de ser pedido em namoro por *@${sender.split('@')[0]}*.\nEai voc√™ aceita o pedido, *sim ou n√£o?*`);
break

case 'cancelarpedido':
// @Matheus
if(!isGroup) return reply(enviar.msg.grupo)
if(!JSON.stringify(namoro1).includes(sender)) return reply("N√£o h√° pedido de namoro para cancelar.")
C13 = namoro1.map(i => i.usu1).indexOf(sender)
C15 = namoro2.map(i => i.id).indexOf(namoro1[C13].usu2 + "@s.whatsapp.net")
if(namoro1[C13].namorados == true) return reply("N√£o √© poss√≠vel cancelar o pedido de namoro depois de aceito.")
namoro1.splice(C13, 1)
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.splice(C15, 1)
fs.writeFileSync("./database/func/namoro2.json", JSON.stringify(namoro2))
reply("Pedido de namoro cancelado com sucesso.")
break

case 'terminar_namoro':
// @Matheus
if(!JSON.stringify(namoro1).includes(sender)) return reply(`Voc√™ n√£o est√° namorando com ningu√©m. Sinto muito!`)
D1 = namoro1.map(i => i.usu1).indexOf(sender)
D2 = namoro1.map(a => a.usu1).indexOf(`${namoro1[D1].usu2}@s.whatsapp.net`)
namoro1[D2].namorados = false
reply(`Agora voc√™ est√° totalmente solteiro, notifiquei a(o) sua/seu parceiro sobre o t√©rmino.`)
sandro.sendMessage(`${namoro1[D1].usu2}@s.whatsapp.net`, {text: `Tenho uma not√≠cia ruim sobre seu namoro, ele(a) acaba de terminar.\n‚Äì\n‚Ä¢ Seja feliz e lembre dos todos os bons momentos que voc√™s tiveram juntos.`}, {quoted: info})
namoro1.splice(D2, 1)
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro1.splice(D1, 1)
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
break

case 'minhadupla': case 'dupla':
// @Matheus
if(!isGroup) return reply(enviar.msg.grupo)
if(!JSON.stringify(namoro1).includes(sender)) return reply(`Voc√™ n√£o est√° namorando com ningu√©m. Sinto muito!`)
reagir(from, "‚ù§Ô∏è‚Äçü©π")
D1 = namoro1.map(i => i.usu1).indexOf(sender)
if(namoro1[D1].namorados == false) return reply(`A pessoa que voc√™ pediu em namoro n√£o aceitou o pedido ainda. Portanto, n√£o √© poss√≠vel consultar os dados da dupla.Ô∏è`)
txt = `@${namoro1[D1].usu1.split('@')[0]} namora com @${namoro1[D1].usu2}\n‚Äì\n‚Ä¢ O pedido de namoro ocorreu √†s ${namoro1[D1].hora} do dia ${namoro1[D1].data}.\n‚Äì\n‚Ä¢ Para realizar o t√©rmino do namoro √© f√°cil, use o comando: *${prefix}terminar_namoro*`
mention(txt)
break

case 'nazista':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text: `Pesquisando a sua ficha de nazista: *@${sender_ou_n.split("@")[0]}* aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
sandro.sendMessage(from, {image: {url: imgnazista}, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser uma pessoa nazista?\n‚Ä¢ Porcentagem de chance de ser uma pessoa nazista: *${random}%.* `, mentions: [sender_ou_n]}, {quoted: selo})
}, 7000)
break 


case 'gay':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text: `Pesquisando a sua ficha de gay: @${sender_ou_n.split("@")[0]} aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
 setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
feio = random
boiola = random
if(boiola < 20 ) {var bo = 'hmm... voc√™ √© hetero...'} else if(boiola == 21 ) {var bo = '+/- boiola'} else if(boiola == 23 ) {var bo = '+/- boiola'} else if(boiola == 24 ) {var bo = '+/- boiola'} else if(boiola == 25 ) {var bo = '+/- boiola'} else if(boiola == 26 ) {var bo = '+/- boiola'} else if(boiola == 27 ) {var bo = '+/- boiola'} else if(boiola == 2 ) {var bo = '+/- boiola'} else if(boiola == 29 ) {var bo = '+/- boiola'} else if(boiola == 30 ) {var bo = '+/- boiola'} else if(boiola == 31 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 32 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 33 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 34 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 35 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 36 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 37 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 3 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 39 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 40 ) {var bo = 'tenho minha desconfian√ßa...'} else if(boiola == 41 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 42 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 43 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 44 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 45 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 46 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 47 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 4 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 49 ) {var bo = 'voc√™ √© n√©?'} else if(boiola == 50 ) {var bo = 'voc√™ √© ou n√£o?'} else if(boiola > 51) {var bo = 'voc√™ √© gay...'
}
sandro.sendMessage(from, {image: {url: imggay}, caption: `Qual √© a porcentagem de chance do(a) *@${sender_ou_n.split("@")[0]}* ser gay?\n‚Ä¢ *${random}% homossexual*, ${bo}`, mentions: [sender_ou_n], thumbnail:null}, {quoted: selo})
}, 7000)
break

case 'feio':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text: `Pesquisando a sua ficha de feio: *@${sender_ou_n.split("@")[0]}* aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
 setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
feio = random
if(feio < 20 ) {var bo = '√â n√£o √© feio'} else if(feio == 21 ) {var bo = '+/- feio'} else if(feio == 23 ) {var bo = '+/- feio'} else if(feio == 24 ) {var bo = '+/- feio'} else if(feio == 25 ) {var bo = '+/- feio'} else if(feio == 26 ) {var bo = '+/- feio'} else if(feio == 27 ) {var bo = '+/- feio'} else if(feio == 2 ) {var bo = '+/- feio'} else if(feio == 29 ) {var bo = '+/- feio'} else if(feio == 30 ) {var bo = '+/- feio'} else if(feio == 31 ) {var bo = 'ainda t√° na m√©dia'} else if(feio == 32 ) {var bo = 'd√° pra pegar umas(ns) novinha(o) ainda'} else if(feio == 33 ) {var bo = 'Da pra pegar umas(ns) novinha(o) ainda'} else if(feio == 34 ) {var bo = '√© fein, mas tem baum cora√ß√£o'} else if(feio == 35 ) {var bo = 't√° na m√©dia, mas n√£o deixa de ser feii'} else if(feio == 36 ) {var bo = 'bonitin mas √© feio com orgulho'} else if(feio == 37 ) {var bo = 'feio e pregui√ßoso(a), vai se arrumar praga feia'} else if(feio == 3 ) {var bo = 'tenho '} else if(feio == 39 ) {var bo = 'feio, mas um banho e se arrumar, deve resolver'} else if(feio == 40 ) {var bo = 'fein,  mas n√£o existe gente feia, existe gente que n√£o conhece os produtos jequity'} else if(feio == 41 ) {var bo = 'voc√™ √© Feio, mas √© legal, continue assim'} else if(feio == 42 ) {var bo = 'Nada que uma maquiagem e se arrumar, que n√£o resolva.'} else if(feio == 43 ) {var bo = 'Feio que d√≥i de ver, compra uma m√°scara que melhora'} else if(feio == 44 ) {var bo = 'Feio mas nada que um saco na cabe√ßa n√£o resolva n√©!?'} else if(feio == 45 ) {var bo = 'voc√™ √© feio, mas tem bom gosto'} else if(feio == 46 ) {var bo = 'feio mas tem muitos amigos'} else if(feio == 47 ) {var bo = '√© feio mas tem l√°bia pra pegar v√°rias novinha'} else if(feio == 4 ) {var bo = 'feio e ainda n√£o sabe se vestir, vixi'} else if(feio == 49 ) {var bo = 'feiooo dms vey.'} else if(feio == 50 ) {var bo = 'voc√™ √© feio, mas n√£o se encherga.'} else if(feio > 51) {var bo = 'voc√™ √© feio demais bixo.'}
sandro.sendMessage(from, {image: {url: imgfeio}, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser uma pessoa feia?\n‚Ä¢ A porcentagem de chance √© *${random}%*, ${bo}`, mentions: [sender_ou_n], thumbnail:null}, {quoted: selo})
}, 7000)
break 

case 'corno':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text:`Pesquisando a ficha de corno @${sender_ou_n.split("@")[0]}, aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
sandro.sendMessage(from, {image: {url: imgcorno}, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser uma pessoa chifruda?\n‚Ä¢ A porcentagem de chance √© *${random}%*`, mentions: [sender_ou_n]}, {quoted: selo})
}, 7000)
break  

case 'vesgo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text:`Pesquisando a ficha de vesgo @${sender_ou_n.split("@")[0]}, aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
 setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
sandro.sendMessage(from, {image: {url: imgvesgo}, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser uma pessoa vesga?\n‚Ä¢ A porcentagem de chance √© *${random}%*`, mentions: [sender_ou_n]}, {quoted: selo})
}, 7000)
break 

case 'bebado':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text:`Pesquisando a ficha de bebado(a) @${sender_ou_n.split("@")[0]}, aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
 setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
sandro.sendMessage(from, {image: {url: imgbebado}, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser uma pessoa b√™bada?\n‚Ä¢ A porcentagem de chance √© *${random}%*`, mentions: [sender_ou_n]}, {quoted: selo})
}, 7000)
break 

case 'gado':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text:`Pesquisando a ficha de gado @${sender_ou_n.split("@")[0]}, aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
 setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
sandro.sendMessage(from, {image: {url: imggado}, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser um gado?\n‚Ä¢ A porcentagem de chance √© *${random}%*`, mentions: [sender_ou_n]}, {quoted: selo})
}, 7000)
break 

case 'gostoso':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text:`Pesquisando a sua ficha de gostoso @${sender_ou_n.split("@")[0]} aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
 setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
sandro.sendMessage(from, {image: {url: imggostoso}, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser uma pessoa gostosa?\n‚Ä¢ A porcentagem de chance √© *${random}%*`, gifPlayback: true, mentions: [sender_ou_n]}, {quoted: selo})
}, 7000)
break 


case 'gostosa':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
sandro.sendMessage(from, {text:`Pesquisando a sua ficha de gostosa @${sender_ou_n.split("@")[0]} aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
 setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
sandro.sendMessage(from, {image: {url: imggostosa}, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser uma pessoa gostosa?\n‚Ä¢ A porcentagem de chance √© *${random}%*`, gifPlayback: true, mentions: [sender_ou_n]}, {quoted: selo})
}, 7000)
break 

case 'morte': case 'death':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
if (args.length == 0) return await reply(`Est√° faltando o nome da pessoa! Por exemplo: ${prefix+command} Victor`)
const predea = await axios.get(`https://api.agify.io/?name=${encodeURIComponent(args[0])}`);
if (predea.data.age == null) return await reply(`Voc√™ inseriu um nome invalido, certifique-se de inserir um sem acentos, emojis, n√∫meros e outros.`);
death = `@${sender.split('@')[0]} ‚Äî Pessoas com este nome citado ‚Äú${predea.data.name}‚Äù tendem a morrer aos ${predea.data.age} anos de idade.`;
sandro.sendMessage(from, {video: {url: deathcmd}, gifPlayback: true, caption: death, mentions: [sender]}, {quoted: selo})
break;				
				
case 'matar': case 'mata':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer matar, a mensagem ou o @')
sandro.sendMessage(from, {video: {url: matarcmd}, gifPlayback: true, caption: `Voc√™ Acabou de matar o(a) @${menc_os2.split('@')[0]} üòàüëπ`, mentions: [menc_os2]}, {quoted: selo})
break 

case 'beijo': case 'beijar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!menc_os2 || menc_jid2[1]) return reply('marque a pessoa que voc√™ quer beijar, a mensagem ou o @')
sandro.sendMessage(from, {video: {url: beijocmd}, gifPlayback: true, caption: `Voc√™ deu um beijo gostoso na(o) @${menc_os2.split('@')[0]} üòÅüëâüëà‚ù§` , mentions: [menc_os2]}, {quoted: selo})
break

case 'vab':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
psycatgames().then(async (array) => {
const { nsfw, questions } = array[Math.floor(Math.random() * array.length)]
const { pergunta1, pergunta2 } = questions[Math.floor(Math.random() * questions.length)]
sendPoll(sandro, from, "Voc√™ prefere..", [pergunta1, pergunta2])
}).catch(console.error);
break

case 'eununca':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
setTimeout(() => {reagir(from, "üôà")}, 100)
const pergunta_ = JSON.parse(fs.readFileSync('./arquivos/json/eununca.json'));
const getRandomINever = pergunta_[Math.floor(Math.random() * pergunta_.length)]
sendPoll(sandro, from, getRandomINever, ["Eu nunca", "Eu j√°"]).catch(console.error);
break

case 'conselhobiblico':
case 'conselhosbiblico':  
case 'conselhosb':   
case 'conselhob':  
reagir(from, "‚õ™Ô∏è")
var conselhosb = conselhob[Math.floor(Math.random() * conselhob.length)]
sandro.sendMessage(from, {text: mess.conselhoBiblico(tempo, pushname, conselhosb, NomeDoBot, groupName)}, {quoted: selo, contextInfo: {"mentionedJid": mess.conselhoBiblico(tempo, pushname, conselhosb, NomeDoBot, groupName)}})
break

case 'cantadas': case 'cantada':  
reagir(from, "üòºÔ∏è")
cantadasbb = randomCantadas[Math.floor(Math.random() * randomCantadas.length)]   
let cantadasText = `*${cantadasbb}*`
sandro.sendMessage(from, {text: cantadasText}, {quoted: selo})
break

case 'fatos': case 'curiosidades':  
fatoskk = fatos[Math.floor(Math.random() * fatos.length)]   
let fatosText = `*${fatoskk}*`
sandro.sendMessage(from, {text: fatosText}, {quoted: selo})
break

case 'teste':
await sandro.sendMessage(from, {
image: { url: fotobot,},
caption: `SANDRO MD V11`,});
break;

case 'tapa':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!menc_os2 || menc_jid2[1]) return reply('Marque o alvo que voc√™ quer da um tapa, a mensagem ou o @')
sandro.sendMessage(from, {video: {url: tapacmd}, gifPlayback: true, caption: `Voc√™ acabou de da um tapa na raba da *@${menc_os2.split('@')[0]}*. üòº`, mentions: [menc_os2]}, {quoted: selo})
break

case 'chute':
case 'chutar':  
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer da um chute, a mensagem ou o @')
sandro.sendMessage(from, {video: {url: chutecmd}, gifPlayback: true, caption: `Voc√™ acabou de dar um chute em *@${menc_os2.split('@')[0]}*.`, mentions: [menc_os2]}, {quoted: selo})
break 

case 'dogolpe':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!menc_os2 || menc_jid2[1]) return reply('Marque a mensagem com o comando ou marque o @ do usu√°rio..')
randomF = ["em iludir pessoas", "em ferir os sentimentos", "em dar chifre"]
sandro.sendMessage(from, {text: `üåü‚ò†Ô∏è *@${menc_os2.split("@")[0]}* √© especialista *${randomF[Math.floor(Math.random() * randomF.length)]}*.`, mentions: [menc_os2]}, {quoted: selo})
break

case 'shipo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!menc_os2) return reply('Marque uma pessoa do grupo para encontrar o par dela.')
mention(`üåü Eu shipo *@${groupMembers[Math.floor(Math.random() * groupMembers.length)].id.split('@')[0]} & @${menc_os2.split("@")[0]}* com uma porcentagem de *${Math.floor(Math.random() * 100)+"%"}*.`)
break

case 'casal':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
mention(`üåüüë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª - Sinto uma qu√≠mica muito forte entre *@${groupMembers[Math.floor(Math.random() * groupMembers.length)].id.split('@')[0]} & @${groupMembers[Math.floor(Math.random() * groupMembers.length)].id.split('@')[0]}*, com uma chance de dar certo: *${Math.floor(Math.random() * 100)+"%"}*.`)
break

case 'rankcornos':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
membr = []
const corno1 = groupMembers
const corno2 = groupMembers
const corno3 = groupMembers
const corno4 = groupMembers
const corno5 = groupMembers
const cornos1 = corno1[Math.floor(Math.random() * corno1.length)]
const cornos2 = corno2[Math.floor(Math.random() * corno2.length)]
const cornos3 = corno3[Math.floor(Math.random() * corno3.length)]
const cornos4 = corno4[Math.floor(Math.random() * corno4.length)]
const cornos5 = corno5[Math.floor(Math.random() * corno5.length)]
var porcentagemcorno = ["1%", `2%`, `3%`, `4%`, `5%`, `6%`, `7`, `%`, `9%`, `10`, `11%`, `12%`,`13%`, `14%`, `15%`, `16%`, `17%`, `1%`, `19%`, `20%`, `21%`, `22%`, `23%`, `24%`, `25%`, `26%`, `27%`, `2%`, `27%`, `2%`, `29%`, `30%`, `31%`, `32%`, `33%`, `34%`, `35%`, `36%`, `37%`, `3%`, `39%`, `40%`, `41%`, `42%`, `43%`, `44%`, `45%`, `46%`, `47%`, `4%`, `49%`, `50%`, `51%`, `52%`, `53%`, `54%`, `55%`, `56%`, `57%`, `5%`, `59%`, `60%`, `61%`, `62%`, `63%`, `64%`, `65%`, `66%`, `67%`, `6%`, `69%`, `70%`, `71%`, `72%`, `73%`, `74%`, `75%`, `76%`, `77%`, `7%`, `79%`, `0%`, `1%`, `2%`, `5%`, `4%`, `5%`, `6%`, `7%`, `%`, `9%`, `90%`, `91%`, `92%`, `93%`, `94%`, `95%`, `96%`, `97%`, `9%`, `99%`, `O chifre desse ai bate na lua ksksksk`]
const porcentagemc = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcentag = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcent = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcl = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porg = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const prg = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
ytb = `
‚ùØ  ‚ùí„Äé ${NomeDoBot} „Äè‚ùí  ‚ùÆ


‚ïë‚ùØ   „Äò TOP MAIS CORNOS „Äô

‚î†‚ùØ ‚ùí GRUPO: ${groupName}
‚î†
‚î†‚ùØ ‚ùí CORNO: @${cornos1.id.split('@')[0]}  ‚ùØ ${porcent} ‚ùÆ
‚î†‚ùØ ‚ùí CORNO: @${cornos2.id.split('@')[0]}  ‚ùØ ${porcentag} ‚ùÆ
‚î†‚ùØ ‚ùí CORNO: @${cornos3.id.split('@')[0]}  ‚ùØ ${porcl} ‚ùÆ
‚î†‚ùØ ‚ùí CORNO: @${cornos4.id.split('@')[0]}  ‚ùØ ${porg} ‚ùÆ
‚î†‚ùØ ‚ùí CORNO: @${cornos5.id.split('@')[0]}  ‚ùØ ${prg} ‚ùÆ

‚ùØ         „Äò MOTIVACIONAL „Äô

${enviarmen}`
membr.push(cornos1.id)
membr.push(cornos2.id)
membr.push(cornos3.id)
membr.push(cornos4.id)
membr.push(cornos5.id)
mentions(ytb, membr, true)
break

case 'rank':
case 'ranklevel':
case 'rankpatente':
if(!isGroup) return reply(enviar.msg.adm)
if(!isLevelingOn) return reply(`Para usar o comando, primeiro o(s) admin(s) do grupo deve ativar o sistema de level.\n‚Ä¢ Solicite a 1 do(s) administrador(es) para ativar o comando. Usar: ${prefix}leveling`)
if(level2.length > 4) {
cortGG = level2.map(i => i)
rank = cortGG.sort((a, b) => (a.contador < b.contador) ? 0 : -1)
if(level2.length > 10) {var totalR = 10} else {var totalR = level2.length}
tc = `üéñÔ∏è Rank Level - [Type: *Global*]\n‚Äì`
for ( i = 0; i < totalR; i++) {
  if(i != null) {
var newlevel = rank[i].contador
if(newlevel < 100){var newpatente = "Bronze I ü•â"}; if(newlevel >= 100 && newlevel < 200){var newpatente = "Bronze II ü•â"}; if(newlevel >= 200 && newlevel < 300){var newpatente = "Bronze III ü•â"}; if(newlevel >= 300 && newlevel < 400){var newpatente = "Prata I ü•à"}; if(newlevel >= 400 && newlevel < 500){var newpatente = "Prata II ü•à"}; if(newlevel >= 500 && newlevel < 600){var newpatente = "Prata III ü•à"}; if(newlevel >= 600 && newlevel < 700){var newpatente = "Ouro I ü•á"}; if(newlevel >= 700 && newlevel < 800){var newpatente = "Ouro II ü•á"}; if(newlevel >= 800 && newlevel < 900){var newpatente = "Ouro III ü•á"}; if(newlevel >= 900 && newlevel < 1200){var newpatente = "Ouro IV ü•á"}; if(newlevel >= 1200 && newlevel < 1500){var newpatente = "Platina I üåÄ"}; if(newlevel >= 1500 && newlevel < 1800){var newpatente = "Platina II üåÄ"}; if(newlevel >= 1800 && newlevel < 2100){var newpatente = "Platina III üåÄ"}; if(newlevel >= 2100 && newlevel < 2700){var newpatente = "Platina IV üåÄ"}; if(newlevel >= 2700 && newlevel < 3300){var newpatente = "Diamante I üíé"}; if(newlevel >= 3300 && newlevel < 3900){var newpatente = "Diamante II üíé"}; if(newlevel >= 3900 && newlevel < 4500){var newpatente = "Diamante III üíé"}; if(newlevel >= 4500 && newlevel < 5000){var newpatente = "Diamante IV üíé"}; if(newlevel >= 5000 && newlevel < 5500){var newpatente = "Paladino I üîÆ"}; if(newlevel >= 5500 && newlevel < 6500){var newpatente = "Paladino II üîÆ"}; if(newlevel >= 6500 && newlevel < 7500){var newpatente = "Paladino III üîÆ"}; if(newlevel >= 7500 && newlevel < 9000){var newpatente = "Paladino IV üîÆ"}; if(newlevel >= 9000 && newlevel < 10500){var newpatente = "Mestre I ‚ù§Ô∏è‚Äçüî•"}; if(newlevel >= 10500 && newlevel < 12000){var newpatente = "Mestre II ‚ù§Ô∏è‚Äçüî•"}; if(newlevel >= 12000 && newlevel < 13500){var newpatente = "Mestre III ‚ù§Ô∏è‚Äçüî•"}; if(newlevel >= 13500 && newlevel < 15000){var newpatente = "Mestre IV ‚ù§Ô∏è‚Äçüî•"}; if(newlevel >= 15000 && newlevel < 20000){var newpatente = "Mestre V ‚ù§Ô∏è‚Äçüî•"}; if(newlevel >= 20000 && newlevel < 25000){var newpatente = "Desafiante I üëë"}; if(newlevel >= 25000 && newlevel < 30000){var newpatente = "Desafiante II üëë"}; if(newlevel >= 30000 && newlevel < 35000){var newpatente = "Desafiante III üëë"}; if(newlevel >= 35000 && newlevel < 40000){var newpatente = "Desafiante IV üëë"}; if(newlevel >= 40000 && newlevel < 50000){var newpatente = "Desafiante V üëë"}; if(newlevel >= 50000 && newlevel < 60000){var newpatente = "Usu√°rio Superior I üéì"}; if(newlevel >= 60000 && newlevel < 70000){var newpatente = "Usu√°rio Superior II üéì"}; if(newlevel >= 70000 && newlevel < 80000){var newpatente = "Mestre Supremo I ü™Ñ"}; if(newlevel >= 80000 && newlevel < 90000){var newpatente = "Mestre Supremo II ü™Ñ"}; if(newlevel >= 90000 && newlevel < 100000){var newpatente = "Mestre Supremo III ü™Ñ"}; if(newlevel >= 100000 && newlevel < 150000){var newpatente = "Conquistador I ‚öíÔ∏è"}; if(newlevel >= 150000 && newlevel < 200000){var newpatente = "Conquistador II ‚öíÔ∏è"}; if(newlevel >= 200000 && newlevel < 300000){var newpatente = "Conquistador III ‚öíÔ∏è"}; if(newlevel >= 300000 && newlevel < 400000){var newpatente = "Desbravador I üõ∞Ô∏è"}; if(newlevel >= 400000 && newlevel < 500000){var newpatente = "Desbravador II üõ∞Ô∏è"}; if(newlevel >= 500000 && newlevel < 1000000){var newpatente = "Desbravador III üõ∞Ô∏è"}; if(newlevel >= 1000000 && newlevel < 1500000){var newpatente = "Grande Mestre I ü™©"}; if(newlevel >= 1500000 && newlevel < 2000000){var newpatente = "Grande Mestre II ü™©"}; if(newlevel >= 2000000 && newlevel < 5000000){var newpatente = "Grande Mestre III ü™©"}; if(newlevel >= 5000000 && newlevel < 10000000){var newpatente = "Supremacy X ‚öúÔ∏è"}; if(newlevel >= 10000000){var newpatente = "Veterano üé©üèº‚Äç‚ôÇÔ∏è"}
tc += `\n*${i+1}¬∞.* ‚Ä¢ Usu√°rio(a): *${rank[i].nick}*\n‚Ä¢ Usu√°rio ID: *wa.me/${rank[i].id.split('@')[0]}*\n‚Ä¢ Quantidade Total de XP: *${rank[i].contador}*\n‚Ä¢ Atualmente a pessoa est√° no patente *${newpatente}*, no level: *${rank[i].level}*\n‚Äî‚Äî‚Äî‚Äî`
}
}
reply(tc)
} else { 
reply(`Nenhum dado(s) foi retornado, tente novamente mais tardeÔ∏è!`)
}
break

case 'patente':
case 'level':
if(!isGroup) return reply(enviar.msg.adm)
if(!isLevelingOn) return reply(`Para usar o comando, primeiro o(s) admin(s) do grupo deve ativar o sistema de level.\n‚Ä¢ Solicite a 1 do(s) administrador(es) para ativar o comando. Usar: ${prefix}leveling`)
if(JSON.stringify(level2).includes(sender)) {
levelstts = level2.map(i => i.id).indexOf(sender)
var newlevel = level2[levelstts].contador
if(newlevel < 100) newpatente = "Bronze I"
if(newlevel >= 100 && newlevel < 200) newpatente = "Bronze II"
if(newlevel >= 200 && newlevel < 300) newpatente = "Bronze III"
if(newlevel >= 300 && newlevel < 400) newpatente = "Prata I"
if(newlevel >= 400 && newlevel < 500) newpatente = "Prata II"
if(newlevel >= 500 && newlevel < 600) newpatente = "Prata III"
if(newlevel >= 600 && newlevel < 700) newpatente = "Ouro I"
if(newlevel >= 700 && newlevel < 800) newpatente = "Ouro II"
if(newlevel >= 800 && newlevel < 900) newpatente = "Ouro III"
if(newlevel >= 900 && newlevel < 1200) newpatente = "Ouro IV"
if(newlevel >= 1200 && newlevel < 1500) newpatente = "Platina I"
if(newlevel >= 1500 && newlevel < 1800) newpatente = "Platina II"
if(newlevel >= 1800 && newlevel < 2100) newpatente = "Platina III"
if(newlevel >= 2100 && newlevel < 2700) newpatente = "Platina IV"
if(newlevel >= 2700 && newlevel < 3300) newpatente = "Diamante I"
if(newlevel >= 3300 && newlevel < 3900) newpatente = "Diamante II"
if(newlevel >= 3900 && newlevel < 4500) newpatente = "Diamante III"
if(newlevel >= 4500 && newlevel < 5000) newpatente = "Diamante IV"
if(newlevel >= 5000 && newlevel < 5500) newpatente = "Paladino I"
if(newlevel >= 5500 && newlevel < 6500) newpatente = "Paladino II"
if(newlevel >= 6500 && newlevel < 7500) newpatente = "Paladino III"
if(newlevel >= 7500 && newlevel < 9000) newpatente = "Paladino IV"
if(newlevel >= 9000 && newlevel < 10500) newpatente = "Mestre IÔ∏è‚Äç"
if(newlevel >= 10500 && newlevel < 12000) newpatente = "Mestre IIÔ∏è‚Äç"
if(newlevel >= 12000 && newlevel < 13500) newpatente = "Mestre III"
if(newlevel >= 13500 && newlevel < 15000) newpatente = "Mestre IVÔ∏è‚Äç"
if(newlevel >= 15000 && newlevel < 20000) newpatente = "Mestre VÔ∏è‚Äç"
if(newlevel >= 20000 && newlevel < 25000) newpatente = "Desafiante I"
if(newlevel >= 25000 && newlevel < 30000) newpatente = "Desafiante II"
if(newlevel >= 30000 && newlevel < 35000) newpatente = "Desafiante III"
if(newlevel >= 35000 && newlevel < 40000) newpatente = "Desafiante IV"
if(newlevel >= 40000 && newlevel < 50000) newpatente = "Desafiante V"
if(newlevel >= 50000 && newlevel < 60000) newpatente = "Usu√°rio Superior I"
if(newlevel >= 60000 && newlevel < 70000) newpatente = "Usu√°rio Superior II"
if(newlevel >= 70000 && newlevel < 80000) newpatente = "Mestre Supremo I"
if(newlevel >= 80000 && newlevel < 90000) newpatente = "Mestre Supremo II"
if(newlevel >= 90000 && newlevel < 100000) newpatente = "Mestre Supremo III"
if(newlevel >= 100000 && newlevel < 150000) newpatente = "Conquistador IÔ∏è"
if(newlevel >= 150000 && newlevel < 200000) newpatente = "Conquistador IIÔ∏è"
if(newlevel >= 200000 && newlevel < 300000) newpatente = "Conquistador IIIÔ∏è"
if(newlevel >= 300000 && newlevel < 400000) newpatente = "Desbravador I"
if(newlevel >= 400000 && newlevel < 500000) newpatente = "Desbravador IIÔ∏è"
if(newlevel >= 500000 && newlevel < 1000000) newpatente = "Desbravador IIIÔ∏è"
if(newlevel >= 1000000 && newlevel < 1500000) newpatente = "Grande Mestre I"
if(newlevel >= 1500000 && newlevel < 2000000) newpatente = "Grande Mestre II"
if(newlevel >= 2000000 && newlevel < 5000000) newpatente = "Grande Mestre III"
if(newlevel >= 5000000 && newlevel < 10000000) newpatente = "Supremacy X"
if(newlevel >= 10000000) newpatente = "Veterano"
// √â usado na barra apresentada na msg, que vai ser encaminhada pelo bot quando Usu√°rio executar o cmd 'level' ou 'patente'.
if(newpatente == "Bronze I") {newcont = 100; newtt = 0}
if(newpatente == "Bronze II") {newcont = 200; newtt = 100}
if(newpatente == "Bronze III") {newcont = 300; newtt = 200}
if(newpatente == "Prata I") {newcont = 400; newtt = 300}
if(newpatente == "Prata II") {newcont = 500; newtt = 400}
if(newpatente == "Prata III") {newcont = 600; newtt = 500}
if(newpatente == "Ouro I") {newcont = 700; newtt = 600}
if(newpatente == "Ouro II") {newcont = 800; newtt = 700}
if(newpatente == "Ouro III") {newcont = 900; newtt = 800}
if(newpatente == "Ouro IV") {newcont = 1200; newtt = 900}
if(newpatente == "Platina I") {newcont = 1500; newtt = 1200}
if(newpatente == "Platina II") {newcont = 1800; newtt = 1500}
if(newpatente == "Platina III") {newcont = 2100; newtt = 1800}
if(newpatente == "Platina IV") {newcont = 2700; newtt = 2100}
if(newpatente == "Diamante I") {newcont = 3300; newtt = 2700}
if(newpatente == "Diamante II") {newcont = 3900; newtt = 3300}
if(newpatente == "Diamante III") {newcont = 4500; newtt = 3900}
if(newpatente == "Diamante IV") {newcont = 5000; newtt = 4500}
if(newpatente == "Paladino I") {newcont = 5500; newtt = 5000}
if(newpatente == "Paladino II") {newcont = 6500; newtt = 5500}
if(newpatente == "Paladino III") {newcont = 7500; newtt = 6500}
if(newpatente == "Paladino IV") {newcont = 9000; newtt = 7500}
if(newpatente == "Mestre IÔ∏è‚Äç") {newcont = 10500; newtt = 9000}
if(newpatente == "Mestre II") {newcont = 12000; newtt = 10500}
if(newpatente == "Mestre IIIÔ∏è‚Äç") {newcont = 13500; newtt = 12000}
if(newpatente == "Mestre IVÔ∏è‚Äç") {newcont = 15000; newtt = 13500}
if(newpatente == "Mestre VÔ∏è‚Äç") {newcont = 20000; newtt = 15000}
if(newpatente == "Desafiante I") {newcont = 25000; newtt = 20000}
if(newpatente == "Desafiante II") {newcont = 30000; newtt = 25000}
if(newpatente == "Desafiante III") {newcont = 35000; newtt = 30000}
if(newpatente == "Desafiante IV") {newcont = 40000; newtt = 35000}
if(newpatente == "Desafiante V") {newcont = 50000; newtt = 40000}
if(newpatente == "Usu√°rio Superior I") {newcont = 60000; newtt = 50000}
if(newpatente == "Usu√°rio Superior II") {newcont = 70000; newtt = 60000}
if(newpatente == "Mestre Supremo I") {newcont = 80000; newtt = 70000}
if(newpatente == "Mestre Supremo II") {newcont = 90000; newtt = 80000}
if(newpatente == "Mestre Supremo III") {newcont = 100000; newtt = 90000}
if(newpatente == "Conquistador IÔ∏è") {newcont = 150000; newtt = 100000}
if(newpatente == "Conquistador II") {newcont = 200000; newtt = 150000}
if(newpatente == "Conquistador IIIÔ∏è") {newcont = 300000; newtt = 200000}
if(newpatente == "Desbravador IÔ∏è") {newcont = 400000; newtt = 300000}
if(newpatente == "Desbravador IIÔ∏è") {newcont = 500000; newtt = 400000}
if(newpatente == "Desbravador IIIÔ∏è") {newcont = 1000000; newtt = 500000}
if(newpatente == "Grande Mestre I") {newcont = 1500000; newtt = 1000000}
if(newpatente == "Grande Mestre II") {newcont = 2000000; newtt = 1500000}
if(newpatente == "Grande Mestre III") {newcont = 5000000; newtt = 2000000}
if(newpatente == "Supremacy XÔ∏è") {newcont = 10000000; newtt = 5000000}
// Barra de quanto falta para alcan√ßar o pr√≥ximo n√≠vel.
if(newlevel < 10000000) {
  sabPor = Number(Number(newlevel - newtt) / Number(newcont - newtt) * 100).toFixed(1)
  sabibis = newcont - newlevel
if(sabPor == 100) sabPor = `„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äô${sabPor}%`
if(sabPor < 100) returnP = `„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí„Äô${sabPor}%`
if(sabPor < 90) returnP = `„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äô${sabPor}%`
if(sabPor < 80) returnP = `„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äô${sabPor}%`
if(sabPor < 70) returnP = `„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí„Äô${sabPor}%`
if(sabPor < 60) returnP = `„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äô${sabPor}%`
if(sabPor < 50) returnP = `„Äò‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô${sabPor}%`
if(sabPor < 40) returnP = `„Äò‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô${sabPor}%`
if(sabPor < 30) returnP = `„Äò‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô${sabPor}%`
if(sabPor < 20) returnP = `„Äò‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô${sabPor}%`
if(sabPor < 10) returnP = `„Äò‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô${sabPor}%`
} else {
returnP = ``
}
leveltxt = `*LEVELING* - Aqui est√° a sua situa√ß√£o sobre o mesmo.\n‚Ä¢ Usu√°rio: *@${sender.split("@")[0]}*\n‚Ä¢ Voc√™ est√° atualmente no level *${level2[levelstts].level}* e no patente *${newpatente}*\n‚Ä¢ Sua quantidade atual de XP √©: *${level2[levelstts].contador}* ${newlevel < 10000000 ? `para alcan√ßar o pr√≥ximo falta *${newcont}*.` : ``}\n\tüîã ${newlevel < 10000000 ? `*${returnP}*` : ``}\n‚Äì\n${newlevel < 10000000 ? `‚Ä¢ Falta${Number(sabibis) > 1 ? `m` : ``} apenas *${sabibis} XP* para voc√™ upar para o pr√≥ximo level.` : `Voc√™ j√° alcan√ßou a patente m√°xima, ou seja, est√° muito a frente de todos.`}`
mention(`${leveltxt}`)
} else {
reply(`Nenhuma informa√ß√£o foi obtida sobre seu level/patente atual em sua solicita√ß√£o.\n‚Ä¢ *Tente novamente mais tarde!* Caso seja uma falha t√©cnica entre em contato com o(a) dono(a) do bot.`)
}
break

case 'addlevel':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!q) return reply("Digite a quantidade de level que deseja adicionar")
if(!Number(args[0])) return reply(args[0] + " n√£o √© n√∫mero...")
if(Number(args[0]) < 1) return reply("Tem que adicionar ao menos 1 level.")
if(q.includes(".")) return reply("N√£o pode n√∫mero decimal.")
AB = level2.map(i => i.id).indexOf(menc_prt ? menc_prt : sender)
level2[AB].level += Number(args[0])
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
reply(`${args[0]} leve${Number(args[0]) > 1 ? `is` : `l`} adicionado${Number(args[0]) > 1 ? `s` : ``} a este usu√°rio...`)
break

case 'tirarlevel':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!q) return reply("Digite a quantidade de level que deseja remover")
if(!Number(args[0])) return reply(args[0] + " n√£o √© n√∫mero...")
if(Number(args[0]) < 1) return reply("Tem que tirar ao menos 1 level")
if(q.includes(".")) return reply("N√£o pode n√∫mero decimal")
AB = level2.map(i => i.id).indexOf(menc_prt ? menc_prt : sender)
level2[AB].level -= Number(args[0])
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
reply(`${args[0]} leve${Number(args[0]) > 1 ? `is` : `l`} retirado${Number(args[0]) > 1 ? `s` : ``} deste usu√°rio...`)
break

case 'addxp':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!q) return reply("Digite a quantidade de XP que deseja adicionar")
if(!Number(args[0])) return reply(args[0] + " n√£o √© n√∫mero...")
if(Number(args[0]) < 1) return reply("Tem que add ao menos 1 de XP")
if(q.includes(".")) return reply("N√£o pode n√∫mero decimal")
AB = level2.map(i => i.id).indexOf(menc_prt ? menc_prt : sender)
level2[AB].contador += Number(args[0])
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
reply(`${args[0]} experi√™ncia${Number(args[0]) > 1 ? `s` : ``} fo${Number(args[0]) > 1 ? `ram` : `i`} adicionada${Number(args[0]) > 1 ? `s` : ``} a este usu√°rio...`)
break

case 'tirarxp':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!q) return reply("Digite a quantidade de XP que deseja retirar")
if(!Number(args[0])) return reply(args[0] + " n√£o √© n√∫mero...")
if(Number(args[0]) < 1) return reply("Tem que tirar ao menos 1 de XP")
if(q.includes(".")) return reply("N√£o pode n√∫mero decimal")
AB = level2.map(i => i.id).indexOf(menc_prt ? menc_prt : sender)
level2[AB].contador -= Number(args[0])
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
reply(`${args[0]} experi√™ncia${Number(args[0]) > 1 ? `s` : ``} fo${Number(args[0]) > 1 ? `ram` : `i`} retirada${Number(args[0]) > 1 ? `s` : ``} deste usu√°rio...`)
break

case 'blocklevel':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!menc_os2) return reply("Marque o @ ou a mensagem da pessoa que deseja bloquear do contador.")
if(!JSON.stringify(level2).includes(menc_os2)) return reply("O usu√°rio mencionado n√£o est√° presente no contador de mensagens.")
AB = level2.map(i => i.id).indexOf(menc_os2)
if(level2[AB].block == true) return reply("O usu√°rio mencionado j√° est√° bloqueado no contador.")
level2[AB].block = true
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
reply("Usu√°rio bloqueado do contador com sucesso... As intera√ß√µes do mesmo n√£o ser√£o mais contabilizadas!")
break

case 'unblocklevel':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!menc_os2) return reply("Marque o @ ou a mensagem da pessoa que deseja bloquear do contador.")
if(!JSON.stringify(level2).includes(menc_os2)) return reply("O usu√°rio mencionado n√£o est√° presente no contador de mensagens.")
AB = level2.map(i => i.id).indexOf(menc_os2)
if(level2[AB].block == false) return reply("O usu√°rio mencionado n√£o est√° bloqueado atualmente!")
level2[AB].block = false
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
reply("Usu√°rio desbloqueado do contador com sucesso! As intera√ß√µes do usu√°rio mencionado voltar√£o a ser contabilizadas.")
break

case 'blocklevel-list': case 'blocklevellist':
if(!SoDono) return reply(enviar.msg.donosmt)
txt = `[Total: *${level2.length}*] - Lista de usu√°rios bloqueados do contador de XP:\n`
let blocklevellist = 0
for(i = 0; i < level2.length; i++) {
  if(level2[i].block == true) {
txt += `*${i+1}.* @${level2[i].id.split('@')[0]}\n`
blocklevellist += 1
}
}
txt += `\n‚Äì\n‚Ä¢ Total de Bloqueados: *${blocklevellist}*`
if(blocklevellist > 0) {
mention(txt)
} else {
reply("N√£o existe nenhum *usu√°rio bloqueado* do contador XP.")
}
break

case 'rmlevel':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!q && !menc_os2) return reply("Marque a pessoa que deseja apagar do contador.")
var qp = menc_os2 ? menc_os2 : q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net`
if(!JSON.stringify(level2).includes(qp)) return reply("O usu√°rio mencionado n√£o est√° registrado no contador.")
AB = level2.map(i => i.id).indexOf(qp)
level2.splice(AB, 1)
fs.writeFileSync("./database/usuarios/leveling.json", JSON.stringify(level2))
reply("Usu√°rio apagado foi contador com sucesso como o(a) senhor(a) pediu...")
break

case 'rankativos': 
case 'rankativo':   
if(!isGroup) return reply(enviar.msg.grupo)
var i3 = countMessage.map(i => i.groupId).indexOf(from)
var blue = countMessage[i3].numbers.map(i => i)
blue.sort((a, b) => ((a.figus == undefined ? a.figus = 0 : a.figus + a.messages + a.cmd_messages) < (b.figus == undefined ? b.figus = 0 : b.figus + b.cmd_messages + b.messages)) ? 0 : -1)
menc = [] 
blad = `*üèÜ Rank dos mais ativos no grupo:* ${groupName}\n`
for ( i = 0; i < (blue.length < 5 ? blue.length : 5); i++) {
if (i != null) blad += `\n*üèÖ ${i + 1}¬∫ Lugar:* @${blue[i].id.split('@')[0]}\n‚Ä¢ Quantidade de mensagens encaminhadas: *${blue[i].messages}*\n‚Ä¢ Quantidade de comandos executados pelo usu√°rio(a): *${blue[i].cmd_messages}*\n‚Ä¢ Usu√°rio est√° conectado em um dispositivo: *${blue[i].aparelho}*\n‚Ä¢ Figurinhas encaminhadas pelo usu√°rio(a) no grupo: *${blue[i].figus}*\n`
menc.push(blue[i].id)
}
mentions(blad, menc, true)
break

case 'rankinativo':
case 'rankinativos':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
await ClearMembersInactive()
bule = []; bule2 = []; mentioned_jid = []
for(cag of countMessage[ind].numbers){
bule2.push(cag.id)
if(cag.messages <= 1){bule.push(cag)}}
bule.sort((a, b) => ((a.messages + a.cmd_messages) < (b.cmd_messages + b.messages)) ? 0 : -1)
boardi = `üóë *Rank dos mais inativos do grupo:* ${groupName}\n-\n`
if(bule.length == 0)boardi += '‚ùå Nenhum usu√°rio inativo foi encontrado neste grupo.Ô∏è'
for ( i = 0; i < (bule.length < 5 ? bule.length : 5); i++) {
if (i != null) boardi += `*üèÖ ${i + 1}¬∫ Lugar:* @${bule[i].id.split('@')[0]}\n‚Ä¢ Quantidade de mensagens enviadas pelo usu√°rio(a): *${bule[i].messages}*\n‚Ä¢ Quantidade de comandos executados pelo usu√°rio(a): *${bule[i].cmd_messages}*\n‚Ä¢ Figurinhas encaminhadas pelo usu√°rio(a) no grupo: *${bule[i].aparelho}*\n\n`
mentioned_jid.push(bule[i].id)
} 
mentions(boardi, mentioned_jid, true)
break

case 'checkativo':
case 'check':
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isGroup) return reply(enviar.msg.grupo)
if(groupIdscount.indexOf(from) < 0) return reply('O bot n√£o tem ainda dados sobre o grupo')
var ind = groupIdscount.indexOf(from)
if(!menc_os2 || menc_jid2[1]) return reply('Marque o @ de quem deseja puxar a atividade / S√≥ pode um por vez..')
if(numbersIds.indexOf(menc_os2) >= 0) {
var indnum = numbersIds.indexOf(menc_os2)
var RSM_CN = countMessage[ind].numbers[indnum]
mentions(`Consulta individual da atividade do usu√°rio @${menc_os2.split('@')[0]}\n‚Äì\n‚Ä¢ Quantidade de mensagens enviadas pelo usu√°rio(a): *${RSM_CN.messages}*\n‚Ä¢ Quantidade de comandos executados pelo usu√°rio(a): *${RSM_CN.cmd_messages}*\n‚Ä¢ Usu√°rio est√° conectado em um dispositivo: *${RSM_CN.aparelho}*\n‚Ä¢ Figurinhas encaminhadas pelo usu√°rio(a) no grupo: *${RSM_CN.figus}*\n‚Äì\n„Äò *${groupName}* „Äô`, [menc_os2], true)
} else {
mentions(`N√£o tenho nenhuma informa√ß√£o no grupo sobre o *@${menc_os2.split('@')[0]}*.`, [menc_os2], true)
}
break

case 'rankgay':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')

try{
d = []
ret = `‚ùØ  ‚ùí„Äé${NomeDoBot}„Äè‚ùí  ‚ùÆ\n\n‚ïë‚ùØ         „Äò TOP 5 MAIS GAYS „Äô\n\n`
for(i = 0; i < 5; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
ret += `‚î†‚ùØ ‚ùí üè≥Ô∏è‚Äçüåà @${groupMembers[r].id.split('@')[0]}\n`
d.push(groupMembers[r].id)
}
mentions(ret, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'rankgados': case 'rankgado':
if(!isModobn) return reply(mess.warningMB(prefix))
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')

try{
d = []
ret = `‚ùØ  ‚ùí„Äé${NomeDoBot}„Äè‚ùí  ‚ùÆ\n\n‚ïë‚ùØ         „Äò TOP 5 MAIS GADOS „Äô\n\n`
for(i = 0; i < 5; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
ret += `‚î†‚ùØ ‚ùí üêÆ @${groupMembers[r].id.split('@')[0]}\n`
d.push(groupMembers[r].id)
}
mentions(ret, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'suruba': case 'surubao': 
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply(msg.grupo)
if(!isModobn) return reply(`Este comando so pode ser utilizado com o comando ${prefix}modo-gamer 1 ativado, para desativar s√≥ basta utilizar ${prefix}modo-gamer 0`)
const quantidadeSafados = args.join(' ')
if(!quantidadeSafados) return reply(`Informe por favor a quantidade de pessoas voc√™ deseja em sua suruba... *Exemplo:* ${prefix+command} 4`)
emojiskk = ["ü•µ", "üòà", "ü´£", "üòè"]
emojis = emojiskk[Math.floor(Math.random() * emojiskk.length)]  
frasekk = [`t√° querendo rela√ß√µes sexuais a ${quantidadeSafados}, topa?`, `quer que *${quantidadeSafados}* pessoas venham de *chicote, algema e corda de alpinista*.`, `quer que ${quantidadeSafados} pessoas der tapa na cara, lhe chame de cachorra e fud3r bem gostosinho...`]
context = frasekk[Math.floor(Math.random() * frasekk.length)]  
ABC = `${prefix} @${sender.split('@')[0]} ${context}\n\n`
for (var i = 0; i < quantidadeSafados; i++) {
ABC += `@${somembros[Math.floor(Math.random() * somembros.length)].split("@")[0]}\n`
}
mencionarIMG(ABC, suruba);
break;

case 'rankgostosa':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
member = []
const p1 = groupMembers
const p2 = groupMembers
const p3 = groupMembers
const p4 = groupMembers
const p5 = groupMembers
const o1 = p1[Math.floor(Math.random() * p1.length)]
const o2 = p2[Math.floor(Math.random() * p2.length)]
const o3 = p3[Math.floor(Math.random() * p3.length)]
const o4 = p4[Math.floor(Math.random() * p4.length)]
const o5 = p5[Math.floor(Math.random() * p5.length)]
luy = `
Paradas!ü§öü§ö\n\n1=ü§öü§≠@${o1.id.split('@')[0]}ü§öü§≠\n\n\n2=ü§öü§≠@${o2.id.split('@')[0]}ü§öü§≠\n\n\n3=ü§öü§≠@${o3.id.split('@')[0]}ü§öü§≠\n\n\n4=ü§öü§≠@${o4.id.split('@')[0]}ü§öü§≠\n\n\n5=ü§öü§≠@${o5.id.split('@')[0]}??ü§≠\n\n\nMultas por serem gostosas dmsüò≥ pague pena enviando nud no PV do donoüòä by Bot`
member.push(o1.id)
member.push(o2.id)
member.push(o3.id)
member.push(o4.id)
member.push(o5.id)
mentions(luy, member, true)
break

case 'rankgostosos': case 'rankgostoso':
case 'rankgostoso':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
member = []
const p01 = groupMembers
const p02 = groupMembers
const p03 = groupMembers
const p04 = groupMembers
const p05 = groupMembers
const o01 = p01[Math.floor(Math.random() * p01.length)]
const o02 = p02[Math.floor(Math.random() * p02.length)]
const o03 = p03[Math.floor(Math.random() * p03.length)]
const o04 = p04[Math.floor(Math.random() * p04.length)]
const o05 = p05[Math.floor(Math.random() * p05.length)]
luy = `
‚ùØ „Äé${NomeDoBot}„Äè ‚ùÆ


‚ïë‚ùØ         „Äò TOP MAIS GOSTOSOS „Äô

‚î†‚ùØ ‚ùí GRUPO: ${groupName}
‚î†
‚î†‚ùØ ‚ùí GOSTOSO: @${o01.id.split('@')[0]}  
‚î†‚ùØ ‚ùí GOSTOSO: @${o02.id.split('@')[0]}  
‚î†‚ùØ ‚ùí GOSTOSO: @${o03.id.split('@')[0]}  
‚î†‚ùØ ‚ùí GOSTOSO: @${o04.id.split('@')[0]}  
‚î†‚ùØ ‚ùí GOSTOSO: @${o05.id.split('@')[0]}  `
member.push(o01.id)
member.push(o02.id)
member.push(o03.id)
member.push(o04.id)
member.push(o05.id)
mentions(luy, member, true)
break

case 'ranknazista': case 'ranknazistas':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
ABC = `*üíÇ‚Äç‚ôÇRANK DOS 5 MAIS NAZISTAS DO GRUPO Âçêü§°*\n‚Äî\n`
TMNZTS = ["Soldado nazista, marcha com estilo.‚Äç", "Comandante implac√°vel, lidera com rigor.Ô∏è", "Nazista estrategista, conquista territ√≥rios.Ô∏è", "Mestre da ordem, disciplina em primeiro lugar.", "Soldado de elite, Nazista hardcore.", "General invenc√≠vel, domina as batalhas.", "Nazista disciplinado, fiel √† causa.", "L√≠der autorit√°rio, imp√µe respeito.Ô∏è", "Soldado feroz, nazismo no cora√ß√£o.", "Mestre da propaganda, convence com palavras.Ô∏è", "Nazista moderno, tecnologia na guerra.", "M√°quina de guerra, implac√°vel e eficiente.Ô∏è","Comandante supremo, nazismo eterno.", "Soldado leal, marcha em nome da ideologia.", "Nazista cl√°ssico, revive o passado.", "General poderoso, Nazista do s√©culo XXI.", "Comandante inabal√°vel, Nazista de honra.", "Soldado devoto, nazismo no sangue.", "Mestre da ret√≥rica nazista, convence a todos.", "Nazista vision√°rio, futuro sob a su√°stica."];
for (var i = 0; i < 5; i++) {
ABC += `‚Ä¢ ${i+1}¬∞ *[${Math.floor(Math.random() * 100)}%]* - @${somembros[Math.floor(Math.random() * somembros.length)].split("@")[0]} -> ( ${TMNZTS[Math.floor(Math.random() * TMNZTS.length)]} )\n`
}
mencionarIMG(ABC, rnknazista);
break;

case 'rankotaku': case 'rankotakus':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
ABC = `*„äô RANK DOS 5 MAIS OTAKU DO GRUPO ( À∂‚Ä¢ÃÄ _‚Ä¢ÃÅ À∂)*\n‚Äî\n`
for (var i = 0; i < 5; i++) {
ABC += `‚Ä¢ ${i+1}¬∞ *[${Math.floor(Math.random() * 100)}%]* - @${somembros[Math.floor(Math.random() * somembros.length)].split("@")[0]}\n`
}
mencionarIMG(ABC, rnkotaku);
break;

case 'rankpau':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
ABC = `*RANK DOS 5 PAU MAIOR DO GRUPO üìè*\n‚Äî\n`
TMPAU = ["Pequeno pra cact, se mata maluco", `Pequenininho chega ser at√© fofo`, `Menor que meu dedo mindinho pequeno demais`, `At√© que d√° sentir, t√° na m√©dia`, `At√© que √© grandinho`, `Grande at√©!`, `Gigantesco igual meu bra√ßo`, `Enorme quase chega no √∫tero`, `Grand√£o demais em, e uii`, `Vara de pegar manga, grande demais, como sai na rua assim??`, "Que grand√£o em, nasceu metade animal"]
for (var i = 0; i < 5; i++) {
ABC += `‚Ä¢ *${i+1}¬∞* @${somembros[Math.floor(Math.random() * somembros.length)].split("@")[0]} -> ( ${TMPAU[Math.floor(Math.random() * TMPAU.length)]} )\n`
}
mencionarIMG(ABC, rnkpau);
break;

case 'mencionar':
if (!q) return reply(`Voc√™ usou o comando de forma incorreta, use a correta: ${prefix}mencionar corno`)
if (!isGroup) return reply(`Esta brincadeira s√≥ funciona em grupos.`)
if(!isModobn) return reply(mess.warningMB(prefix))
d = []
teks = `Estou mencionando o *${q}* do grupo: `
for(i = 0; i < 1; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
teks += `@${groupMembers[r].id.split('@')[0]}`
d.push(groupMembers[r].id)
}
await mentions(teks, d, true)
break;

case 'jogodavelha':
if(!isGroup) return reply(enviar.msg.grupo)
if(!menc_jid2) return reply("Marque junto com o comando, o @ do usu√°rio que deseja desafiar..")
joguinhodavelhajs.push(sender)
fs.writeFileSync('./database/usuarios/joguinhodavelha.json', JSON.stringify(joguinhodavelhajs))
joguinhodavelhajs2.push(from)
fs.writeFileSync('./database/usuarios/joguinhodavelha2.json', JSON.stringify(joguinhodavelhajs2))
if(fs.existsSync(`./arquivos/tictactoe/db/${from}.json`)) {
const boardnow = setGame(`${from}`);
const matrix = boardnow._matrix;
const chatMove = `„Äé *üéÆ ·èÄÃ∏·é™Ã∏·é∑Ã∏·é¨Ã∏ ·é†Ã∏·é™Ã∏ ·èôÃ∏·é¨Ã∏·èûÃ∏·éªÃ∏·é™Ã∏ üïπÔ∏è* „Äè\n‚Äî\nüí¢ Algu√©m est√° jogando o *jogo da velha* no momento! Por favor, aguarde o t√©rmino da partida para iniciar a pr√≥xima.\n-\n‚Ä¢ @${boardnow.X} VS @${boardnow.O}\n‚Äî\n‚Ä¢ Sua vez: @${boardnow.turn == "X" ? boardnow.X : boardnow.O}\n-\n${matrix[0][0]}  ${matrix[0][1]}  ${matrix[0][2]}\n${matrix[1][0]}  ${matrix[1][1]}  ${matrix[1][2]}\n${matrix[2][0]}  ${matrix[2][1]}  ${matrix[2][2]}`;
sandro.sendMessage(from, {text: chatMove}, {quoted: selo,
mentions: [
boardnow.X + "@s.whatsapp.net",
boardnow.O + "@s.whatsapp.net",
]});
return;
}
if(argss.length === 1)
return reply(`Jogue com algu√©m, para inicar a partida : ${prefix + command} @membro.`);
const boardnow = setGame(`${from}`);
console.log(colors.red(time, "red"), colors.magenta("[ JOGO DA VELHA ]"), colors.white(`Iniciado - Sess√£o: ${boardnow.session}`));
boardnow.status = false;
boardnow.X = sender.replace("@s.whatsapp.net", "");
boardnow.O = argss[1].replace("@", "");
var blabord = [`${boardnow.X}`, `${boardnow.O}`]
fs.writeFileSync(`./arquivos/tictactoe/db/${from}.json`,
JSON.stringify(boardnow, null, 2)
);
const strChat = `„Äé *üìå ·é¨’è·è¢·é¨·é°·é™Œù·é†œ¥ œ¥ œ¥·è¢œ¥Œù·é¨ŒùÕ≤·é¨ ‚öîÔ∏è* „Äè\n‚Äî\n@${sender.replace("@s.whatsapp.net", "")} _est√° te desafiando para uma partida de jogo da velha..._\n_[ ${argss[1]} ] Use *„ÄéS„Äè* para aceitar ou *„ÄéN„Äè* para n√£o aceitar..._\n‚Äî\nEm caso de problemas, marque algum administrador para resetar o jogo com o comando ${prefix}rv`;
b = [sender, menc_jid]
mentions(strChat, b, true)
break

case 'resetarvelha':
case 'resetavelha':  
case 'resetarv':
case 'resetav': 
case 'resetvelha':
case 'rv': 
if(!isJoguin && !isGroupAdmins) return reply(`Fale com quem iniciou o jogo, s√≥ ele pode resetar, ou ent√£o algum admin.`)
if(fs.existsSync("./arquivos/tictactoe/db/" + from + ".json")) {
DLT_FL("./arquivos/tictactoe/db/" + from + ".json");
reply(`Jogo da velha resetado com sucesso nesse grupo!`);
joguinhodavelhajs.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha.json', JSON.stringify(joguinhodavelhajs))
joguinhodavelhajs2.splice([])
fs.writeFileSync('./database/usuarios/joguinhodavelha2.json', JSON.stringify(joguinhodavelhajs2))
} else {
reply(`N√£o a nenhuma sess√£o em andamento...`);
}
break

case "ppt":
if(args.length < 1) return reply(`Voc√™ deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`)
ppt = ["pedra", "papel", "tesoura"]
ppy = ppt[Math.floor(Math.random() * ppt.length)]
ppg = Math.floor(Math.random() * 1) + 10
pptb = ppy
if((pptb == "pedra" && args == "papel") ||
(pptb == "papel" && args == "tesoura") ||
(pptb == "tesoura" && args == "pedra")) {
var vit = "vitoria"
} else if((pptb == "pedra" && args == "tesoura") ||
(pptb == "papel" && args == "pedra") ||
(pptb == "tesoura" && args == "papel")) {
var vit = "derrota"
} else if((pptb == "pedra" && args == "pedra") ||
(pptb == "papel" && args == "papel") ||
(pptb == "tesoura" && args == "tesoura")) {
var vit = "empate"
} else if(vit = "undefined") {
return reply(`Voc√™ deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`)
}
if(vit == "vitoria") {
var tes = "Vit√≥ria do jogador"
}
if(vit == "derrota") {
var tes = "A vit√≥ria √© do BOT"
}
if(vit == "empate") {
var tes = "O jogo terminou em empate"
}
reply(`${NomeDoBot} jogou: ${pptb}\nO jogador jogou: ${args}\n-\n${tes}`)
break

case 'anagrama':
if (!isGroup) return reply(enviar.msg.grupo) 
if (!isGroupAdmins) return reply('Somente adms!')
if(!isModobn) return reply(mess.warningMB(prefix))
const anaaleatorio = Math.floor(Math.random() * palavrasANA.length)
if(args.length == 0) return reply('Use 1 para ativar o jogo do anagrama, ou seja, para desativar utilize o valor num√©rico 0')
if (args.join(' ') === '1') {
if(fs.existsSync(`./database/grupos/games/anagrama/${from}.json`)) {
an = JSON.parse(fs.readFileSync(`./database/grupos/games/anagrama/${from}.json`))
reply(`‚Ä¢ J√° existe um registro da ativa√ß√£o do anagrama aqui no grupo, resolva abaixo, caso desejar resetar ou desativar, use: *${prefix}anagrama 1/0*\n‚Äî\n‚≠êÔ∏è Qual √© a ordem correta da palavra? Resolva: *${an.embaralhada}*\n‚Ä¢ Dica: ${an.dica}`)
} else {
fs.writeFileSync(`./database/grupos/games/anagrama/${from}.json`, `${JSON.stringify(palavrasANA[anaaleatorio])}`)
sandro.sendMessage(from, {text: `üåüüò≤ Decifre a palavra embaralhada abaixo, qual ser√° a ordem correta das letras?\n‚Äî\n‚Ä¢ Palavra: *${shuffle(palavrasANA[anaaleatorio].palavraOriginal)}*\n‚Ä¢ Dica: ${palavrasANA[anaaleatorio].dica}`}, {quoted: selo})
}
} else if (args.join(' ') ==='0') {
if(!fs.existsSync(`./database/grupos/games/anagrama/${from}.json`)) return reply('N√£o tem como desativar o jogo do anagrama p√¥s ele n√£o foi ativado...')
fs.unlinkSync(`./database/grupos/games/anagrama/${from}.json`)
reply("Desativado com sucesso.")
}
break

case 'quizanimais':
if (!isGroup) return reply(enviar.msg.grupo) 
if (!isGroupAdmins) return reply('Somente adms!')
if(!isModobn) return reply(mess.warningMB(prefix))
const animaisquiz = Math.floor(Math.random() * quizanimais.length)
if(args.length == 0) return reply('Use 1 para ativar o quiz animais, ou seja, para desativar utilize o valor num√©rico 0')
if (args.join(' ') === '1') {
if(fs.existsSync(`./database/grupos/games/quiz-animais/${from}.json`)) {
superrttrr = JSON.parse(fs.readFileSync(`./database/grupos/games/quiz-animais/${from}.json`))
imagemtexto = `‚Ä¢ Existe um jogo existente, aqui no grupo! Resolva a pergunta abaixo:\n‚Äî\nü§î Pergunta: ${superrttrr.question}`
wew = await getBuffer(`${superrttrr.foto}`)   
await sandro.sendMessage(from, {image: wew, caption: imagemtexto}, {quoted: selo})
} else {
fs.writeFileSync(`./database/grupos/games/quiz-animais/${from}.json`, `${JSON.stringify(quizanimais[animaisquiz])}`)
wew = await getBuffer(`${quizanimais[animaisquiz].foto}`)  
await sandro.sendMessage(from, {image: wew, caption: `ü§î Pergunta: ${quizanimais[animaisquiz].question}`}, {quoted: selo})
}
} else if (args.join(' ') ==='0') {
if(!fs.existsSync(`./database/grupos/games/quiz-animais/${from}.json`)) return reply('N√£o tem como desativar o jogo p√¥s ele n√£o foi ativado')
fs.unlinkSync(`./database/grupos/games/quiz-animais/${from}.json`)
reply("Desativado com sucesso.")
}
break

case 'whatmusic':
if (!isGroup) return reply(enviar.msg.grupo) 
if (!isGroupAdmins) return reply('Somente adms!')
if(!isModobn) return reply(mess.warningMB(prefix))
const whatMAle = Math.floor(Math.random() * whatMusicAr.length)
if(args.length == 0) return reply('Use 1 para ativar o jogo, ou seja, para desativar utilize o valor num√©rico 0')
if (args.join(' ') === '1') {
if(fs.existsSync(`./database/grupos/games/wmusic/${from}.json`)) {
dataW = JSON.parse(fs.readFileSync(`./database/grupos/games/wmusic/${from}.json`))
reply(`J√° existe uma partida iniciada aqui no grupo, confira:\n‚Äì\n${dataW.trechoMusic}\n‚Äì\nü§îüò± Qual m√∫sica pertence o trecho apresentado acima?\n‚Ä¢ ${II}Dica:${II} ${dataW.dica}`)} else {
fs.writeFileSync(`./database/grupos/games/wmusic/${from}.json`, `${JSON.stringify(whatMusicAr[whatMAle])}`)
textW = `üé∂üéß ùêñùêáùêÄùêì ùêåùêîùêíùêàùêÇ? üò±üí°\n‚Äì\n${whatMusicAr[whatMAle].trechoMusic}\n‚Äì\nü§îüò± Qual m√∫sica pertence o trecho apresentado acima?\n‚Ä¢ ${II}Dica:${II} ${whatMusicAr[whatMAle].dica}`
sandro.sendMessage(from, {text: textW}, {quoted: selo})
}
} else if (args.join(' ') ==='0') {
if(!fs.existsSync(`./database/grupos/games/wmusic/${from}.json`)) return reply('N√£o tem como desativar o jogo, pois ele n√£o foi ativado')
fs.unlinkSync(`./database/grupos/games/wmusic/${from}.json`)
reply("Desativado com sucesso.")
}
break

case 'gartic':
if (!isGroup) return reply(enviar.msg.grupo) 
if (!isGroupAdmins) return reply('Somente adms!')
if(!isModobn) return reply(mess.warningMB(prefix))
const garticquiz = Math.floor(Math.random() * garticArchives.length)
if(args.length == 0) return reply('Use 1 para ativar o gartic, ou seja, para desativar utilize o valor num√©rico 0')
if (args.join(' ') === '1') {
if(fs.existsSync(`./database/grupos/games/gartic/${from}.json`)) {
dataGartic2 = JSON.parse(fs.readFileSync(`./database/grupos/games/gartic/${from}.json`))
imagemtexto = `üë©üèº‚Äçüè´ - A resposta √© representada por um(a): ${dataGartic2.pergunta}
üìú - A resposta supostamente come√ßa com a(s) letra(s): "${dataGartic2.letra_inicial}"
ü§î - Hmmm, cont√©m tra√ßos? ${dataGartic2.contem_tra√ßos}
‚Äì
‚ùìÔ∏è - *N√£o sabe a resposta?* _Pe√ßa ao adm do grupo para usar o comando *${prefix}revelargartic* para revelar a resposta correta da afirma√ß√£o._`
wew = await getBuffer(`${dataGartic2.imagem}`)  
await sandro.sendMessage(from, {image: wew, caption: imagemtexto, thumbnail: wew}, {quoted: selo})
} else {
fs.writeFileSync(`./database/grupos/games/gartic/${from}.json`, `${JSON.stringify(garticArchives[garticquiz])}`)
imagemtexto = `üë©üèº‚Äçüè´ - A resposta √© representada por um(a): ${garticArchives[garticquiz].pergunta}
üìú - A resposta supostamente come√ßa com a(s) letra(s): "${garticArchives[garticquiz].letra_inicial}"
ü§î - Hmmm, cont√©m tra√ßos? ${garticArchives[garticquiz].contem_tra√ßos}
‚Äì
‚ùìÔ∏è - *N√£o sabe a resposta?* _Pe√ßa ao adm do grupo para usar o comando *${prefix}revelargartic* para revelar a resposta correta da afirma√ß√£o._`
wew = await getBuffer(`${garticArchives[garticquiz].imagem}`)  
await sandro.sendMessage(from, {image: wew, caption: imagemtexto, thumbnail: wew}, {quoted: selo})
}
} else if (args.join(' ') ==='0') {
if(!fs.existsSync(`./database/grupos/games/gartic/${from}.json`)) return reply('N√£o tem como desativar o gartic p√¥s ele n√£o foi ativado.')
fs.unlinkSync(`./database/grupos/games/gartic/${from}.json`)
reply("Desativado com sucesso.")
}
break

case 'enigma':
if (!isGroup) return reply(enviar.msg.grupo) 
if (!isGroupAdmins) return reply('Somente adms!')
if(!isModobn) return reply(mess.warningMB(prefix))
const engimaSolu = Math.floor(Math.random() * enigmaArchive.length)
if(args.length == 0) return reply('Use 1 para ativar o enigma, ou seja, para desativar utilize o valor num√©rico 0')
if (args.join(' ') === '1') {
if(fs.existsSync(`./database/grupos/games/enigma/${from}.json`)) {
SAB_SAB_ENI = JSON.parse(fs.readFileSync(`./database/grupos/games/enigma/${from}.json`))
imagemtexto = `üìú - Resolva o seguinte enigma abaixo:

${SAB_SAB_ENI.charada}

‚ùìÔ∏è - *N√£o sabe a resposta?* _Pe√ßa ao adm do grupo para usar o comando *${prefix}revelarenigma* para revelar a resposta correta da enigma._`
wew = await getBuffer(`https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg`)  
await sandro.sendMessage(from, {image: wew, caption: imagemtexto, thumbnail: wew}, {quoted: selo})
} else {
fs.writeFileSync(`./database/grupos/games/enigma/${from}.json`, `${JSON.stringify(enigmaArchive[engimaSolu])}`)
imagemtexto = `üìú - Resolva o seguinte enigma abaixo:

${enigmaArchive[engimaSolu].charada}

‚ùìÔ∏è - *N√£o sabe a resposta?* _Pe√ßa ao adm do grupo para usar o comando *${prefix}revelarenigma* para revelar a resposta correta da enigma._`
wew = await getBuffer(`https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg`)  
await sandro.sendMessage(from, {image: wew, caption: imagemtexto, thumbnail: wew}, {quoted: selo})
}
} else if (args.join(' ') ==='0') {
if(!fs.existsSync(`./database/grupos/games/enigma/${from}.json`)) return reply('N√£o tem como desativar o enigma p√¥s ele n√£o foi ativado.')
fs.unlinkSync(`./database/grupos/games/enigma/${from}.json`)
reply("Desativado com sucesso.")
}
break



case 'revelargartic':  
if (!isGroupAdmins) return reply('Somente adms podem ver a(s) resposta(s) do jogos!')
if(fs.existsSync(`./database/grupos/games/gartic/${from}.json`)) return ("N√£o existe nenhuma partida atual do jogo neste grupo.")
let dataAnagramaa = JSON.parse(fs.readFileSync(`./database/grupos/games/gartic/${from}.json`))
reply(`‚Ä¢ Ol√° *${pushname}*, a resposta correta da afirma√ß√£o era: ${II}${dataAnagramaa.resposta}${II}\n‚Ä¢ Envie a resposta apresentada acima para passar a pr√≥xima..`)
break

case 'revelarenigma':
if (!isGroupAdmins) return reply('Somente adms podem ver a(s) resposta(s) do jogos!')
if(fs.existsSync(`./database/grupos/games/enigma/${from}.json`)) return ("N√£o existe nenhuma partida atual do jogo neste grupo.")
let eni1 = JSON.parse(fs.readFileSync(`./database/grupos/games/enigma/${from}.json`))
reply(`‚Ä¢ Ol√° *${pushname}*, a resposta correta do enigma era: ${II}${eni1.respostaEne}${II}\n‚Ä¢ Envie a resposta apresentada acima para passar a pr√≥xima..`)
break

case 'icms':
txt = q.replace(" |", "|").replace("| ", "|").replace(" | ", "|")
var [result1, result2] = txt.split("|")
if(!q.includes("|")) return reply(mess.syntaxIcms(prefix))
await fetchJson(`https://yurimodz-apis.xyz/api/icms?valor=${encodeURIComponent(result1)}&ddd=${encodeURIComponent(result2)}&apikey=${SANDRO_MD_BOT}`).then(data => {
sandro.sendMessage(from, {text: mess.icmsResult(data)}, {quoted: selo})
}).catch(e => {
return reply(mess.error())
})
break

case 'add_key': 
if (!SoDono) return reply(enviar.msg.donosmt)
txt = q.replace(" |", "|").replace("| ", "|").replace(" | ", "|")
var [akey, limit] = txt.split("|")
if(!q.includes("|")) return reply(`Ol√° chefinho, parece que voc√™ est√° usando o comando de forma errada!\n  ‚Ä¢ Exemplo: *${prefix}add_key [apikey|limite]*`)
try {
sb_ = await fetchJson(`https://yurimodz-apis.xyz/db/adicionar-apikey?apikey=${encodeURI(akey)}&request=${Number(limit)}&senha=R23`)
reply(sb_.message)
} catch(e) {
console.error(e)
}
break

case 'rm_key': 
if (!SoDono) return reply(enviar.msg.donosmt)
if (!q) return reply(`Me fale qual √© a apikey que voc√™ deseja remover?\n  ‚Ä¢ Exemplo: *${prefix}rm_key [apikey desejada]*`)
try {
sb_ = await fetchJson(`https://yurimodz-apis.xyz/db/remover-apikey?apikey=${encodeURI(q)}&senha=Yurizinn`)
reply(sb_.message)
} catch(e) {
console.error(e)
}
break

case 'list_key':
if (!SoDono) return reply(enviar.msg.donosmt)
ABC = await fetchJson(`https://yurimodz-apis.xyz/db/lista-apikeys?senha=Yurizinn`)
RST = `‚Ä¢ Total de apikeys armazenadas na dabatase: *${ABC.length}*\n‚Ä¢ Aqui est√° a lista detalhadas sobre as apikey criadas pelo meu propriet√°rio.\n‚Äî\n`
RST += `${ABC.map(v => `‚Ä¢ Apikey: *${v?.apikey}*\n‚Ä¢ Limite de Requisi√ß√µes: *${v?.request}*`).join('\n‚Äî\n')}`
await sandro.sendMessage(sender, {text: RST}, {quoted: selo})
break

case 'list_ip':
if (!SoDono) return reply(enviar.msg.donosmt)
ABC = await fetchJson(`https://yurimodz-apis.xyz/db/lista-ip?senha=R23`)
RST = `‚Ä¢ Total de apikeys armazenadas na dabatase de ip(s): *${ABC.length}*\n‚Ä¢ Aqui est√° a lista detalhadas sobre os ip acessado(s) pelo usu√°rios destinados de cada apikey.\n‚Äî\n`
RST += `${ABC.map(v => `‚Ä¢ Apikey: *${v?.key}*\n‚Ä¢ Endere√ßo(s) IP: *${v.IP}*`).join('\n‚Äî\n')}`
await sandro.sendMessage(sender, {text: RST}, {quoted: selo})
break

//==(AUDIOS/DE-MUSICA/ZOUEIRA/ETC..)===\\

case 'bot':
const soundft = await fetch(qviado).then(v => v.buffer())
sandro.sendMessage(from, {audio: soundft, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
break

//=======================================\\

//=====(ALTERADOR-DE-AUDIO/VIDEO)=======\\

case 'videocontrario':
case 'reversevid':
if((isMedia && info.message.videoMessage || !isQuotedImage) && !q.length <= 1) { 
reply(enviar.espere)
encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
media = rane
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -vf reverse -af areverse ${ran}`, (err) => {
DLT_FL(media)
if(err) return reply(`Err: ${err}`)
buffer453 = fs.readFileSync(ran)
sandro.sendMessage(from, {video: buffer453, mimetype: 'video/mp4'}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque um v√≠deo..")
}
break 

case 'videolento':
case 'slowvid':  
if((isMedia && info.message.videoMessage || !isQuotedImage) && !q.length <= 1) {
reply(enviar.espere) 
encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
media = rane
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter_complex "[0:v]setpts=2*PTS[v];[0:a]atempo=0.5[a]" -map "[v]" -map "[a]" ${ran}`, (err) => {
DLT_FL(media)
if(err) return reply(`Err: ${err}`)
buffer453 = fs.readFileSync(ran)
sandro.sendMessage(from, {video: buffer453, mimetype: 'video/mp4'}, {quoted: selo })
DLT_FL(ran)
})
} else {
reply("Marque um v√≠deo..")
}
break

case 'videorapido':
case 'fastvid':  
if((isMedia && info.message.videoMessage || !isQuotedImage) && !q.length <= 1) {
reply(enviar.espere)
encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
media = rane
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2[a]" -map "[v]" -map "[a]" ${ran}`, (err) => {
DLT_FL(media)
if(err) return reply(`Err: ${err}`)
buffer453 = fs.readFileSync(ran)
sandro.sendMessage(from, {video: buffer453, mimetype: 'video/mp4'}, {quoted: selo })
DLT_FL(ran)
})	
} else {
reply("Marque o v√≠deo..")
}
break

case 'grave2':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=1.6,asetrate=22100" ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break

case 'grave':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=44100" ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break

case 'adolesc':
case 'vozmenino':  
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a atempo=1.06,asetrate=44100*1.25 ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break  

case 'tomp3':
if((isMedia && !info.message.imageMessage || isQuotedVideo)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.videoMessage
reply(enviar.espere)
encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
media = rane 
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} ${ran}`, (err) => { 
DLT_FL(media)
if(err) return reply('Ocorreu uma falha ao fazer a convers√£o do v√≠deo para mp3.')
buffer = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: buffer, mimetype: 'audio/mpeg'}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o v√≠deo para transformar em √°udio por favor..")
}
break

case 'bass3':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=20:width_type=o:width=2:g=15 ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break

case 'bass': 
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=20:width_type=o:width=2:g=15 ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio...")
}
break

case 'bass2': 
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=94:width_type=o:width=2:g=30 ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break

case 'estourar': 
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=90:width_type=o:width=2:g=30 ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break

case 'fast':
case 'audiorapido':  
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=95100" ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Erro')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio...")
}
break

case 'esquilo':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.7,asetrate=65100" ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio...")
}
break

case 'audiolento': 
case 'slow':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(enviar.espere)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=44100" ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
sandro.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break



//==========(EFEITOS-MARCAR)==========\\

case 'togif':
if(!isQuotedSticker) return reply('Marque a figurinha animada!')
try {
if((isMedia && !info.message.videoMessage || isQuotedSticker) && !q.length <= 1) {
buff = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, 'sticker')
reply('Aguarde, estou convertendo a figurinha para o formato gif.')
a = await webp_mp4(buff)
sandro.sendMessage(from, {video: {url: a}, gifPlayback: true, fileName: `stick.gif`}, {quoted: selo}).catch(e => {
reply("Erro ao realizar o envio do sticker!") 
})
DLT_FL(buff)
}
} catch {
reply(mess.error())
}
break

case 'convite':
if(!budy.includes("chat.whatsapp.com")) return reply("Cad√™ o link do grupo que voc√™ deseja que eu entre?")  
cnvt = args.join(" ")
reply(`O convite para o bot entrar em seu grupo, foi enviado, espere o dono aceitar..`)
sandro.sendMessage(nmrdn, {text: mess.groupInvitation(sender, cnvt, prefix)}, {quoted: info})
break

case 'recusar':
if(!SoDono) return reply(enviar.msg.donosmt)
sandro.sendMessage(`${q}@s.whatsapp.net`, {text: `Ol√° amigo(a), sinto muito dizer, mas seu convite foi recusado.`})
break;

case 'join': case 'entrar':
if(!SoDono) return reply(enviar.msg.donosmt)
string = args.join(' ')
if(!string) return reply('Insira um link de convite ao lado do comando.')
if(string.includes('chat.whatsapp.com/') || reply('Ops, verifique o link que voc√™ inseriu.') ) {
link = string.split('app.com/')[1]
try {
sandro.groupAcceptInvite(`${link}`)
} catch(erro) {
if(String(erro).includes('resource-limit') ) {
reply('O grupo j√° est√° com o alcance de 257 membros.')
}
if(String(erro).includes('not-authorized') ) {
reply('N√£o foi poss√≠vel entrar no grupo.\nMotivo: Banimento.')
}
}
}
break

case 'sip': case 'ip': 
if (!q) return reply(`Informe o ip que voc√™ deseja! *Exemplo:* ${prefix+command} 8.8.8.8`)
try {
ip = await axios.get(`https://ipwhois.app/json/${encodeURIComponent(q)}`);
sandro.sendMessage(from, {image: {url: `https://maps.googleapis.com/maps/api/streetview?size=1400x1400&location=${ip.data.latitude},%20${ip.data.longitude}&sensor=false&key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg`}, caption: mess.searchIpAdress(ip)})
sandro.sendMessage(from, {location: {degreesLatitude: ip.data.latitude,degreesLongitude: ip.data.longitude, addrees: ''}})
} catch {
reply(mess.error())
}
break

case 'cep':
try {
if(!q.trim()) return reply("digite o CEP que deseja buscar informa√ß√µes..");
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/consultacep?cep=51240230&apikey=${API_SANDRO_MD}`)
reply(`Cep: ${ABC.cep}\nRua: ${ABC.rua}\nComplemento: ${ABC.complemento}\nBairro: ${ABC.vizinhan√ßa}\nCidade: ${ABC.cidade}\nEstado: ${ABC.estado}\nGia: ${ABC.gia}\nIbge: ${ABC.ibge}\nddd: ${ABC.ddd}\nSiafi: ${ABC.siafi}`)
} catch (e) {
return reply("Erro..")
}
break

// RPG //

case 'menurpg': 
case 'menucity':
if(!isGroup) return (enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}rgc* para se registrar na City.`)
try {
const imagemUrl = fotobot; 
const menuTexto = rpgmenu(prefix, pushname, NickDono, NomeDoBot, isChVip, sender);
sandro.sendMessage(from, { image: { url: imagemUrl }, caption: menuTexto }, { quoted: info });
} catch (e) {
console.log("Erro no comando 'menu':", e);
}
break;

case 'modorpg': 
case 'modocity': 
case 'modoc': 
case 'cityrpg':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!q) return reply(`Voc√™ est√° usando o comando de forma errada, verifique:\n‚Ä¢ Ex: *${prefix+command} 1/0* _(1 para ativar, 0 para desativar)_`)
if(Number(args[0]) === 1) {
if(JSON.stringify(autorpg).includes(from) && autorpg[autorpg.map(i => i.id).indexOf(from)].rpg == true) return reply("Sistema *City* - O sistema j√° est√° ativado aqui no grupo.")
if(!JSON.stringify(autorpg).includes(from)) {
autorpg.push({id: from, rpg: true})
fs.writeFileSync("./database/usuarios/SystemRPG/autorpg.json", JSON.stringify(autorpg))
} else {
autorpg[autorpg.map(i => i.id).indexOf(from)].rpg = true
fs.writeFileSync("./database/usuarios/SystemRPG/autorpg.json", JSON.stringify(autorpg))
}
reply("Sistema *City* - Foi efetuado a ativa√ß√£o no grupo com sucesso...")
} else if(Number(args[0]) === 0) {
if(JSON.stringify(autorpg).includes(from) && autorpg[autorpg.map(i => i.id).indexOf(from)].rpg == false) return reply("Sistema *City* - O sistema n√£o est√° ativado aqui no grupo.")
if(!JSON.stringify(autorpg).includes(from)) {
autorpg.push({id: from, rpg: false})
fs.writeFileSync("./database/usuarios/SystemRPG/autorpg.json", JSON.stringify(autorpg))
} else {
autorpg[autorpg.map(i => i.id).indexOf(from)].rpg = false
fs.writeFileSync("./database/usuarios/SystemRPG/autorpg.json", JSON.stringify(autorpg))
}
reply("Sistema *City* - Foi desabilitado com sucesso no grupo.")
}
break

case 'rgc':
case 'rgcity':
if(!isGroup) return (enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(JSON.stringify(sabrpg).includes(sender)) return reply(`Seu registro foi encontrado em meu banco de dados! Use *${prefix}meusc* e consulte seu registro/dados`)
if(!q) return reply(`Digite seu nome ap√≥s o comando, para seu registro ser feito com √™xito.`)
if(q.includes('@')) return reply(`O registro foi cancelado na City! Foi detectado um *@* no campo, retire-o e realize o registro novamente.`)
bancos = ["Inter", "NuBank", "PagBankÔ∏è", "Bradesco", "Next", "Caixa", "SantanderÔ∏è", "Banco do Brasil", "PicPay", "PayPal", "Ita√∫"]
bank = bancos[Math.floor(Math.random() * bancos.length)]
horarg = moment.tz('America/Sao_Paulo').format('HH:mm');
hora10 = moment.tz('America/Sao_Paulo').format('HH');
datarg = moment.tz('America/Sao_Paulo').format('DD/MM');
dia10 = moment.tz('America/Sao_Paulo').format('DD');
m10 = moment.tz('America/Sao_Paulo').format('MM');
sabrpg.push({id: sender, gpid: from, hrg: horarg, drg: datarg, nome: q, namebank: bank, money: 0, pixD: 5, pixL: 100, limiteC: 15, horaC: hora10, diaC: dia10, mC: m10, limiteTh: 3, hrT: hora10, limiteTd: 24, diaT: dia10, mT: m10, bcbet: true})
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Registro efetuado e conclu√≠do com √™xito! Seja bem vindo(a) √† City, ${q}`)
setTimeout(() => {
sandro.sendMessage(from, {text: `Agora voc√™ pode trabalhar e ganhar muito dinheiro jogando e apostando em nossos jogos. Para consultar seu saldo atual, use: *${prefix}minhacarteira*`})
}, 1100)
break


case 'dados_sc':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`ID do usu√°rio n√£o encontrado ou inexistente...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
reply(`‚Ä¢ ID do usu√°rio: ${sabrpg[AB].id}\n‚Ä¢ ID do grupo: ${sabrpg[AB].gpid}\n‚Ä¢ Hora de registro: ${sabrpg[AB].hrg}\n‚Ä¢ Data de registro: ${sabrpg[AB].drg}\n‚Ä¢ Nome de usu√°rio: ${sabrpg[AB].nome}\n‚Ä¢ Nome do banco: ${sabrpg[AB].namebank}\n‚Ä¢ Dinheiro: ${sabrpg[AB].money}\n‚Ä¢ Quantidade de pix di√°rio: ${sabrpg[AB].pixD}\n‚Ä¢ Limite de pix: ${sabrpg[AB].pixL}\n‚Ä¢ Limite do cassino: ${sabrpg[AB].limiteC}\n‚Ä¢ Hora do cassino: ${sabrpg[AB].horaC}\n‚Ä¢ Dia do cassino: ${sabrpg[AB].diaC}\n‚Ä¢ M√™s do cassino: ${sabrpg[AB].mC}\n‚Ä¢ Limite de trabalho por hora: ${sabrpg[AB].limiteTh}\n‚Ä¢ Hora do trabalho: ${sabrpg[AB].hrT}\n‚Ä¢ Limite de trabalho di√°rio: ${sabrpg[AB].limiteTd}\n‚Ä¢ Dia de trabalho: ${sabrpg[AB].diaT}\n‚Ä¢ M√™s de trabalho: ${sabrpg[AB].mT}`)
break

case 'sairdacity':
case 'sairc':
case 'saircity':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`ID do usu√°rio n√£o encontrado ou inexistente...`)
if(Number(args[0]) === 1) {
if(JSON.stringify(cavalosrpg).includes(sender)) {
AC = cavalosrpg.map(i => i.id).indexOf(sender)
cavalosrpg.splice(AC, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
}
if(JSON.stringify(galosrpg).includes(sender)) {
AD = galosrpg.map(i => i.id).indexOf(sender)
galosrpg.splice(AC, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
}
if(JSON.stringify(roubosrpg).includes(sender)) {
AE = roubosrpg.map(i => i.id).indexOf(sender)
roubosrpg.splice(AE, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
}
AB = sabrpg.map(i => i.id).indexOf(sender)
sabrpg.splice(AB, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(sabrpg))
reply(`Seu registro na City foi deletado com sucesso... Volte sempre!`)
} else {
reply(`Ao sair da City, voc√™ concorda em apagar o seu registro completamente, isto √©, todo o seu hist√≥rico de jogo.\n‚Ä¢ Caso voc√™ esteja de acordo com isso, use: *${prefix+command} 1*`)
}
break

case 'delcity':
case 'delc':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!q) return reply(`Digite o n√∫mero do usu√°rio que deseja remover da City.`)
qp = q + `@s.whatsapp.net`
AB = sabrpg.map(i => i.id).indexOf(qp)
if(AB < 0) return reply(`O ID do usu√°rio n√£o foi localizado, *certifique-se se ele j√° tem registro.*`)
if(JSON.stringify(cavalosrpg).includes(qp)) {
AC = cavalosrpg.map(i => i.id).indexOf(qp)
cavalosrpg.splice(AC, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
}
if(JSON.stringify(galosrpg).includes(qp)) {
AD = galosrpg.map(i => i.id).indexOf(qp)
galosrpg.splice(AC, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
}
sabrpg.splice(AB, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`O usu√°rio acaba de ser removido da *City*, por mandato da soberania.`)
break

case 'rpglistgp':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
membros = `Lista de participantes do *grupo* que est√£o registrados na *City*:\n‚Äì\n`
rpglistgp = 0
for(i = 0; i < groupMembers.length; i++) {
if(JSON.stringify(sabrpg).includes(groupMembers[i].id)) {
membros += `Membro ID ${i+1}. ‚ù™‚ñß‚ÉØ‚Éü‡∏∫‡£™‡£≠ÕòÍï∏‚ñ∏ @${groupMembers[i].id.split('@')[0]}\n`
rpglistgp += 1
}
}
membros += `‚Äì\n‚Ä¢ Quantidade: *${rpglistgp} participante(s).*`
mention(membros)
break

case 'meuc':
case 'meucity':
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
AB = sabrpg.map(i => i.id).indexOf(sender)
dindin = Number(sabrpg[AB].money).toFixed(2)
if(dindin < 10){
var bctxt = `0${dindin}`
} else {
var bctxt = dindin
}
myid = sabrpg[AB].id.split('@')[0].slice(5)
if(JSON.stringify(cavalosrpg).includes(sender)){
AC = cavalosrpg.map(a => a.id).indexOf(sender)
percentualcavalo = Number(cavalosrpg[AC].countVc)/Number(Number(cavalosrpg[AC].countVc)+Number(cavalosrpg[AC].countDc))*100
if(Number(percentualcavalo) > 0) {
porcemnmr = percentualcavalo
} else {
porcemnmr = 0
}
runcav = `‚Ä¢ Quantidade de Cavalos que voc√™ possu√≠ atualmente: *${cavalosrpg[AC].cavalos.length}*\n‚Ä¢ Quantidade de Vit√≥rias: *${cavalosrpg[AC].countVc}*\n‚Ä¢ Porcentagem de Ganhos: *${Number(porcemnmr).toFixed(1)}%*\n‚Ä¢ Dinheiro investido: *R$ ${Number(Number(cavalosrpg[AC].capitalVc)+Number(cavalosrpg[AC].capitalDc)).toFixed(2)}*\n‚Ä¢ Dinheiro lucrado: (R$): *R$ ${Number(cavalosrpg[AC].capitalVc).toFixed(2)}*`
} else {
runcav = `Ô∏èVoc√™ atualmente n√£o est√° registrado na *corrida de cavalos*.`
}
if(JSON.stringify(galosrpg).includes(sender)){
AE = galosrpg.map(b => b.id).indexOf(sender)
percentualgalos = Number(galosrpg[AE].countVg)/Number(Number(galosrpg[AE].countVg)+Number(galosrpg[AE].countDg))*100
if(Number(percentualgalos) > 0) {
porcegalos = percentualgalos
} else {
porcegalos = 0
}
brigadegalo = `‚Ä¢ Quantidade de Galos que voc√™ possu√≠ atualmente: *${galosrpg[AE].galos.length}*\n‚Ä¢ Quantidade de Vit√≥rias: *${galosrpg[AE].countVg}*\n‚Ä¢ Porcentagem de Ganhos: ${Number(porcegalos).toFixed(1)}%\n‚Ä¢ Dinheiro investido: *R$ ${Number(galosrpg[AE].dinVg).toFixed(2)}*\n‚Ä¢ Dinheiro lucrado: (R$): ${Number(galosrpg[AE].luckVg). toFixed(2)}`
} else {
brigadegalo = `Voc√™ atualmente n√£o est√° registrado na *briga de galos*...`
}
if(JSON.stringify(roubosrpg).includes(sender)) {
SC = roubosrpg.map(b => b.id).indexOf(sender)
if(roubosrpg[SC].seguran√ßa > 20) {
tlvz = roubosrpg[SC].seguran√ßa
tlvz -= 20
tlvz /= 20
seguran√ßa = `Lv. ${tlvz}`
} else {
seguran√ßa = `*Voc√™ n√£o possui nenhum level de seguran√ßa.*`
}
} else {
seguran√ßa = `*Voc√™ n√£o possui nenhum level de seguran√ßa.*`
}
txt = `Ol√° *${sabrpg[AB].nome}*, tudo bem? Aqui est√° a sua solicita√ß√£o:\n‚Äì\n‚Ä¢ User ID: *R${sabrpg[AB].id.split(myid)[0]}GP${myid}BC*\n‚Ä¢ Saldo dispon√≠vel: *R$ ${bctxt}*\n‚Ä¢Ô∏è Prote√ß√£o: ${seguran√ßa}\n‚Äì\n‚Ä¢ [üê¥] *Corrida de Cavalo(s):*\n${runcav}\n‚Äì\n‚Ä¢ [üêì] *Briga de Galo(s):*\n${brigadegalo}`
reply(txt)
break

case 'minhacarteira':
case 'carteira':
case 'meubanco':
case 'saldo':
if(!isSabCityOFF) return reply(`Ol√°, o modo RPG n√£o esta a`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
AB = sabrpg.map(i => i.id).indexOf(sender)
dindin = Number(sabrpg[AB].money).toFixed(2)
if(dindin < 10){
var bctxt = `0${dindin}`
} else {
var bctxt = dindin
}
caixa = []
for(i = 0; i < sabrpg.length; i++){
caixa.push({idnmr: sabrpg[i].id, nmr: i+1})
}
enc = caixa.map(b => b.idnmr).indexOf(sender)
if(Number(caixa[enc].nmr) < 100) {
if(Number(caixa[enc].nmr) < 10) {
page = `00` + caixa[enc].nmr
} else {
page = `0` + caixa[enc].nmr
}
} else {
page = caixa[enc].nmr
}
myid = sabrpg[AB].id.split('@')[0].slice(5)
txt = `Ol√° *${sabrpg[AB].nome}*, tudo bem? Aqui est√° a sua solicita√ß√£o:\n‚Äî\n‚Ä¢ [üíµ] *Informa√ß√µes Banc√°rias*\n‚Ä¢ Seu banco atual: *${sabrpg[AB].namebank}*\n‚Ä¢ Voc√™ est√° atualmente com *R$ ${bctxt}* em sua carteira para uso.\n‚Äì\n‚Ä¢ [üßæ] *Informa√ß√µes de Registro*\n‚Ä¢ Seu ID: *R${sabrpg[AB].id.split(myid)[0]}GP${myid}BC*\n‚Ä¢ Voc√™ realizou o registro na _City_ √†s *${sabrpg[AB].hrg} hora(s)* no dia *${sabrpg[AB].drg}*.\n‚Äì\n‚Ä¢ [üìñ] *Livro de Registro*\n_Com base em meu livro de registros_, voc√™ foi registrado na p√°gina: *${page}*`
reply(txt)
break

case 'rankcity':
case 'rankc':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
setTimeout(() => {reagir(from, "ü§ë")}, 300)
sandrobot = sabrpg.map(i => i)
rank = sandrobot.sort((a, b) => (a.money < b.money) ? 0 : -1)
if(sabrpg.length > 5) {
var totalR = 5
} else {
var totalR = sabrpg.length
}
txt = `üåüüßæ *Rank City:*\n‚Äì\n`
for ( i = 0; i < totalR; i++) {
  if(i != null) {
txt += `${i + 1}¬∫ Lugar - Usu√°rio: *${rank[i].nome}*
‚Ä¢ Saldo do Usu√°rio: R$ ${Number(rank[i].money).toFixed(2)}\n‚Äì\n`
}
}
reply(txt)
break

case 'buscarc':
case 'buscarcity':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!JSON.stringify(sabrpg).includes(`${q}@s.whatsapp.net`)) return reply(`ID n√£o encontrado ou inexistente...`)
AB = sabrpg.map(i => i.id).indexOf(`${q}@s.whatsapp.net`)
dindin = Number(sabrpg[AB].money).toFixed(2)
if(dindin < 10){
var bctxt = `0${dindin}`
} else {
var bctxt = dindin
}
bcid = sabrpg[AB].id.split('@')[0]
cort = bcid.slice(5)
reply(`¬© *City:* | Carteira e informa√ß√µes do Usu√°rio:\n‚Äì\n‚Ä¢ Nome do Usu√°rio: *${sabrpg[AB].nome}*\n‚Ä¢ Banco: *${sabrpg[AB].namebank}*\n‚Ä¢ Saldo dispon√≠vel: *R$ ${bctxt}*\n‚Äî‚Äì\n‚Ä¢ [üßæ] *Informa√ß√µes de Registro:*\n‚Ä¢ ID do Usu√°rio: *R${bcid.split(cort)[0]}GP${cort}BC*\n‚Ä¢ Registrou-se √†s *${sabrpg[AB].hrg}* hora(s) do dia *${sabrpg[AB].drg}*.`)
break

case 'addpix':
if(!SoDono) return reply(enviar.msg.donosmt)
var [nmr, pix] = q.split('/')
if(!nmr) return reply(`Falta a chave pix`)
if(!pix) return reply(`Falta o PIX`)
AB = sabrpg.map(i => i.id).indexOf(`${nmr}@s.whatsapp.net`)
if(!JSON.stringify(sabrpg).includes(`${nmr}@s.whatsapp.net`)) return reply(`Chave PIX n√£o encontrada ou inexistente...`)
if(!Number(pix)) return reply(`${pix} n√£o √© um n√∫mero...`)
MD = sabrpg[AB].money
addpix = Number(MD) + Number(pix)
sabrpg[AB].money = addpix
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`R$ ${Number(pix).toFixed(2)} foram adicionados a conta ${sabrpg[AB].nome}`)
break

case 'setpix':
if(!SoDono) return reply(enviar.msg.donosmt)
var [nmr, pix] = q.split('/')
if(!nmr) return reply(`Falta a chave pix`)
if(!pix) return reply(`Falta o PIX`)
AB = sabrpg.map(i => i.id).indexOf(`${nmr}@s.whatsapp.net`)
if(!JSON.stringify(sabrpg).includes(`${nmr}@s.whatsapp.net`)) return reply(`Chave PIX n√£o encontrada ou inexistente...`)
if(!Number(pix)) return reply(`${pix} n√£o √© um n√∫mero...`)
sabrpg[AB].money = pix
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`O saldo da conta ${sabrpg[AB].nome} foi setado em R$ ${Number(pix).toFixed(2)}`)
break

case 'delpix':
if(!SoDono) return reply(enviar.msg.donosmt)
var [nmr, pix] = q.split('/')
if(!nmr) return reply(`Falta a chave pix`)
if(!pix) return reply(`Falta o PIX`)
AB = sabrpg.map(i => i.id).indexOf(`${nmr}@s.whatsapp.net`)
if(!JSON.stringify(sabrpg).includes(`${nmr}@s.whatsapp.net`)) return reply(`Chave PIX n√£o encontrada ou inexistente...`)
if(!Number(pix)) return reply(`${pix} n√£o √© um n√∫mero...`)
MD = sabrpg[AB].money
addpix = Number(MD) - Number(pix)
sabrpg[AB].money = addpix
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`R$ ${Number(pix).toFixed(2)} foram retirados da conta ${sabrpg[AB].nome}`)
break

case 'zerarcity':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!q) return reply(`Falta a chave pix`)
AB = sabrpg.map(i => i.id).indexOf(`${q}@s.whatsapp.net`)
if(!JSON.stringify(sabrpg).includes(`${q}@s.whatsapp.net`)) return reply(`Chave PIX n√£o encontrada ou inexistente...`)
if(!Number(q)) return reply(`${q} n√£o √© um n√∫mero...`)
sabrpg[AB].money = 0
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`A conta ${sabrpg[AB].nome} foi zerada... Seu saldo agora √© R$ 00.00`)
break

case 'gerargf':
if(!SoDono) return reply(enviar.msg.donosmt)
var [value, quant] = q.split('/')
if(!value) return reply(`Defina o valor que voc√™ desejar adicionar ao giftCard.`)
if(!quant) return reply(`Defina a quantidade de usu√°rios que poderam usar o *c√≥digo-resgate*.`)
if(!Number(value)) return reply(`${value} n√£o √© n√∫mero!`)
if(!Number(quant)) return reply(`${quant} n√£o √© n√∫mero!`)
dategf = moment.tz('America/Sao_Paulo').format('DDMMYY')
horagf = moment.tz('America/Sao_Paulo').format('HHmmss')
codegf = `P${value}M${quant}BC${dategf+horagf}QC${Number(Number(Number(dategf)+Number(horagf))/Number(quant)).toFixed(0)}RPG`
coderpg.push({codeid: codegf, valor: value,quantmax: Number(quant).toFixed(0), usus: []})
fs.writeFileSync("./database/usuarios/SystemRPG/coderpg.json", JSON.stringify(coderpg))
reply(`C√≥digo de *R$ ${Number(value).toFixed(2)}* gerado, v√°lido para ${Number(quant) <= 1 ? `um usu√°rio apenas...` : `os ${quant} primeiros...`}\n‚Ä¢ Para resgatar o benef√≠cio, use o comando: *${prefix}resgatargf*`)
setTimeout(() => {
sandro.sendMessage(from, {text: codegf})
}, 1000)
break

case 'delgf':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!q) return reply(`Digite o c√≥digo que deseja remover do RPG`)
AB = coderpg.map(i => i.codeid).indexOf(q)
if(AB < 0) return reply(`C√≥digo n√£o encontrado ou inexistente...`)
coderpg.splice(AB, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/coderpg.json", JSON.stringify(coderpg))
reply(`O c√≥digo *${q}* foi desabilitado com sucesso, ou seja, o c√≥digo a partir de agora est√° inv√°lido.`)
break

case 'resgatargf':
case 'resgatar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
AB = coderpg.map(i => i.codeid).indexOf(q)
BD = sabrpg.map(b => b.id).indexOf(sender)
if(!q) return reply(`Voc√™ esqueceu de digitar o c√≥digo junto ao comando! _Ex: ${prefix+command} ABCD1234_`)
if(!JSON.stringify(coderpg).includes(q)) return reply(`Error *500*: C√≥digo Inexistente! ‚úãüèº`)
if(JSON.stringify(coderpg[AB].usus).includes(sender)) return reply(`Voc√™ j√° usou, ou seja, _o c√≥digo s√≥ pode ser resgatado 1 vez por usu√°rio._`)
if(Number(coderpg[AB].usus.length) < Number(coderpg[AB].quantmax)) {
coderpg[AB].usus.push({id: sender})
fs.writeFileSync("./database/usuarios/SystemRPG/coderpg.json", JSON.stringify(coderpg))
MD = sabrpg[BD].money
sabrpg[BD].money = Number(MD) + Number(coderpg[AB].valor)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Estou verificando se o c√≥digo √© real, para atribuir o benef√≠cio a voc√™!`)
setTimeout(() => {
mention(`‚úÖÔ∏èüí∞ *O c√≥digo informado √© v√°lido!* Parab√©ns *@${sender.split("@")[0]}*, voc√™ acaba de resgatar o seu benef√≠cio.\n‚Ä¢ Foi adicionado √† sua carteira, um valor de: *R$ ${Number(coderpg[AB].valor).toFixed(2)}*`)
}, 3000)
} else {
reply(`Sinto muito!üòø O c√≥digo informado est√° inv√°lido.\n‚Ä¢ Por favor, entre em contato com meu dono, caso seja um engano!`)
}
break

case 'codelist':
case 'listacodigo':
case 'listacodigos':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(coderpg.length < 0) return reply(`Sinto muito!üòø N√£o existe nenhum c√≥digo dispon√≠vel no momento.`)
txt = `[Total: *${coderpg.length}*] - C√≥digos de resgate dispon√≠veis.\n‚Ä¢ Para resgatar o benef√≠cio, use o comando: *${prefix}resgatargf <code>*`
for(i =0; i < coderpg.length; i++) {
txt += `\n‚Äî\n*[${i+1}]* ¬ª ‚Ä¢ C√≥digo: *${coderpg[i].codeid}*\n‚Ä¢ Valor do Gift Card: *R$ ${Number(coderpg[i].valor).toFixed(2)}*\n‚Ä¢ N√∫mero de usu√°rio(s) que podem resgatar o mesmo: *${Number(coderpg[i].quantmax) - Number(coderpg[i].usus.length)}*`
}
reply(txt)
break

case 'fazerpix': case 'transferir':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
datepix = moment.tz('America/Sao_Paulo').format('DD/MM/YY')
dateid = moment.tz('America/Sao_Paulo').format('DDMMYY')
horaid = moment.tz('America/Sao_Paulo').format('HHmmss')
var [nmr, pix] = q.split('/')
if(!nmr) return reply(`Coloque a chave PIX (n√∫mero do indiv√≠duo) para fazer a transfer√™ncia banc√°ria...`)
if(sender.includes(nmr)) return reply(`N√£o √© poss√≠vel enviar um pix para voc√™ mesmo...`)
if(!pix) return reply(`Coloque uma barra ( / ) ap√≥s a chave, e defina o valor a ser enviado, ex:
${prefix+command} 553195595444/100`)
if(Number(pix) < 0.01) return reply(`N√£o √© poss√≠vel transferir menos que 1 centavo...`)
if(!Number(pix)) return reply(`${pix} n√£o √© n√∫mero... üòø`)
if(!JSON.stringify(sabrpg).includes(`${nmr}@s.whatsapp.net`)) return reply(`Chave PIX n√£o encontrada ou inexistente...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
BC = sabrpg.map(i => i.id).indexOf(`${nmr}@s.whatsapp.net`)
if(Number(pix) > Number(sabrpg[AB].money)) return reply(`Voc√™ n√£o tem saldo suficiente para efetuar essa transfer√™ncia...`)
if(sabrpg[AB].namebank == "Inter"){tpb = 0.1}
if(sabrpg[AB].namebank == "NuBank"){tpb = 0.2}
if(sabrpg[AB].namebank == "PagBank"){tpb = 0.3}
if(sabrpg[AB].namebank == "Bradesco"){tpb = 0.4}
if(sabrpg[AB].namebank == "Ita√∫"){tpb = 0.5}
if(sabrpg[AB].namebank == "Next"){tpb = 0.6}
if(sabrpg[AB].namebank == "Caixa"){tpb = 0.7}
if(sabrpg[AB].namebank == "SantanderÔ∏è"){tpb = 0.8}
if(sabrpg[AB].namebank == "Banco do Brasil"){tpb = 0.9}
if(sabrpg[AB].namebank == "PicPay"){tpb = 1}
if(sabrpg[AB].namebank == "PayPal"){tpb = 1.1}
if(sabrpg[AB].namebank == sabrpg[BC].namebank) {
taxabanco = 0
} else {
taxabanco = tpb
}
taxageral = Number(pix)*Number(taxabanco)/100
addpix = Number(sabrpg[BC].money) + Number(Number(pix) - Number(taxageral))
delpix = Number(sabrpg[AB].money) - Number(pix)
sabrpg[BC].money = addpix
sabrpg[AB].money = delpix
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
myid = sabrpg[AB].id.split('@')[0].slice(5)
suid = sabrpg[BC].id.split('@')[0].slice(5)
imn = sabrpg[AB].nome.slice(1)
isn = sabrpg[BC].nome.slice(1)
mimn = sabrpg[AB].nome.split(imn)[0]
misn = sabrpg[BC].nome.split(isn)[0]
comprovante = `üßæ *Comprovante:*\n‚Äî\n‚Ä¢ Pix: *R$ ${Number(Number(pix) - Number(taxageral)).toFixed(2)}*\n‚Ä¢ C√≥digo ID: *${mimn.toUpperCase()+myid+misn.toUpperCase()+suid}P${dateid}X${horaid}RPG*\n‚Ä¢Ô∏è Taxa do Banco: *${taxabanco}%*\n‚Äî‚Äì\n‚Ä¢ A transfer√™ncia foi realizada √†s *${hora120}* do dia: *${datepix}*\n‚Äî‚Äî\n‚Ä¢ *Envio:* *${sabrpg[AB].nome}*\n‚Ä¢ Banco: *${sabrpg[AB].namebank}*\n‚Ä¢ ID: *R${sabrpg[AB].id.split(myid)[0]}GP${myid}BC*\n‚Äî‚Äî\n‚Ä¢ Recebimento: *${sabrpg[BC].nome}*\n‚Ä¢ Banco: *${sabrpg[BC].namebank}*\n‚Ä¢ ID: *R${sabrpg[BC].id.split(suid)[0]}GP${suid}BC*`
if(JSON.stringify(sabrpg).includes(nmrdn)) {
setTimeout(() => {
BD = sabrpg.map(d => d.id).indexOf(nmrdn)
pixdono = sabrpg[BD].money
sabrpg[BD].money = Number(pixdono) + Number(taxageral)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
}, 1000)
}
reply(comprovante)
break

case 'chavepix':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(sabrpg).includes(menc_os2)) return sandro.sendMessage(from, {text: `Usu√°rio (a) @${menc_os2.split('@')[0]} n√£o consta em nosso banco...`, mentions: [menc_os2]}, {quoted: selo})
AB = sabrpg.map(i => i.id).indexOf(sender_ou_n)
reply(`Chave encontrada/localizada! üåüüßæ\n‚Ä¢ Nome: *${sabrpg[AB].nome}*\n‚Ä¢ Chave: *${sabrpg[AB].id.split('@')[0]}*`)
break

case 'meupix':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
AB = sabrpg.map(i => i.id).indexOf(sender)
reply(`Aqui est√° sua numera√ß√£o da chave pix: *${sabrpg[AB].id.split('@')[0]}*`)
break

case 'trocarbanco':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!q) return reply(`Escolha um n√∫mero correspondente ao banco...\nEx: ${prefix+command} 2 _(Ser√£o necess√°rios R$ 2500.00 para realizar essa a√ß√£o)_\n‚Äì‚Äì\nBancos dispon√≠veis:\n‚Ä¢ Op√ß√£o - N√∫mero: [1] => Inter\n‚Ä¢ Op√ß√£o - N√∫mero: [2] => NuBank\n‚Ä¢ Op√ß√£o - N√∫mero: [3] => PagBank\n‚Ä¢ Op√ß√£o - N√∫mero: [4] => Bradesco\n‚Ä¢ Op√ß√£o - N√∫mero: [5] => Ita√∫\n‚Ä¢ Op√ß√£o - N√∫mero: [6] => Next\n‚Ä¢ Op√ß√£o - N√∫mero: [7] =>Caixa\n‚Ä¢ Op√ß√£o - N√∫mero: [8] => Santander\n‚Ä¢ Op√ß√£o - N√∫mero: [9] => Banco do Brasil\n‚Ä¢ Op√ß√£o - N√∫mero: [10] => PicPay\n‚Ä¢ Op√ß√£o - N√∫mero: [11] => PayPalÔ∏è`)
if(Number(args[0]) === 1){ var bankDD = `Inter`}; if(Number(args[0]) === 2){ var bankDD = `NuBank`}; if(Number(args[0]) === 3){ var bankDD = `PagBank`}; if(Number(args[0]) === 4){ var bankDD = `Bradesco`}; if(Number(args[0]) === 5){ var bankDD = `Ita√∫`}; if(Number(args[0]) === 6){ var bankDD = `Next`}; if(Number(args[0]) === 7){ var bankDD = `Caixa`}; if(Number(args[0]) === 8){ var bankDD = `SantanderÔ∏è`}; if(Number(args[0]) === 9){ var bankDD = `Banco do Brasil`}; if(Number(args[0]) === 10){ var bankDD = `PicPay`}; if(Number(args[0]) === 11){ var bankDD = `PayPalÔ∏è`}
AB = sabrpg.map(i => i.id).indexOf(sender)
if(Number(sabrpg[AB].money) < 2500) return reply(` Voc√™ n√£o tem saldo suficiente pra realizar esta a√ß√£o... S√£o necess√°rios R$ 2500.00 para alterar seu banco`)
MD = Number(sabrpg[AB].money) - Number(2500)
sabrpg[AB].money = MD
sabrpg[AB].namebank = bankDD
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
sandro.sendMessage(from, {text: `Troca efetuada com sucesso *@${sender.split('@')[0]}*, seu banco agora √© o(a) ${bankDD}.`, mentions: [sender]})
break

case 'trocarnome':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!q) return reply(`Digite o novo nome junto ao comando... Lembre-se que essa a√ß√£o custar√° R$ 1200.00\nEx: ${prefix+command} sandro`)
AB = sabrpg.map(i => i.id).indexOf(sender)
if(Number(sabrpg[AB].money) < 1200) return reply(` Voc√™ n√£o tem saldo suficiente pra realizar esta a√ß√£o... S√£o necess√°rios R$ 1200.00 para alterar seu nome`)
MD = Number(sabrpg[AB].money) - Number(1200)
sabrpg[AB].money = MD
sabrpg[AB].nome = q
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
sandro.sendMessage(from, {text: `Troca efetuada com sucesso @${sender.split('@')[0]}, seu nome foi alterado para ${q}.`, mentions: [sender]})
break

case 'trabalhar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
horaT = moment.tz('America/Sao_Paulo').format('HH')
dataT = moment.tz('America/Sao_Paulo').format('DD')
data2T = moment.tz('America/Sao_Paulo').format('MM')
AB = sabrpg.map(i => i.id).indexOf(sender)
if(Number(sabrpg[AB].limiteTh) === 0 && Number(sabrpg[AB].limiteTd) > 0 && Number(sabrpg[AB].hrT) === Number(horaT)) return reply(`Voc√™ j√° trabalhou agora... Volte na pr√≥xima hora.`)
//trabalho normal...
if(Number(sabrpg[AB].limiteTh) > 0 && Number(sabrpg[AB].hrT) === Number(horaT) && Number(sabrpg[AB].diaT) === Number(dataT) && Number(sabrpg[AB].mT) === Number(data2T)) {
TBALE = Math.floor(Math.random() * 50) + 40
TBLH = Number(sabrpg[AB].money) + Number(TBALE)
HT = sabrpg[AB].limiteTh - 1
TD = sabrpg[AB].limiteTd - 1
sabrpg[AB].money = TBLH
sabrpg[AB].money = TBLH
sabrpg[AB].money = TBLH
sabrpg[AB].limiteTh = HT
sabrpg[AB].limiteTd = TD
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Parab√©ns ${sabrpg[AB].nome}, voc√™ trabalhou e ganhou *R$ ${Number(TBALE).toFixed(2)}* at√© depois!ü´°`)
}
HTR = sabrpg[AB].hrT + 1
//passar para a pr√≥xima hora...
if(Number(horaT) > Number(sabrpg[AB].hrT) && Number(sabrpg[AB].limiteTd) > 0 && Number(sabrpg[AB].diaT) === Number(dataT) && Number(sabrpg[AB].mT) == Number(data2T)) {
sabrpg[AB].limiteTh = 3
sabrpg[AB].hrT = horaT
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`J√° t√° pronto pra trabalhar dnv? Digite o comando novamente enquanto eu preparo suas coisas...`)
}
if(Number(sabrpg[AB].limiteTd) < 1 && Number(sabrpg[AB].diaT) === Number(dataT)) return reply(`Voc√™ j√° trabalhou muito por hoje... Volte amanh√£!`)
//passar para o outro dia...
if(Number(dataT) > Number(sabrpg[AB].diaT) && Number(sabrpg[AB].mT) == Number(data2T)) {
sabrpg[AB].limiteTh = 3
sabrpg[AB].limiteTd = 24
sabrpg[AB].hrT = horaT
sabrpg[AB].diaT = dataT
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`${tempo} usu√°rio (a), est√° pronto para trabalhar?`)
}
//passar para o pr√≥ximo m√™s...
if(Number(data2T) > Number(sabrpg[AB].mT)) {
sabrpg[AB].limiteTh = 3
sabrpg[AB].limiteTd = 24
sabrpg[AB].hrT = horaT
sabrpg[AB].diaT = dataT
sabrpg[AB].mT = data2T
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`${tempo} usu√°rio (a), est√° pronto para iniciar o m√™s?`)
}
break

case 'minado': 
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if (isPlayMines) return reply('Uma partida j√° foi iniciada, espere acabar para iniciar uma nova...')
if (args.length < 1) return reply('*Diga a dificuldade: easy, normal, hard*')
teks = args[0].toLowerCase()
if (teks == 'easy') q_mines = 5
else if (teks == 'normal') q_mines = 8 
else if (teks == 'hard') q_mines = 12 
else return reply('Dificuldade inv√°lida...')
p_mines = await getMinesPositions(minecor, q_mines)
atp = (q_mines == 5) ? 3 : (q_mines == 8) ? 5 : (q_mines == 12) ? 8 : 5
ctw = minecor.filter(function(el) {
return !p_mines.includes(el)
})
var minframes = JSON.parse(fs.readFileSync('./database/grupos/games/minesframe.json'))
mines.push({id: from, jogador: sender, pos_mines: p_mines, qnt_mines: q_mines, selected_cord: [], cord_to_win: ctw, attempts: atp, tips_d: 0, hits: 0, minesp: minframes})
fs.writeFileSync('./database/grupos/games/mines.json', JSON.stringify(mines, null, 2))
sandro.sendMessage(from, {image: {url: minado_bomb}, caption: `üí£ *Campo Minado:*\n\t‚Ä¢ N√£o sabe como jogar? Use o comando: *${prefix}mineshelp*\n\t‚Ä¢ Caso desejar encerrar ou resetar a partida, use: *${prefix}minareset*\n-\n‚Ä¢ *N√∫meros:* 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£\n‚Ä¢ *Coluna A:* üü¶ üü¶ üü¶ üü¶ üü¶\n‚Ä¢ *Coluna B:* üü¶ üü¶ üü¶ üü¶ üü¶\n‚Ä¢ *Coluna C:* üü¶ üü¶ üü¶ üü¶ üü¶\n‚Ä¢ *Coluna D:* üü¶ üü¶ üü¶ üü¶ üü¶\n‚Ä¢ *Coluna E:* üü¶ üü¶ üü¶ üü¶ üü¶\n‚Äî\n‚Ä¢ Mina(s): *${q_mines}*\n‚Ä¢ Dificuldade: *${teks}*\n‚Ä¢ Tentativa(s): *${atp}*`})
break

case 'mina': 
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if (!isPlayMines) return reply('Nehuma partida foi iniciada no grupo atualmente!');
if (args.length < 1) return reply('Diga a dificuldade: easy, normal, hard')
if(JSON.stringify(mines[mines.map(i => i.id).indexOf(from)]).includes(sender)) {
teks = args[0].toLowerCase()
play_i = minesId.indexOf(from)
const RAN_VALOR = Math.floor(Math.random() * 10000)
for(let obj of args) {
teks = obj.toLowerCase()
if (!minecor.includes(teks)) return reply('Escolha uma coordenada')
if (mines[play_i].selected_cord.includes(teks)) return reply('Coordenada j√° selecionada!')
if (mines[play_i].pos_mines.includes(teks)) {
mines[play_i].minesp[teks] = 'üí£'; mines[play_i].attempts -= 1; mines[play_i].tips_d = 0
} else {
mines[play_i].minesp[teks] = '‚≠ê'; mines[play_i].hits += 1; mines[play_i].tips_d += 1
} mines[play_i].selected_cord.push(teks)
}
e = mines[play_i].minesp
res_teks = `üí£ *Campo Minado:*\n\t‚Ä¢ N√£o sabe como jogar? Use o comando: *${prefix}mineshelp*\n\t‚Ä¢ Caso desejar encerrar ou resetar a partida, use: *${prefix}minareset*\n‚Äî\n‚Ä¢ *N√∫meros:* 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£\n‚Ä¢ *Coluna A:* ${e.a1} ${e.a2} ${e.a3} ${e.a4} ${e.a5}\n‚Ä¢ *Coluna B:* ${e.b1} ${e.b2} ${e.b3} ${e.b4} ${e.b5}\n‚Ä¢ *Coluna C:* ${e.c1} ${e.c2} ${e.c3} ${e.c4} ${e.c5}\n‚Ä¢ *Coluna D:* ${e.d1} ${e.d2} ${e.d3} ${e.d4} ${e.d5}\n‚Ä¢ *Coluna E:* ${e.e1} ${e.e2} ${e.e3} ${e.e4} ${e.e5}\n‚Äî\n‚Ä¢ Mina(s): *${mines[play_i].qnt_mines}*\n‚Ä¢ Tentativa(s): *${mines[play_i].attempts}*\n‚Ä¢ Acerto(s): *${mines[play_i].hits}*`
if (mines[play_i].attempts <= 0) {
res_teks += `\n‚Äî‚Äî\nüòøüíî Nossa que pena, suas chances esgotaram! Voc√™ acaba de perder e a chance de receber *R$ ${Number(RAN_VALOR).toFixed(2)}* em sua carteira.`
await mines.splice(play_i, 1)
fs.writeFileSync('./database/grupos/games/mines.json', JSON.stringify(mines, null, 2))
sandro.sendMessage(from, {image: {url: minado_bomb}, caption: res_teks})
} else {
if (mines[play_i].selected_cord.length >= mines[play_i].cord_to_win.length) {
containAll = mines[play_i].cord_to_win.every(e => {
return mines[play_i].selected_cord.includes(e)
})
if (containAll) {
res_teks += `\n‚Äî‚Äî\nü•≥üåü Meus parab√©ns e como recompensa da vit√≥ria, voc√™ acaba de ganhar *R$ ${Number(RAN_VALOR).toFixed(2)}* em sua carteira.`
USER = sabrpg.map(i => i.id).indexOf(sender)
MONEYATUAL = sabrpg[AB].money
sabrpg[USER].money = Number(MONEYATUAL) + Number(RAN_VALOR);
await mines.splice(play_i, 1)
fs.writeFileSync('./database/grupos/games/mines.json', JSON.stringify(mines, null, 2))
sandro.sendMessage(from, {image: {url: minado_bomb}, caption: res_teks})
}
} else {
if (mines[play_i].tips_d >= 3) {
res_teks += `\n‚Äî\nVoc√™ tem direito a *${parseInt(mines[play_i].tips_d/3)}* Dica(s).`
fs.writeFileSync('./database/grupos/games/mines.json', JSON.stringify(mines, null, 2))
sandro.sendMessage(from, {image: {url: minado_bomb}, caption: res_teks})
} else {
fs.writeFileSync('./database/grupos/games/mines.json', JSON.stringify(mines, null, 2))
sandro.sendMessage(from, {image: {url: minado_bomb}, caption: res_teks})
}
}
}
} else return reply("J√° existe uma partida ocorrendo no grupo, n√£o √© poss√≠vel iniciar outra! Aguarde acabar a atual, para iniciar a sua partida senhor(a) :(")
break

case 'minareset': 
if(!isGroup) return reply(enviar.msg.grupo);
if(!JSON.stringify(mines).includes(from) && !SoDono) return reply("N√£o existe nenhuma partida ainda em andamento no grupo.");
nosei = SoDono ? 0 : mines.map(i => i.id).indexOf(from)
if(mines[nosei].jogador == sender || isGroupAdmins || SoDono) {
mines.splice(nosei, 1)
fs.writeFileSync('./database/grupos/games/mines.json', JSON.stringify(mines, null, 2))
reply(`O campo minado foi resetado com sucesso, a partida foi deletada.`)
} else {
reply("Somente o(s) adm(s) ou a pessoa que iniciou o jogo podem resetar.")
}
break

case 'mineshelp': 
reply(MinesHelp(prefix))
break

case 'minatips': 
if (!isPlayMines) return reply('- Nenhuma partida foi iniciada no grupo atualmente!');
if(JSON.stringify(mines[mines.map(i => i.id).indexOf(from)]).includes(sender)) {
play_i = minesId.indexOf(from)
if (mines[play_i].tips_d >= 3) {
is_columns = Math.random() < 0.5
if (!is_columns) {
m_sorted = Math.floor(Math.random() * mines[play_i].pos_mines.length + 0);
row = mines[play_i].pos_mines[m_sorted].charAt(0)
mines_row = 0
for(let obj of mines[play_i].pos_mines) {
if (obj.startsWith(row)) mines_row += 1
}
mines[play_i].tips_d -= 3
fs.writeFileSync('./database/grupos/games/mines.json', JSON.stringify(mines, null, 2))
reply(`üí° H√° *${mines_row}* bomba(s) na fileira *${row}*`)
} else {
m_sorted = Math.floor(Math.random() * mines[play_i].pos_mines.length + 0);
column = mines[play_i].pos_mines[m_sorted].charAt(1)
mines_column = 0
for(let obj of mines[play_i].pos_mines) {
if (obj.endsWith(column)) mines_column += 1
}
mines[play_i].tips_d -= 3
fs.writeFileSync('./database/grupos/games/mines.json', JSON.stringify(mines, null, 2))
reply(`üí° H√° *${mines_column}* bomba(s) na coluna *${column}*`)
}
} else return reply('*Acerte 3 ou mais vezes para ter direito a uma dica...*')
} else return reply("Voc√™ n√£o pode usar este comando agora, por motivo que est√° ocorrendo uma partida e voc√™ n√£o √© o jogador atuante das respostas. :(")
break

case 'itenspesca':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(JSON.stringify(pescaria).includes(sender)) return mentions(`Ol√° @${sender.split("@")[0]}, voc√™ j√° tem uma vara de pesca e um barco! N√£o √© poss√≠vel comprar novamente, pois voc√™ j√° possui o conjunto de pescaria.`)
if(Number(sabrpg[AB].money) < Number(150)) return reply(`üòø Voc√™ n√£o possu√≠ Golds suficiente para realizar a compra de uma vara de pescar e um barco...`)
sabrpg[AB].money -= Number(150) // Diminuir o saldo quando executar a compra!
pescaria.push(sender) // Adicionar ao json o user do id que realizou a compra do mesmo.
fs.writeFileSync("./database/usuarios/SystemRPG/pescaria.json", JSON.stringify(pescaria))
reply(`‚õµÔ∏èüé£ Voc√™ acaba de adquirir uma vara de pescar e um barco para se usar na pescaria, acabei de descontar 300 Golds em sua conta por motivo da compra de seus utens√≠lios, agora voc√™ est√° h√°bito para usar o comando: *${prefix}pescar*\n‚Äî\n‚Ä¢ Lembrando, voc√™ deve ter pelo menos 300 reais para pescar, pois quando n√£o h√° sucesso voc√™ perde um valor de at√© 200 Golds em sua Imp√©rio  Account.`)
break

case 'pescaria':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(pescaria).includes(sender)) return mention(`Ol√° @${sender.split("@")[0]}, voc√™ n√£o tem os itens nescess√°rios para usar este comando! Compre uma vara de pescar e um barco por *150 Golds*, use o comando: *${prefix}itenspesca*`)
if(Number(sabrpg[AB].money) < Number(300)) return reply(`Voc√™ n√£o possu√≠ Golds suficiente para realizar o uso deste comando, no m√≠nimo voc√™ deve ter mais de 300 Golds em sua carteira para usar...\n‚Ä¢ Use meus joguinhos e jaja voc√™ consegue esse valor, n√£o fique mal!Ô∏è`)
minu = moment.tz('America/Sao_Paulo').format('mm')
if(!JSON.stringify(rg_pescaria).includes(sender)) {
rg_pescaria.push({id: sender, minuto: minu})
fs.writeFileSync("./database/usuarios/SystemRPG/pescaria-t.json", JSON.stringify(rg_pescaria))
}
AC = rg_pescaria.map(i => i.id).indexOf(sender)
if(Number(rg_pescaria[AC].minuto) !== Number(minu)) {
rg_pescaria[AC].minuto = minu
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
CHANCE_G = Math.floor(Math.random() * 100);
reply(`- Iniciando pescaria! Aguarde *5s* para obter o resultado...`)
if(Number(CHANCE_G) > 50) {
ValorPerdido = Math.floor(Math.random() * 150); 
AB = sabrpg.map(i => i.id).indexOf(sender);
sabrpg[AB].money = Number(sabrpg[AB].money) - Number(ValorPerdido);
perdeuMessage = [
`üåäüòø Voc√™ estava desbravando os 7 mares quando apareceu o tubar√£o martelo e derrubou o barco. Todos morreram, e voc√™ perdeu *R$ ${Number(ValorPerdido).toFixed(2)}* com gastos no funeral...`,
`Depois de horas de pesca, voc√™ n√£o conseguiu o pacu nem o pirarucu! O √∫nico que aconteceu foi que voc√™ tomou no c*, acaba de perder *R$ ${Number(ValorPerdido).toFixed(2)}*! üòøüåü`,
`Voc√™ queria dar um mergulho na √°gua e achar peixes novos, mas infelizmente voc√™ acabou caindo no sono e o √∫nico que conseguiu foi areia na bunda, ainda perdeu *R$ ${Number(ValorPerdido).toFixed(2)}*! ü§£`
]
txt = perdeuMessage[Math.floor(Math.random() * perdeuMessage.length)]
} else {
ValorGanho = Math.floor(Math.random() * 500)
AB = sabrpg.map(i => i.id).indexOf(sender)
TotalMoedas = sabrpg[AB].money
sabrpg[AB].money = Number(TotalMoedas) + Number(ValorGanho);
pescarMessage = [
`üò≤üó∫ Em sua navega√ß√£o pelo manguezais, voc√™ conseguiu pescar os seguintes frutos do mar *caranguejo-u√ß√°, o camar√£o-rosa e a tainha* e voc√™ conseguiu vender ${Math.floor(Math.random() * 250)} de cada um deles, como recompensa voc√™ acaba de ganhar *R$ ${Number(ValorGanho).toFixed(2)}*.`,
`Depois de horas de pesca, finalmente voc√™ acaba de fisgar um pirarucu, o peixe era t√£o grande que foi preciso usar um guincho para tir√°-lo da √°gua. Como recompensa de sua pescada, voc√™ acaba de ganhar: *R$ ${Number(ValorGanho).toFixed(2)}*. üòå`,
`Voc√™ e seu pai foram convidados para um incr√≠vel passeio de barco, l√° voc√™s conseguiram encontrar e pescar *${Math.floor(Math.random() * 50)}* peixe(s) e marisco(s)... Como recompensa, voc√™ acaba de ganhar em sua carteira: *R$ ${Number(ValorGanho).toFixed(2)}*. ‚õµÔ∏èü§ç`,
`O seu esfor√ßo foi recompensado! Voc√™ ganhou *R$ ${Number(ValorGanho).toFixed(2)}* por ter feito a maior pescaria do dia! üòç`,
`üõíüí∞ Parab√©ns! Voc√™ vendeu v√°rios peixes no mercado da produ√ß√£o localizado em *Macei√≥, Alagoas*, como recompensa por suas vendas o seu patr√£o lhe recompensou com *R$ ${Number(ValorGanho).toFixed(2)}*.`,
`üòº Voc√™ foi convidado √† um torneio de pesca e ganhou em ${Math.floor(Math.random() * 5)}¬∞, como recompensa voc√™ acaba de ganhar: R$ ${Number(ValorGanho).toFixed(2)}*.`,
`Voc√™ foi convidado √† um torneio de pesca e saiu como campe√£o! üéâ Parab√©ns, como recompensa voc√™ acaba de ganhar: R$ ${Number(ValorGanho).toFixed(2)}*.`,
`üåü Voc√™ foi o pescador mais sortudo do dia! Ganhou R$ ${Number(ValorGanho).toFixed(2)} no sorteio desconhecido entre os pescadores.`,
`Voc√™ √© um verdadeiro profissional! Faturou em toda sua pescada R$ ${Number(ValorGanho).toFixed(2)}, Parab√©ns amigo(a)! üòçüéâ`,
`Voc√™ vendeu o seu sururu para um restaurante bem renomado na cidade de S√£o Paulo! Ganhou R$ ${Number(ValorGanho).toFixed(2)}  pelas suas vendas do dia! üò≤üåüüéâ`,
`Voc√™ estava em um cruzeiro e acabou conhecendo muitos peixes de perto! Este cruzeiro era o Titanic, mas pelo menos voc√™ conseguiu *R$ ${Number(ValorGanho).toFixed(2)}* com os peixes... ü§£üéâ`
]
txt = pescarMessage[Math.floor(Math.random() * pescarMessage.length)]
}
setTimeout(() => {sandro.sendMessage(from, {text: txt}, {quoted: info})}, 5000)
} else {
reply(`Por favor, aguarde *${60 - Number(moment.tz('America/Sao_Paulo').format('ss'))}s* para realizar uma nova pescagem...`)
}
break;

case 'minerar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
minu = moment.tz('America/Sao_Paulo').format('mm')
if(!JSON.stringify(minerar).includes(sender)) {
minerar.push({id: sender, minuto: minu})
fs.writeFileSync("./database/usuarios/SystemRPG/minerar.json", JSON.stringify(minerar))
}
AC = minerar.map(i => i.id).indexOf(sender)
if(Number(minerar[AC].minuto) !== Number(minu)) {
minerar[AC].minuto = minu
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
MINERAR_G = Math.floor(Math.random() * 100)
reply(`- Iniciando minera√ß√£o! Aguarde *5s* para obter o resultado...`)
if(Number(MINERAR_G) > 50) {
PD = ["nenhum mineral valioso", "nenhuma joia valiosa em sua busca", "nenhum diamante em sua ca√ßada", "nenhum min√©rio validoso", "nenhum cobre em sua ca√ßada", "nada de redstone em sua ca√ßada"]
txt = `üò≠ Em sua tentativa de minera√ß√£o, n√£o foi poss√≠vel evidenciar ${PD[Math.floor(Math.random()*PD.length)]}...`
} else {
MT = Math.floor(Math.random() * 2000)
AB = sabrpg.map(i => i.id).indexOf(sender)
MA = sabrpg[AB].money
sabrpg[AB].money = Number(MA) + Number(MT);
mineMessage = [
`Voc√™ estava minerando nas ilhas savitas e encontrou em seu caminho *R$ ${Number(MT).toFixed(2)}* em minerais preciosos! üí∞`, 
`üó£üí∞ Voc√™ invadiu uma mina proibida e quando estava fazendo a minera√ß√£o achou *R$ ${Number(MT).toFixed(2)}* em troca de ouro!`, 
`üíéüë∑üèª‚Äç‚ôÄÔ∏è Voc√™ invadiu uma mina de diamantes proibida, enquanto voc√™ estava fazendo a minera√ß√£o, encontrou 2 diamantes equivalentes √† *R$ ${Number(MT).toFixed(2)}*.`, 
`‚õèÔ∏èüë∑üèª‚Äç‚ôÄÔ∏è Voc√™ escavou uma mina de ouro subterr√¢nea em Minas Gerais e encontrou *R$ ${Number(MT).toFixed(2)}*!`, 
`üõ´ Em uma de suas viagens para o interior da Fl√≥rida, voc√™ embarcou uma busca ao tesouro perdido e encontrou em seu caminho um cord√£o de ouro perdido avaliado em *R$ ${Number(MT).toFixed(2)}*.`, 
`üò±üåü Voc√™ invadiu a casa do vizinho e encontrou *R$ ${Number(MT).toFixed(2)}* escavando o quintal dele.`, 
`‚õèÔ∏èüë∑üèª‚Äç‚ôÄÔ∏è‚ú®Ô∏è Voc√™ acaba de invadir em uma mina de esmeraldas desconhecida e encontrou *R$ ${Number(MT).toFixed(2)}*`, 
`üõ•Ô∏èüí∞ Voc√™ encontrou nas profundezas do oceanos, um tesouro em um navio antigo equivalente √† *R$ ${Number(MT).toFixed(2)}*.`, 
`üåü Voc√™ foi chamado para trabalhar na mina e encontrou milhares de res√≠duos! Como recompensa, voc√™ acaba de ganhar *R$ ${Number(MT).toFixed(2)}*. üò∏`, 
`Voc√™ foi chamado para trabalhar na mina e encontrou muitos tesouros perdidos!üë∑üèºüåü Como recompensa, voc√™ acaba de ganhar *R$ ${Number(MT).toFixed(2)}*.`
]
txt = mineMessage[Math.floor(Math.random() * mineMessage.length)]
}
setTimeout(() => {sandro.sendMessage(from, {text: txt}, {quoted: info})}, 5000)
} else {
reply(`Por favor, aguarde *${60 - Number(moment.tz('America/Sao_Paulo').format('ss'))}s* para realizar uma nova minera√ß√£o...`)
}
break;

case 'comprarseguranca':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!q) return reply("Escolha na loja um seguran√ßa de 1-3 para proteger o seu dinheiro e evitar assaltos")
if(!JSON.stringify(roubosrpg).includes(sender)) {
hora3 = moment.tz('America/Sao_Paulo').format('HH')
data3 = moment.tz('America/Sao_Paulo').format('DD')
roubosrpg.push({id: sender, limite: 2, hora: hora3, dia: data3, dinheiro: 0, preso: false, seguran√ßa: 20})
fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
}
if(Number(args[0]) > 0 && Number(args[0]) <= 3) {
value = Number(args[0]) * 20 + 20
BC = sabrpg.map(i => i.id).indexOf(sender)
AB = roubosrpg.map(i => i.id).indexOf(sender)
if(Number(Number(args[0]) * 600) > sabrpg[BC].money) return reply(`Voc√™ n√£o tem dinheiro suficiente para comprar esse seguran√ßa...`)
if(roubosrpg[AB].seguran√ßa == value) return reply(`Voc√™ j√° possui esse seguran√ßa...`)
comp = value > roubosrpg[AB].seguran√ßa ? `diminu√≠da em ${value - roubosrpg[AB].seguran√ßa}%` : `aumentada em ${value - roubosrpg[AB].seguran√ßa}%`
roubosrpg[AB].seguran√ßa = value
fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
RemoverGold(sender, Number(args[0]) * 600)
reply(`Seguran√ßa Lv. ${args[0]} comprado com sucesso üë®üèª‚Äç‚úàÔ∏è\nTaxa de drop: ${comp}`)
} else {
reply(`Escolha um n√∫mero correspondente a um dos seguran√ßas presentes na loja...`)
}
break

case 'treinar': case 'treino':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
treinamento = ["C√™ j√° treinou lek", "Hmm", "T√° b√£o", "Chega lek, c√™ j√° treinou", "Te acalma desgrama"]
if(JSON.stringify(roubosrpg).includes(sender)) return reply(`${treinamento[Math.floor(Math.random()*treinamento.length)]}`)
hora3 = moment.tz('America/Sao_Paulo').format('HH')
data3 = moment.tz('America/Sao_Paulo').format('DD')
roubosrpg.push({id: sender, limite: 2, hora: hora3, dia: data3, dinheiro: 0, preso: false, seguran√ßa: 20})
fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
reply("Treinamento efetuado com sucesso... Pronto para assaltar outros usu√°rios")
break

case 'assaltar': case 'furtar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(roubosrpg).includes(sender)) return reply(`Voc√™ precisa treinar primeiro... Use ${prefix}treinar`)
if(!menc_os2) return reply("Marque a pessoa quem voc√™ quer assaltar...")
if(sender.includes(menc_os2)) return reply(`N√£o √© poss√≠vel assaltar voc√™ mesmo...`)
if(!JSON.stringify(sabrpg).includes(menc_os2)) return reply(`ID do usu√°rio n√£o encontrado ou inexistente...`)
sandrobot = Math.floor(Math.random()*100)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = roubosrpg.map(i => i.id).indexOf(sender)
hora3 = moment.tz('America/Sao_Paulo').format('HH')
data3 = moment.tz('America/Sao_Paulo').format('DD')
minuto3 = moment.tz('America/Sao_Paulo').format('mm')
if(roubosrpg[AD].preso == true) return reply("Voc√™ est√° preso, portanto, n√£o √© poss√≠vel roubar...")
if(Number(sabrpg[sabrpg.map(i => i.id).indexOf(menc_os2)].money) < 10) return reply("Esse ser n√£o tem nem onde cair morto, pobre desgramado... Vai assaltar algu√©m mais rico ü§°")
if(roubosrpg[AD].limite <= 0 && Number(roubosrpg[AD].hora) === Number(hora3) && Number(roubosrpg[AD].dia) === Number(data3)) return reply(`Hmm... Agora n√£o ${sabrpg[AB].nome}, aguarde ${Number(Number(Number(hora3) + 1) * 60) - Number(Number(roubosrpg[AD].hora) * 60 + Number(minuto3))} minutos para fazer o pr√≥ximo assalto ü•∑üèª`)
if(roubosrpg[AD].limite <= 0 && Number(hora3) > Number(roubosrpg[AD].hora) && Number(roubosrpg[AD].dia) === Number(data3)) {
  roubosrpg[AD].limite = 2
  roubosrpg[AD].hora = hora3
  fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
}
if(roubosrpg[AD].limite <= 0 && Number(roubosrpg[AD].dia) !== Number(data3)) {
  roubosrpg[AD].limite = 2
  roubosrpg[AD].hora = hora3
  roubosrpg[AD].dia = data3
  fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
}
if(roubosrpg[AD].limite > 0 && roubosrpg[AD].preso == false) {
  roubosrpg[AD].limite -= 1
  fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
  if(sandrobot > 5) {
    sandrobot2 = Math.floor(Math.random()*100)
    lvx = Number(Math.floor(Math.random()*39)+1)
    totalM = lvx * 100
    totalU = sabrpg[sabrpg.map(i => i.id).indexOf(menc_os2)].money - 1
    ganho = totalM > Number(sabrpg[sabrpg.map(i => i.id).indexOf(menc_os2)].money) ? Math.floor(Math.random()*totalU) + 1 : Math.floor(Math.random()*100) * lvx
    algo = JSON.stringify(roubosrpg).includes(menc_os2) ? roubosrpg[roubosrpg.map(b => b.id).indexOf(menc_os2)].seguran√ßa : 20
    if(sandrobot2 > algo) {
      sabrpg[AB].money += ganho
      fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
      sabrpg[sabrpg.map(i => i.id).indexOf(menc_os2)].money -= ganho
      fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
      reply(`Assalto efetuado com sucesso ${sabrpg[AB].nome}, voc√™ roubou R$ ${Number(ganho).toFixed(2)} da conta ${sabrpg[sabrpg.map(i => i.id).indexOf(menc_os2)].nome}`)
    } else {
      perda1 = Number(ganho) / 2
      perda2 = perda1 >= sabrpg[AB].money ? sabrpg[AB].money : perda1
      sabrpg[AB].money -= perda2
      fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
      reply(`üöì Ops, voc√™ foi pego pela pol√≠cia e pagou ${perda1 >= sabrpg[AB].money ? `todo o seu dinheiro` : `R$ ${Number(perda2).toFixed(2)}`} para sair da cadeia... Kkkk sinto muito üòîü§ôüèΩ`)
    }
  } else {
    sandrobot3 = Math.floor(Math.random()*100)
    if(sandrobot3 > 10) {
      roubosrpg[AD].dinheiro += sabrpg[AB].money
      roubosrpg[AD].preso = true
      fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
      sabrpg[AB].money = 0
      fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
      reply(`Putz, c√™ deu muito azar... Seu caso foi passado para o governo federal, e toda a sua grana foi apreendida üòÆ‚Äçüí®\nFelizmente, c√™ pode pegar o dinheiro de volta amanh√£ usando ${prefix}retirar`)
    } else {
      if(JSON.stringify(cavalosrpg).includes(sender)) {
        R1 = cavalosrpg.map(i => i.id).indexOf(sender)
        cavalosrpg.splice(R1, 1)
        fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
      }
      if(JSON.stringify(galosrpg).includes(sender)) {
        R2 = galosrpg.map(i => i.id).indexOf(sender)
        galosrpg.splice(R2, 1)
        fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
      }
      roubosrpg[AD].preso = false
      fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
      sabrpg[AB].money = 0
      fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
      reply(`Vix mlk, deu ruim demais... Seu assalto virou caso da INTERPOL, e ela confiscou todos os seu bens junto com seu dinheiro üë®üèª‚Äç‚úàÔ∏è`)
    }
  }
}
break

case 'soltar':
if(!SoDono) return reply(enviar.msg.donosmt)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!q && !menc_os2) return
usu = menc_os2 ? menc_os2 : q + `@s.whatsapp.net`
if(!JSON.stringify(roubosrpg).includes(usu)) return reply(`‚ùå ID n√£o encontrado ou inexistente!`)
AD = roubosrpg.map(i => i.id).indexOf(menc_os2)
roubosrpg[AD].preso = false
roubosrpg[AD].dinheiro = 0
fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
reply(`Usu√°rio solto.`)
break

case 'revogar': case 'reivindicar': case 'retirar':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(roubosrpg).includes(sender)) return reply(`Voc√™ n√£o foi preso lek, aquieta o facho üòÇ`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = roubosrpg.map(i => i.id).indexOf(sender)
data3 = moment.tz('America/Sao_Paulo').format('DD')
if(roubosrpg[AD].dinheiro <= 0) return reply(`N√£o h√° dinheiro apreendido...`)
if(Number(roubosrpg[AD].dia) === Number(data3)) return reply(`Voc√™ s√≥ pode retirar o dinheiro apreendido amanh√£...`)
reply(`Pronto, aqui est√£o os R$ ${Number(roubosrpg[AD].dinheiro).toFixed(2)} que foram apreendidos pela pol√≠cia... V√™ se anda na linha mlk üë®üèª‚Äç‚úàÔ∏è`)
sabrpg[AB].money += roubosrpg[AD].dinheiro
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
roubosrpg[AD].preso = false
roubosrpg[AD].dinheiro = 0
fs.writeFileSync("./database/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg))
break

case 'comprarestabulo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
AB = sabrpg.map(i => i.id).indexOf(sender)
if(JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ j√° tem um est√°bulo em seu nome ${sabrpg[AB].nome}... üêé`)
if(Number(sabrpg[AB].money) < 500) return reply(`Voc√™ n√£o saldo suficiente para efetuar essa compra...`)
cavH = moment.tz('America/Sao_Paulo').format('HH')
cavD = moment.tz('America/Sao_Paulo').format('DD')
cavM = moment.tz('America/Sao_Paulo').format('MM')
cavalosrpg.push({id: sender,
level: 1,
quant_cavalos: 0,
setcav: `nenhum`,
countVc: 0,
capitalVc: 0,
countDc: 0,
capitalDc: 0,
corridaL: 10,
corridaH: cavH,
corridaD: cavD,
corridaM: cavM,
cavalos: []
})
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) - 500
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Parab√©ns pela compra do est√°bulo... Agora voc√™ pode comprar cavalos para correr com eles üê¥`)
break

case 'venderestabulo':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um est√°bulo primeiro... Consulte a ${prefix}lojadecavalos`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(b => b.id).indexOf(sender)
TT1 = Number(cavalosrpg[AC].cavalos.length) * 500
TT2 = Number(cavalosrpg[AC].level) * 200
TT3 = Number(cavalosrpg[AC].countVc) * 100
TT4 = Number(TT1) + Number(TT2) + Number(TT3)
cavalosrpg.splice(AC, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) + Number(TT4)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`${tempo} ${sabrpg[AB].nome}, seu est√°bulo ficou avaliado em R$ ${Number(TT4).toFixed(2)}
üìà Parab√©ns pela venda...`)
break

case 'avaliarestabulo':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um est√°bulo primeiro... Consulte a ${prefix}lojadecavalos`)
AC = cavalosrpg.map(b => b.id).indexOf(sender)
TT1 = Number(cavalosrpg[AC].cavalos.length) * 500
TT2 = Number(cavalosrpg[AC].level) * 200
TT3 = Number(cavalosrpg[AC].countVc) * 100
TT4 = Number(TT1) + Number(TT2) + Number(TT3)
txt = `„Ö§„Ö§„Ö§„Äò *AVALIANDO* „Äô
üê¥ *Pre√ßo Por Cavalos:* R$ ${Number(TT1).toFixed(2)}
üìà *Pre√ßo Por Upgrade:* R$ ${Number(TT2).toFixed(2)}
üèÜ *Pre√ßo Por Vit√≥rias:* R$ ${Number(TT3).toFixed(2)}

ü§ë *Total:* R$ ${Number(TT4).toFixed(2)}

-> Use ${prefix}venderestabulo caso queira se desfazer do mesmo.`
reply(txt)
break

case 'estabulo':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um est√°bulo primeiro... Consulte a ${prefix}lojadecavalos`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
AD = cavalosrpg[AC].cavalos.map(b => b.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
if(Number(cavalosrpg[AC].cavalos.length) <= 0) {
countcav = `\n„Äé Voc√™ n√£o possui cavalos... „Äè\n`
} else {
countcav = `\nüêé *Cavalos ‚Ü¥*`
for(c = 0; c < cavalosrpg[AC].cavalos.length; c++) {
if(cavalosrpg[AC].cavalos[c].sela == true){
selasasah = `‚úÖ`
} else { selasasah = `‚ùå` }
if(cavalosrpg[AC].cavalos[c].dor == true){
dorsasah = `‚úÖ`
} else { dorsasah = `‚ùå` }
if(cavalosrpg[AC].cavalos[c].fratura == true){
fratsasah = `‚úÖ`
} else { fratsasah = `‚ùå` }
TTCV = Number(cavalosrpg[AC].cavalos[c].viccav)/Number(Number(cavalosrpg[AC].cavalos[c].viccav)+Number(cavalosrpg[AC].cavalos[c].dercav))*100
if(Number(TTCV) > 0) {
PVCV = TTCV
} else {
PVCV = 0
}
countcav += `\n¬ª ${Number(c)+1} ¬´ Nome Do Cavalo: *${cavalosrpg[AC].cavalos[c].nomedocavalo}*\n‚Ä¢ Velocidade: *${Number(cavalosrpg[AC].cavalos[c].tipo)+1}x*\n‚Ä¢ Sela: *${selasasah}*\n‚Ä¢ Doente *${dorsasah}*\n‚Ä¢ Fraturado: *${fratsasah}*\n‚Ä¢ Vit√≥rias: *${cavalosrpg[AC].cavalos[c].viccav}*\n‚Ä¢ Percentual de Ganhos: *${Number(PVCV).toFixed(1)}%*\n‚Ä¢ Apostas: *R$ ${Number(cavalosrpg[AC].cavalos[c].contdin).toFixed(2)}*\n‚Ä¢ Ganhos: *R$ ${Number(cavalosrpg[AC].cavalos[c].lucdin).toFixed(2)}*\n`
}
}
txt = `üë§ Nome: *${sabrpg[AB].nome}*\nüíØ Level do Est√°bulo: *${cavalosrpg[AC].level}*\nüìê Tamanho Do Est√°bulo: ${Number(cavalosrpg[AC].level)*5} m¬≤*\nüßÆ Quantidade De Cavalos: *${cavalosrpg[AC].cavalos.length}*\nüîî Cavalo Selecionado: *${cavalosrpg[AC].setcav}*\n${countcav}`
sandro.sendMessage(from, {image: {url: `https://telegra.ph/file/cc1ea31504adec9ce4fa0.jpg`}, caption: txt}, {quoted: selo})
break

case 'setcavalo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
if(!q) return reply(`Diga o nome de um dos cavalos presentes no seu est√°bulo...
Ex: ${prefix+command} Patolino`)
if(!JSON.stringify(cavalosrpg[AC].cavalos).includes(q.toLowerCase())) return reply(`Este cavalo n√£o consta eu seus registros... Use o comando ${prefix}estabulo, e verifique quais cavalos voc√™ tem üê¥`)
cavalosrpg[AC].setcav = q.toLowerCase()
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`Cavalo definido com sucesso...`)
break

case 'upcavalo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
if(Number(cavalosrpg[AC].level) < 4) {
AT = Number(cavalosrpg[AC].level) * 200
if(Number(sabrpg[AB].money) < Number(AT)) return reply(`Voc√™ n√£o saldo suficiente para upar seu est√°bulo...`)
LC = cavalosrpg[AC].level
cavalosrpg[AC].level = Number(LC) + 1
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) - Number(AT)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(` Agrademos a confian√ßa na *Black Construction...* R$ ${Number(AT).toFixed(2)} foram investidos, e seu est√°bulo est√° no level ${cavalosrpg[AC].level} üê¥`)
} else { reply(`Seu est√°bulo j√° alcan√ßou o tamanho m√°ximo...`) }
break

case 'comprarcavalo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um est√°bulo primeiro... Consulte a ${prefix}lojadecavalos`)
var [cavnmr, cavnome] = q.split(`/`)
if(!cavnmr) return reply(`Escolha um cavalo...`)
if(!cavnome) return reply(`Agora d√™ um nome para seu cavalo... Ex: ${prefix+command} ${q}/Michael`)
if(Number(cavnome.length) > 20) return reply(`Este nome √© muito grande...`)
if(Number(cavnmr) === 1 || Number(cavnmr) === 2 || Number(cavnmr) === 3 || Number(cavnmr) === 4) {
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
MCV1 = Number(cavnmr) - 1
MCV2 = Number(MCV1) * 500
MCV3 = Number(MCV2) + 500
if(Number(sabrpg[AB].money) < Number(MCV3)) return reply(`Voc√™ n√£o saldo suficiente para comprar este cavalo...`)
if(JSON.stringify(cavalosrpg[AC].cavalos).includes(cavnome)) return reply(`Voc√™ j√° tem um cavalo com esse nome... Pfvr, escolha outro nome üê¥`)
if(Number(cavalosrpg[AC].cavalos.length) == Number(cavalosrpg[AC].level)) return reply(`Voc√™ atingiu o n√∫mero m√°ximo de cavalos no est√°bulo... Caso queira aumentar o tamanho do est√°bulo, use ${prefix}upcavalo`)
cavalosrpg[AC].cavalos.push({nomedocavalo: cavnome.toLowerCase(),
tipo: Number(cavnmr)-1,
sela: false,
dor: false,
fratura: false,
viccav: 0,
dercav: 0,
contdin: 0,
lucdin: 0
})
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
sabrpg[AB].money -= Number(MCV3)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Parab√©ns pela compra do cavalo... Espero que fa√ßa bom proveito com ele üê¥`)
} else {
reply(`Esse cavalo n√£o est√° dispon√≠vel para compra...`)
}
break

case 'vendercavalo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
AD = cavalosrpg[AC].cavalos.map(b => b.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
if(Number(cavalosrpg[AC].cavalos.length) <= 0) return reply(`Voc√™ n√£o possui cavalos... Acho bom comprar um üê¥`)
if(!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) return reply(`Voc√™ precisa definir o cavalo que ir√° vender... Use o comando ${prefix}setcavalo`)
if(cavalosrpg[AC].cavalos[AD].sela == true) {
HCS = 100
} else {
HCS = 0
}
if(cavalosrpg[AC].cavalos[AD].dor == true) {
HCD = 50
} else {
HCD = 0
}
if(cavalosrpg[AC].cavalos[AD].fratura == true) {
HCF = 125
} else {
HCF = 0
}
HCV = Number(Number(Number(cavalosrpg[AC].cavalos[AD].tipo)+1)*250) + Number(HCS) - Number(HCD) - Number(HCF) + Number(cavalosrpg[AC].cavalos[AD].viccav)
MB = sabrpg[AB].money
sabrpg[AB].money = Number(MB) + Number(HCV)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
cavalosrpg[AC].cavalos.splice(AD, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`Seu cavalo ficou avaliado em R$ ${Number(HCV).toFixed(2)} üê¥üìà - Parab√©ns pela venda...`)
break

case 'comprarsela':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
AD = cavalosrpg[AC].cavalos.map(b => b.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
if(Number(cavalosrpg[AC].cavalos.length) <= 0) return reply(`Voc√™ n√£o possui cavalos... Acho bom comprar um cavalo!üê¥`)
if(!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) return reply(`Voc√™ precisa definir o cavalo que ir√° correr... Use o comando ${prefix}setcavalo`)
if(cavalosrpg[AC].cavalos[AD].sela == true) return reply(`Voc√™ j√° possui uma sela neste cavalo...`)
if(Number(sabrpg[AB].money) < 200) return reply(`Voc√™ n√£o tem saldo suficiente para efetuar essa compra...`)
cavalosrpg[AC].cavalos[AD].sela = true
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) - 200
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Uma sela foi comprada para o seu alaz√£o com sucesso... üê¥`)
break

case 'cdcv3':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
AD = cavalosrpg[AC].cavalos.map(b => b.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
if(Number(cavalosrpg[AC].cavalos.length) <= 0) return reply(`Voc√™ n√£o possui cavalos... Acho bom comprar um üê¥`)
if(!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) return reply(`Voc√™ precisa definir o cavalo que ir√° correr... Use o comando ${prefix}setcavalo`)
if(cavalosrpg[AC].cavalos[AD].dor == false) return reply(`Seu cavalo n√£o est√° doente...`)
if(Number(sabrpg[AB].money) < 100) return reply(`Voc√™ n√£o tem saldo suficiente para efetuar essa compra...`)
cavalosrpg[AC].cavalos[AD].dor = false
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) - 100
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Seu cavalo recebeu uma inje√ß√£o poderosa, e est√° pronto para correr dnv... üê¥`)
break

case 'meme':
reply(`Enviando.. caso demore de mais nao consegui te enviar `)
const bufferImg = await getBuffer(`http://br1.bronxyshost.com:4360/random/loli?apikey=${SANDRO_MD}`);
sandro.sendMessage(from, {image: bufferImg}, {quoted: info});
break;
//
case 'memepv':
reply(`Enviando no pv... caso demore de mais nao consegui te enviar `)
const bufferImgo = await getBuffer(`http://br1.bronxyshost.com:4360/random/loli?apikey=${SANDRO_MD}`);
sandro.sendMessage(sender, {image: bufferImgo}, {quoted: info});
break;

case 'atadura':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
AD = cavalosrpg[AC].cavalos.map(b => b.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
if(Number(cavalosrpg[AC].cavalos.length) <= 0) return reply(`Voc√™ n√£o possui cavalos... Acho bom comprar um üê¥`)
if(!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) return reply(`Voc√™ precisa definir o cavalo que ir√° correr... Use o comando ${prefix}setcavalo`)
if(cavalosrpg[AC].cavalos[AD].fratura == false) return reply(`Seu cavalo n√£o est√° fraturado...`)
if(Number(sabrpg[AB].money) < 250) return reply(`Voc√™ n√£o tem saldo suficiente para efetuar essa compra...`)
cavalosrpg[AC].cavalos[AD].fratura = false
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) - 250
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Atadura colocada com sucesso... Agora deixe seu bichinho descansar üê¥`)
break

case 'cavalo':
case 'cavalos':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(cavalosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um cavalo primeiro... Consulte a ${prefix}lojadecavalos`)
horacav = moment.tz('America/Sao_Paulo').format('HH')
diacav = moment.tz('America/Sao_Paulo').format('DD')
mmcav = moment.tz('America/Sao_Paulo').format('MM')
AB = sabrpg.map(i => i.id).indexOf(sender)
AC = cavalosrpg.map(a => a.id).indexOf(sender)
AD = cavalosrpg[AC].cavalos.map(b => b.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
if(Number(args[0]) > Number(sabrpg[AB].money)) return reply(`Voc√™ n√£o possui saldo suficiente para efetuar essa aposta...`)
if(Number(cavalosrpg[AC].cavalos.length) <= 0) return reply(`Voc√™ n√£o possui cavalos... Acho bom comprar um üê¥`)
if(!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) return reply(`Voc√™ precisa definir o cavalo que ir√° correr... Use o comando ${prefix}setcavalo`)
if(cavalosrpg[AC].cavalos[AD].sela == false) return reply(`Voc√™ precisa comprar uma sela para seu alaz√£o...`)
if(cavalosrpg[AC].cavalos[AD].dor == true) return reply(`Seu cavalo est√° doente... Compre uma _"cdcv3"_ na loja de CAVALOS para ele voltar a correr üíâ`)
if(cavalosrpg[AC].cavalos[AD].fratura == true) return reply(`Seu cavalo est√° com a pata torcida... V√° comprar uma atadura para tratar isso üê¥`)
//passar eo limite por hora...
if(Number(cavalosrpg[AC].corridaL) === 0 && Number(cavalosrpg[AC].corridaH) === Number(horacav) && Number(cavalosrpg[AC].corridaD) === Number(diacav) && Number(cavalosrpg[AC].corridaM) === Number(mmcav)) return reply(`Seu cavalo parece cansado... Pfvr, volte mais tarde üê¥`)
//passar de uma hora pra outra...
if(Number(horacav) > Number(cavalosrpg[AC].corridaH) && Number(cavalosrpg[AC].corridaD) === Number(diacav) && Number(cavalosrpg[AC].corridaM) === Number(mmcav)) {
cavalosrpg[AC].corridaL = 20
cavalosrpg[AC].corridaH = horacav
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`Seu cavalo parece √≥timo... Voc√™ j√° pode correr dnv üê¥`)
}
//passar de um dia pro outro...
if(Number(diacav) > Number(cavalosrpg[AC].corridaD) && Number(cavalosrpg[AC].corridaM) === Number(mmcav)) {
cavalosrpg[AC].corridaL = 20
cavalosrpg[AC].corridaH = horacav
cavalosrpg[AC].corridaD = diacav
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`${tempo} ${sabrpg[AB].nome}, seu cavalo est√° pronto para correr ?`)
}
//passar de um m√™s pro outro...
if(Number(mmcav) > Number(cavalosrpg[AC].corridaM)) {
cavalosrpg[AC].corridaL = 20
cavalosrpg[AC].corridaH = horacav
cavalosrpg[AC].corridaD = diacav
cavalosrpg[AC].corridaM = mmcav
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`Um novo m√™s de vit√≥rias se inicia...`)
}
//aposta liberada...
if(Number(cavalosrpg[AC].corridaL) > 0 && Number(cavalosrpg[AC].corridaH) === Number(horacav)) {
if(!q) return reply(`A corrida j√° vai come√ßar... Fa√ßa logo a sua aposta`)
if(!Number(args[0])) return reply(`${args[0]} n√£o √© n√∫mero...`)
if(Number(args[0]) < 100) return reply(`Nossas apostas s√£o de alto n√≠vel aqui... Voc√™ n√£o pode apostar menos de R$ 100.00`)
if(Number(args[0]) > 10000) return reply(`Nossas apostas s√£o de alto n√≠vel aqui... Mas voc√™ n√£o pode apostar mais do que R$ 10000.00`)
MT = Math.floor(Math.random()*40)
if(Number(MT) === 0) {
GB = cavalosrpg.map(m => m.id).indexOf(sender)
GF = cavalosrpg[GB].cavalos.map(n => n.nomedocavalo).indexOf(cavalosrpg[GB].setcav)
cavalosrpg[AC].corridaL = 20
cavalosrpg[AC].corridaH = horacav
cavalosrpg[AC].corridaD = diacav
cavalosrpg[AC].corridaM = mmcav
cavalosrpg[GB].cavalos.splice(GF, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
acidente = [`Seu cavalo se acidentou na pista e morreu... Meus sentimentos ao alaz√£o üñ§`, `Seu cavalo adoeceu gravemente antes da corrida, e morreu... Meus p√™sames pelo seu amigo üñ§`]
reply(acidente[Math.floor(Math.random()*acidente.length)])
}
if(Number(MT) === 1) {
cavalosrpg[AC].cavalos[AD].dor = true
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`Seu cavalo adoeceu, mas felizmente, essa doen√ßa n√£o √© para a morte... V√° comprar a _"cdcv3",_ uma vacina poderosa que vai levantar o seu alaz√£o na hora üíâ`)
}
if(Number(MT) === 2) {
cavalosrpg[AC].cavalos[AD].fratura = true
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`ü•π Seu alaz√£o fraturou a patinha enquanto corria... V√° comprar uma atadura na ${prefix}lojadecavalos`)
}
if(Number(MT) > 2) {
cavt1 = SoDono ? 1 : Math.floor(Math.random()*19)+1
cavt2 = Number(cavt1) - Number(cavalosrpg[AC].cavalos[AD].tipo)
if(Number(cavt2) < 1){
var cav = 1
} else {
var cav = cavt2
}
//primeiro lugar...
if(Number(cav) === 1){
cav2 = Number(args[0]) + Number(args[0]) / 2
DCV = cavalosrpg[AC].cavalos.map(h => h.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) + Number(cav2)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
if(Number(cavalosrpg[AC].countDc) > 0) {
L1 = 1
} else {
L1 = 0
}
if(Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
LC1 = 1
} else {
LC1 = 0
}
LM = cavalosrpg[AC].corridaL
CV = cavalosrpg[AC].countVc
CCD = cavalosrpg[AC].countDc
CVC = cavalosrpg[AC].capitalVc
CVCS = cavalosrpg[AC].cavalos[DCV].viccav
CDCS = cavalosrpg[AC].cavalos[DCV].dercav
DTCS = cavalosrpg[AC].cavalos[DCV].contdin
DVCS = cavalosrpg[AC].cavalos[DCV].lucdin
cavalosrpg[AC].corridaL = Number(LM) - 1
cavalosrpg[AC].countVc = Number(CV) + 1
cavalosrpg[AC].countDc = Number(CCD) - Number(L1)
cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2)
cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS)+1
cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS) - Number(LC1)
cavalosrpg[AC].cavalos[DCV].contdin = Number(DTCS) + Number(args[0])
cavalosrpg[AC].cavalos[DCV].lucdin = Number(DVCS) + Number(cav2)
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`üêé A corrida terminou, e seu cavalo chegou em ${cav}¬∫ lugar... Voc√™ ganhou R$ ${Number(cav2).toFixed(2)}`)
};
//segundo lugar...
if(Number(cav) === 2){
DCV = cavalosrpg[AC].cavalos.map(h => h.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
cav2 = args[0]
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) + Number(cav2)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
if(Number(cavalosrpg[AC].countDc) > 0) {
L2 = 1
} else {
L2 = 0
}
if(Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
LC2 = 1
} else {
LC2 = 0
}
LM = cavalosrpg[AC].corridaL
CV = cavalosrpg[AC].countVc
CCD = cavalosrpg[AC].countDc
CVC = cavalosrpg[AC].capitalVc
CVCS = cavalosrpg[AC].cavalos[DCV].viccav
CDCS = cavalosrpg[AC].cavalos[DCV].dercav
DTCS = cavalosrpg[AC].cavalos[DCV].contdin
DVCS = cavalosrpg[AC].cavalos[DCV].lucdin
cavalosrpg[AC].corridaL = Number(LM) - 1
cavalosrpg[AC].countVc = Number(CV) + 1
cavalosrpg[AC].countDc = Number(CCD) - Number(L2)
cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2)
cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS)+1
cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS) - Number(LC2)
cavalosrpg[AC].cavalos[DCV].contdin = Number(DTCS) + Number(args[0])
cavalosrpg[AC].cavalos[DCV].lucdin = Number(DVCS) + Number(cav2)
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`üêé A corrida terminou, e seu cavalo chegou em ${cav}¬∫ lugar... Voc√™ ganhou R$ ${Number(cav2).toFixed(2)}`)
};
//terceiro lugar...
if(Number(cav) === 3){
DCV = cavalosrpg[AC].cavalos.map(h => h.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
cav2 = Number(args[0]) / 2
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) + Number(cav2)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
if(Number(cavalosrpg[AC].countDc) > 0) {
L3 = 1
} else {
L3 = 0
}
if(Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
LC3 = 1
} else {
LC3 = 0
}
LM = cavalosrpg[AC].corridaL
CV = cavalosrpg[AC].countVc
CCD = cavalosrpg[AC].countDc
CVC = cavalosrpg[AC].capitalVc
CVCS = cavalosrpg[AC].cavalos[DCV].viccav
CDCS = cavalosrpg[AC].cavalos[DCV].dercav
DTCS = cavalosrpg[AC].cavalos[DCV].contdin
DVCS = cavalosrpg[AC].cavalos[DCV].lucdin
cavalosrpg[AC].corridaL = Number(LM) - 1
cavalosrpg[AC].countVc = Number(CV) + 1
cavalosrpg[AC].countDc = Number(CCD) - Number(L3)
cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2)
cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS)+1
cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS) - Number(LC3)
cavalosrpg[AC].cavalos[DCV].contdin = Number(DTCS) + Number(args[0])
cavalosrpg[AC].cavalos[DCV].lucdin = Number(DVCS) + Number(cav2)
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`üêé A corrida terminou, e seu cavalo chegou em ${cav}¬∫ lugar... Voc√™ ganhou R$ ${Number(cav2).toFixed(2)}`)
};
//outros lugares...
if(Number(cav) > 3){
DCV = cavalosrpg[AC].cavalos.map(h => h.nomedocavalo).indexOf(cavalosrpg[AC].setcav)
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) - Number(args[0])
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
LM = cavalosrpg[AC].corridaL
CCD = cavalosrpg[AC].countDc
CDC = cavalosrpg[AC].capitalDc
CDCS = cavalosrpg[AC].cavalos[DCV].dercav
DTCS = cavalosrpg[AC].cavalos[DCV].contdin
cavalosrpg[AC].corridaL = Number(LM) - 1
cavalosrpg[AC].countDc = Number(CCD) + 1
cavalosrpg[AC].capitalDc = Number(CDC) + Number(args[0])
cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS)+1
cavalosrpg[AC].cavalos[DCV].contdin = Number(DTCS) + Number(args[0])
fs.writeFileSync("./database/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg))
reply(`üêé A corrida terminou, e seu cavalo chegou em ${cav}¬∫ lugar... Voc√™ perdeu R$ ${Number(args[0]).toFixed(2)}`)
}
}
}
break

case '1xbcbet':
case '1xbcbets':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Imperiorpg*.`)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!q) return reply(`üõí *Imp√©rio  City Bets* √© o novo sistema de apostas... Invista uma quantia entre R$ 100.00 e R$ 10000.00, e veja seu dinheiro rodar.`)
if(!Number(args[0])) return reply(`${args[0]} n√£o √© n√∫mero... üòø`)
AB = sabrpg.map(i => i.id).indexOf(sender)
minuto3 = moment.tz('America/Sao_Paulo').format('mm')
if(Number(args[0]) > Number(sabrpg[AB].money)) return reply(`Voc√™ n√£o possui dinheiro suficiente para investir`)
if(Number(args[0]) < 100) return reply(`Voc√™ deve investir no m√≠nimo R$ 100.00`)
if(Number(args[0]) > 10000) return reply(`Nossa plataforma n√£o paga mais que R$ 10000.00`)
if(!JSON.stringify(bcbet).includes(sender)) {
bcbet.push({id: sender, minuto: minuto3})
fs.writeFileSync("./database/usuarios/SystemRPG/1xbcbet.json", JSON.stringify(bcbet))
}
AC = bcbet.map(i => i.id).indexOf(sender)
if(Number(bcbet[AC].minuto) !== Number(minuto3)) {
bcbet[AC].minuto = minuto3
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
MN = Math.floor(Math.random()*100)
reply(`üìä Analisando os gr√°ficos...`)
if(Number(MN) > 15) {
PG = ["na constru√ß√£o de um est√°dio de futebol, mas a constru√ß√£o desabou...", "na bolsa de valores, mas a Bovespa caiu drasticamente...", "num leil√£o de carros, mas os carros n√£o foram leiloados...", "num leil√£o de carros, mas voc√™ sofreu um golpe...", "no seu time de futebol, mas o seu time perdeu o jogo...", "numa corrida, mas o carro bateu...", "em uma luta de UFC, e seu lutador sofreu um nocaute..."]
txt = `${II}${NomeDoBot} Bet${II} > A sua casa de apostas online!\n‚Äî\n[üî¥] - As estat√≠sticas n√£o s√£o muito favor√°veis! Voc√™ investiu ${PG[Math.floor(Math.random()*PG.length)]}\n‚Ä¢ Voc√™ perdeu, ent√£o sofreu uma perda de *R$ ${Number(args[0]).toFixed(2)}* em dinheiro.`
img = fotobot,
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) - Number(args[0])
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
} else {
GG = ["na constru√ß√£o de um est√°dio de futebol, e a constru√ß√£o foi bem sucedida...", "na bolsa de valores, e a Bovespa subiu exponencialmente...", "num leil√£o de carros, e obteve grande lucro na venda dos mesmos...", "no seu time de futebol, e o seu time venceu o jogo...", "numa corrida, e o seu carro chegou em primeiro lugar...", "em uma luta de UFC, e seu lutador derrubou o oponente facilmente..."]
VL1 = Math.floor(Math.random()*9)+1
VL2 = Number(args[0]) * Number(VL1)
txt = `${II}${NomeDoBot} Bet${II} > A sua casa de apostas online!\n‚Äî\n[üü¢] - As estat√≠sticas s√£o positivas e muito boas por sinal! Voc√™ investiu ${GG[Math.floor(Math.random()*GG.length)]}\n‚Ä¢ Voc√™ ganhou e recebeu como saldo: *R$ ${Number(VL2).toFixed(2)}*`
img = fotobot,
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) + Number(VL2)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
}
setTimeout(() => {
sandro.sendMessage(from, {image: {url: img}, caption: txt}, {quoted: selo})
}, 2000)
} else {
reply(`Aguarde *${60 - Number(moment.tz('America/Sao_Paulo').format('ss'))} seg.* para fazer novas apostas novamente.`)
}
break

case 'resetscbet':
if(!SoDono) return reply(enviar.msg.donosmt)
for(i = 0; i < sabrpg.length; i++) {
sabrpg[i].bcbet = true
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
}
reply(`Gr√°ficos restaurados para todos os ${sabrpg.length} usu√°rios do RPG`)
break

case 'comprargalinheiro':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ j√° possui um galinheiro... Consulte a ${prefix}lojadegalos para comprar galos e brigar com eles üêî`)
AB = sabrpg.map(i => i.id).indexOf(sender)
if(Number(sabrpg[AB].money) < 500) return reply(`Vc n√£o possui dinheiro suficiente para efetuar essa compra...`)
gaH = moment.tz('America/Sao_Paulo').format('HH')
gaD = moment.tz('America/Sao_Paulo').format('DD')
gaM = moment.tz('America/Sao_Paulo').format('MM')
galosrpg.push({id: sender,level: 1,galinhas: 0,durabilidade: 5,ovos: 0,countVg: 0,countDg: 0,dinVg: 0,luckVg: 0,brigaL: 15,brigaH: gaH,brigaD: gaD,brigaM: gaM,galos: []})
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
MC = sabrpg[AB].money
sabrpg[AB].money = Number(MC) - 500
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`üêî Galinheiro comprado com sucesso... Consulte ${prefix}galinheiro`)
break

case 'comprargalo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um galinheiro antes...`)
if(!q) return reply(`Defina a quantidade de galos que deseja comprar...`)
if(!Number(args[0])) return reply(`${args[0]} n√£o √© n√∫mero...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = galosrpg.map(b => b.id).indexOf(sender)
if(Number(args[0]) === 1 || Number(args[0]) === 6 || Number(args[0]) === 12) {
if(Number(Number(galosrpg[AD].galos.length) + Number(args[0])) > Number(Number(galosrpg[AD].level)*5)) return reply(`N√£o √© poss√≠vel comprar +${args[0]} ${Number(args[0]) < 2 ? 'galo' : 'galos'}, pois excede o limite de ${Number(galosrpg[AD].level)*5} galos...\n‚Ä¢ Caso queira aumentar o tamanho do galinheiro, use ${prefix}upgalo`)
if(Number(args[0]) === 1) {
if(Number(sabrpg[AB].money) < 100) return reply(`Vc n√£o possui saldo suficiente para efetuar essa compra!`)
galosrpg[AD].galos.push({vida: 4, vigalo: 0, degalo: 0})
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) - 100
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`1 galo comprado com sucesso!`)
}
if(Number(args[0]) === 6) {
if(Number(sabrpg[AB].money) < 550) return reply(`Vc n√£o possui saldo suficiente para efetuar essa compra...`)
for(i = 0; i < 6; i++) {
galosrpg[AD].galos.push({vida: 4,vigalo: 0,degalo: 0})
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
}
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) - 550
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`6 galos comprado com sucesso.`)
}
if(Number(args[0]) === 12) {
if(Number(sabrpg[AB].money) < 1000) return reply("Vc n√£o possui saldo suficiente para efetuar essa compra...")
for(i = 0; i < 12; i++) {
galosrpg[AD].galos.push({vida: 4,vigalo: 0,degalo: 0})
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
}
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) - 1000
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`12 galos comprado com sucesso`)
}
} else {
reply(`N√£o √© poss√≠vel comprar essa quantidade de galos...`)
}
break

case 'vendergalo':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um galo antes...`)
if(!q) return reply(`Defina a quantidade de galos que deseja vender... Ex:
${prefix+command} 3`)
if(!Number(args[0])) return reply(`${args[0]} n√£o √© n√∫mero...`)
if(Number(args[0]) < 1) return reply(`N√£o √© poss√≠vel vender menos que um galo...`)
if(q.includes('.')) return reply(`N√£o pode n√∫meros decimais...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = galosrpg.map(b => b.id).indexOf(sender)
if(Number(args[0]) > Number(galosrpg[AD].galos.length)) return reply(`N√£o √© poss√≠vel vender um n√∫mero maior do que a quantidade de galos em seu galinheiro...`)
if(Number(galosrpg[AD].galos.length) === 0) return reply(`Voc√™ precisa comprar um galo antes...`)
for(i = 0; i < Number(args[0]); i++) {
galosrpg[AD].galos.splice(i, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
}
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) + Number(Number(args[0]) * 50)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`${args[0]} galo${Number(args[0]) > 1 ? 's' : ''} vendido${Number(args[0]) > 1 ? 's' : ''} com sucesso, avaliado${Number(args[0]) > 1 ? 's' : ''} em R$ ${Number(Number(args[0]) * 50).toFixed(2)}`)
break

case 'comprargalinha':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um galinheiro antes...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = galosrpg.map(b => b.id).indexOf(sender)
if(!q) return reply("Coloque a quantidade de galinhas que deseja comprar...")
if(!Number(args[0])) return reply(`${args[0]} n√£o √© n√∫mero...`)
if(Number(args[0]) < 1) return reply(`N√£o √© poss√≠vel comprar menos que uma galinha...`)
if(q.includes('.')) return reply(`N√£o pode n√∫meros decimais...`)
if(Number(args[0]) > Number(Number(galosrpg[AD].level) * 2)) return reply(`N√£o √© poss√≠vel comprar +${args[0]} galinhas, pois excede o limite de ${Number(galosrpg[AD].level) * 2} galinhas em seu galinheiro...\nCaso queira aumentar o tamanho do seu galinheiro, use o comando ${prefix}upgalo`)
if(Number(sabrpg[AB].money) < Number(Number(args[0]) * 100)) return reply(`${args[0]} galinha${Number(args[0]) > 1 ? 's' : ''} ${Number(args[0]) > 1 ? "ir√£o" : "ir√°"} custar R$ ${Number(Number(args[0]) * 100).toFixed(2)}, e este valor excede o saldo monet√°rio em sua conta...`)
GG = galosrpg[AD].galinhas
galosrpg[AD].galinhas = Number(GG) + Number(args[0])
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) - Number(Number(args[0]) * 100)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`${args[0]} galinha${Number(args[0]) > 1 ? 's' : ''} comprada${Number(args[0]) > 1 ? 's' : ''} com sucesso...`)
break

case 'vendergalinha':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar uma galinha antes...`)
if(!q) return reply(`Defina a quantidade de galinhas que deseja vender... Ex:
${prefix+command} 3`)
if(!Number(args[0])) return reply(`${args[0]} n√£o √© n√∫mero...`)
if(Number(args[0]) < 1) return reply(`N√£o √© poss√≠vel vender menos que uma galinha...`)
if(q.includes('.')) return reply(`N√£o pode n√∫meros decimais...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = galosrpg.map(b => b.id).indexOf(sender)
if(Number(args[0]) > Number(galosrpg[AD].galinhas)) return reply(`N√£o √© poss√≠vel vender um n√∫mero maior do que a quantidade de galinhas em seu galinheiro...`)
if(Number(galosrpg[AD].galinhas) === 0) return reply(`Voc√™ precisa comprar uma galinha antes...`)
QG = galosrpg[AD].galinhas
galosrpg[AD].galinhas = Number(QG) - Number(args[0])
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) + Number(Number(args[0]) * 50)
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`${args[0]} galinha${Number(args[0]) > 1 ? 's' : ''} vendida${Number(args[0]) > 1 ? 's' : ''} com sucesso, avaliada${Number(args[0]) > 1 ? 's' : ''} em R$ ${Number(Number(args[0]) * 50).toFixed(2)}`)
break

case 'hackneon': case 'fpsmascote': 
case 'equipemascote': case 'txtquadrinhos': case 'ffavatar':
case 'mascotegame': case 'angelglx': case 'gizquadro': 
case 'wingeffect': case 'blackpink':
case 'girlmascote': case 'logogame':
try {
if(!q.trim()) return reply(`Digite algo, Exemplo: ${prefix+command} bronxys`);  
reply("[‚ùó] aguarde uns minutinho estou processado");
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/logos_EPH?texto=${q}&category=${command}&apikey=${API_SANDRO_MD}`);
sandro.sendMessage(from, {image: {url: ABC.resultado}}, {quoted: info}).catch(() => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro...");
}
break;

case 'cruzargg':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um galinheiro antes...`)
AD = galosrpg.map(b => b.id).indexOf(sender)
if(Number(galosrpg[AD].galos.length) === 0) return reply("Voc√™ n√£o possui galos...üêì √â necess√°rio ao menos 1 galo para cruzar.")
if(Number(galosrpg[AD].galinhas) === 0) return reply("Voc√™ n√£o possui galinhas...üêî √â necess√°rio ao menos 1 galinha para cruzar.")
if(Number(galosrpg[AD].ovos) < Number(Number(galosrpg[AD].level * 2))) {
alecruz = Math.floor(Math.random() * 100)
if(alecruz > 50) {
if(Number(galosrpg[AD].durabilidade) > 1) {
QD = galosrpg[AD].durabilidade
galosrpg[AD].durabilidade = Number(QD) - 1
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
resp = "N√£o houve sucesso no cruzamento das aves"
} else {
QG = galosrpg[AD].galinhas
galosrpg[AD].galinhas = Number(QG) - 1
galosrpg[AD].durabilidade = Number(galosrpg[AD].level)
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
resp = `Sua galinha n√£o estava pronta para o cruzamento, e acabou morrendo...${Number(galosrpg[AD].galinhas) > 0 ? `\nFelizmente, voc√™ ainda possui ${galosrpg[AD].galinhas} galinha${Number(galosrpg[AD].galinhas) > 1 ? `s` : ``} üêî` : ``}`
}
} else {
if(Number(galosrpg[AD].durabilidade) > 1) {
QD = galosrpg[AD].durabilidade
QO = galosrpg[AD].ovos
galosrpg[AD].durabilidade = Number(QD) - 1
galosrpg[AD].ovos = Number(QO) + 1
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
resp = `Sucesso, seu cruzamento gerou 1 ovo...
Use ${prefix}chocarovo para tentar a sorte`
} else {
QG = galosrpg[AD].galinhas
QO = galosrpg[AD].ovos
galosrpg[AD].galinhas = Number(QG) - 1
galosrpg[AD].ovos = Number(QO) + 1
galosrpg[AD].durabilidade = Number(galosrpg[AD].level)
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
resp = `Sucesso, seu cruzamento gerou 1 ovo, mas a sua galinha morreu no processo...${Number(galosrpg[AD].galinhas) > 0 ? `\nFelizmente, voc√™ ainda possui ${galosrpg[AD].galinhas} ${Number(galosrpg[AD].galinhas) > 1 ? `${galosrpg[AD].galinhas} galinhas` : `1 galinha`}` : ``}`
}
}
reply(`${resp}`)
} else {
reply(`Voc√™ atingiu a quantidade m√°xima de ovos em seu galinheiro... Use ${prefix}chocarovo para choca-los`)
}
break

case 'chocarovo': 
case 'chocar': 
case 'ovo':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um galinheiro antes...`)
AD = galosrpg.map(b => b.id).indexOf(sender)
if(Number(galosrpg[AD].ovos) <= 0) return reply("Voc√™ n√£o possui ovos para chocar...")
if(Number(galosrpg[AD].galos.length) >= Number(Number(galosrpg[AD].level) * 5)) return reply("Todos os seus slots j√° est√£o na quantidade m√°xima..")
aleovo = Math.floor(Math.random() * 100)
if(aleovo > 40) {
QO = galosrpg[AD].ovos
galosrpg[AD].ovos = Number(QO) - 1
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
reply("Sem sucesso ao tentar chocar o ovo!üòø")
} else {
QO = galosrpg[AD].ovos
galosrpg[AD].ovos = Number(QO) - 1
galosrpg[AD].galos.push({vida: 4, vigalo: 0, degalo: 0})
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
reply("Sucesso, ovo chocado deu origem a +1 galo para o seu galinheiro üò∏‚òùüèΩ")
}
break

case 'galinheiro':
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
setTimeout(() => {reagir(from, "üêî")}, 300)
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um galinheiro antes...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = galosrpg.map(b => b.id).indexOf(sender)
totalG = galosrpg[AD].galos
let medvida = 0
let medvic = 0
let medder = 0
for(i = 0; i < totalG.length; i++) {medvida += totalG[i].vida
if(Number(totalG[i].vigalo) > 0) {medvic += totalG[i].vigalo}
if(Number(totalG[i].degalo) > 0) {medder += totalG[i].degalo}
}
if(Number(galosrpg[AD].galos.length) > 0) {
TT1 = `${Number(Number(`${medvida}`) / Number(galosrpg[AD].galos.length)).toFixed(0)}`
TT2 = `${Number(Number(`${medvic}`) / Number(Number(galosrpg[AD].galos.length) / 2)).toFixed(0)}/${Number(Number(Number(`${medvic}`) + Number(`${medder}`)) / Number(Number(galosrpg[AD].galos.length) / 2)).toFixed(0)}`
TT3 = `${Number(Number(`${medvic}`) / Number(Number(`${medvic}`) + Number(`${medder}`)) * 100).toFixed(1)}%`
} else {
TT1 = `0`
TT2 = `0/0`
TT3 = `0.0%`
}
txt = `Ol√° *${sender.split("@")[0]}*, aqui est√° as informa√ß√µes sobre seu galinheiro!\n‚Ä¢ Seu galinheiro est√° atualmente no level: *${galosrpg[AD].level}*\n‚Äî‚Äî\n‚Ä¢ [üöß] √Årea total do Galinheiro: *${Number(galosrpg[AD].level) * Number(galosrpg[AD].level)}m¬≤*\n‚Äî‚Äî\n‚Ä¢ [üè°] *Habitantes do seu Galinheiro:*\n‚Ä¢ Quantidade de Galo(s) que voc√™ tem em seu galinheiro atualmente: *${galosrpg[AD].galos.length}/${Number(galosrpg[AD].level) * 5}*\n‚Ä¢ Quantidade de Galinha(s) que voc√™ tem em seu galinheiro atualmente: *${galosrpg[AD].galinhas}/${Number(galosrpg[AD].level) * 2}*\n‚Ä¢ Quantidade de Ovo(s) que as suas galinhas colocaram: *${galosrpg[AD].ovos}/${Number(galosrpg[AD].level) * 2}*\n‚Ä¢ Expectativa m√©dia de vida de seus bichinhos: *${TT1}*\n‚Äî‚Äî\n‚Ä¢ [üèÜ] *M√©dias e Porcentagens:*\n‚Ä¢ Sua m√©dia de vit√≥rias conquistadas por seu(s) bichinho(s): *${TT2}*\n‚Ä¢ Sua m√©dia percentual atualmente em seu galinheiro: *${TT3}*`
mention(txt);
break

case 'upgalo':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um galinheiro antes...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = galosrpg.map(b => b.id).indexOf(sender)
if(Number(sabrpg[AB].money) < Number(Number(galosrpg[AD].level) * 100)) return reply(`Voc√™ n√£o possui saldo suficiente para efetuar essa compra...`)
if(Number(galosrpg[AD].level) < 6) {
quant = galosrpg[AD].level
galosrpg[AD].level = Number(quant) + 1
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) - 1000
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`Seu galinheiro foi upado para o level ${galosrpg[AD].level} com sucesso...`)
} else {
reply(`Seu galinheiro est√° no level m√°ximo!üòø N√£o √© poss√≠vel aumentar!`)
}
break

case 'galo':
case 'galos':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isSabCityOFF) return reply(`√â nescess√°rio a ativa√ß√£o do *MODO RPG* no grupo! Use *${prefix}Modorpg*.`)
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(galosrpg).includes(sender)) return reply(`Voc√™ precisa comprar um galo antes!`)
AB = sabrpg.map(i => i.id).indexOf(sender)
AD = galosrpg.map(b => b.id).indexOf(sender)
galosH = moment.tz('America/Sao_Paulo').format('HH')
galosD = moment.tz('America/Sao_Paulo').format('DD')
galosM = moment.tz('America/Sao_Paulo').format('MM')
if(Number(galosrpg[AD].galos.length) > 0) {
if(!q) return reply(`Vix lek, c√™ caiu em uma briga ilegal de galos...üêî Fa√ßa logo a sua aposta, e venha dan√ßar!`)
if(!Number(args[0])) return reply(args[0] + " n√£o √© n√∫mero...")
if(Number(args[0]) > Number(sabrpg[AB].money)) return reply(`Voc√™ n√£o tem saldo suficiente para efetuar essa aposta...`)
if(Number(args[0]) > 100) return reply("N√£o √© poss√≠vel apostar mais que R$ 100.00 em uma briga ilegal e clandestina...")
if(Number(args[0]) < 1) return reply("Deixa de ser pobre lek")
if(Number(galosrpg[AD].brigaL) <= 0) return reply("Chega de brigas por agora... Volte mais tarde")
if(Number(galosH) > Number(galosrpg[AD].brigaH) && Number(galosrpg[AD].brigaD) === Number(galosD) && Number(galosrpg[AD].brigaM) === Number(galosM) && Number(galosrpg[AD].brigaL) <= 0) {
galosrpg[AD].brigaL = 15
galosrpg[AD].brigaH = galosH
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
reply("Bem vindo (a) de volta, hora de brigar...")
}
if(Number(galosD) > Number(galosrpg[AD].brigaD) && Number(galosrpg[AD].brigaM) === Number(galosM)) {
galosrpg[AD].brigaL = 15
galosrpg[AD].brigaH = galosH
galosrpg[AD].brigaD = galosD
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
reply(`${tempo} usu√°rio, vamos brigar ?`)
}
if(Number(galosM) > Number(galosrpg[AD].brigaM)) {
galosrpg[AD].brigaL = 15
galosrpg[AD].brigaH = galosH
galosrpg[AD].brigaD = galosD
galosrpg[AD].brigaM = galosM
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
reply(`${tempo} usu√°rio, vamos brigar?`)
}
if(Number(galosrpg[AD].brigaD) == Number(galosD) && Number(galosrpg[AD].brigaM) == Number(galosM) && Number(galosrpg[AD].brigaL) > 0) {
galosgeral = galosrpg[AD].galos
alegalo = galosgeral[Math.floor(Math.random()*galosgeral.length)]
sandrobot = Math.floor(Math.random()*100)
if(Number(sandrobot) > 30) {
if(Number(alegalo.vida) > 0) {
VD = alegalo.vida
CD = alegalo.degalo
alegalo.vida = Number(VD) - 1
alegalo.degalo = Number(CD) + 1
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
brigatxt = `Seu galo perdeu a briga!üêî Voc√™ perdeu R$ ${Number(args[0]).toFixed(2)}`
} else {
galosgeral.splice(alegalo, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
brigatxt = `O galo inimigo matou o seu galo na briga!üêî Voc√™ perdeu R$ ${Number(args[0]).toFixed(2)} ${Number(galosrpg[galosrpg.map(i => i.id).indexOf(sender)].galos.length) > 1 ? `\nFelizmente, voc√™ ainda possui ${galosrpg[galosrpg.map(i => i.id).indexOf(sender)].galos.length}` : ``}`
}
JH = galosrpg[galosrpg.map(i => i.id).indexOf(sender)].countDg
JH2 = galosrpg[galosrpg.map(i => i.id).indexOf(sender)].dinVg
JH3 = galosrpg[galosrpg.map(i => i.id).indexOf(sender)].brigaL
galosrpg[galosrpg.map(i => i.id).indexOf(sender)].countDg = Number(JH) + 1
galosrpg[galosrpg.map(i => i.id).indexOf(sender)].dinVg = Number(JH2) + Number(args[0])
galosrpg[galosrpg.map(i => i.id).indexOf(sender)].brigaL = Number(JH3) - 1
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) - Number(args[0])
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(brigatxt)
//ganhar
} else {
//vida > 0
if(Number(alegalo.vida) > 0) {
VD = alegalo.vida
CV = alegalo.vigalo
alegalo.vida = Number(VD) - 1
alegalo.vigalo = Number(CV) + 1
if(Number(alegalo.degalo) > 0) {
NN = alegalo.degalo
alegalo.degalo = Number(NN) + 1
}
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
brigawin = `Seu galo venceu a briga!üêì Voc√™ ganhou *R$ ${Number(Number(args[0])*2).toFixed(2)}*`
} else {
galosgeral.splice(alegalo, 1)
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
brigawin = ` Seu galo venceu a briga!üêì Mas foi sequestrado e morto no caminho... Felizmente, voc√™ levou o dinheiro.\n‚Ä¢ Voc√™ ganhou *R$ ${Number(Number(args[0])*2).toFixed(2)}*`
}
KL = galosrpg[galosrpg.map(i => i.id).indexOf(sender)].countVg
KL2 = galosrpg[galosrpg.map(i => i.id).indexOf(sender)].dinVg
KL3 = galosrpg[galosrpg.map(i => i.id).indexOf(sender)].luckVg
KL4 = galosrpg[galosrpg.map(i => i.id).indexOf(sender)].brigaL
galosrpg[galosrpg.map(i => i.id).indexOf(sender)].countVg = Number(KL) + 1
galosrpg[galosrpg.map(i => i.id).indexOf(sender)].dinVg = Number(KL2) + Number(args[0])
galosrpg[galosrpg.map(i => i.id).indexOf(sender)].luckVg = Number(KL3) + Number(args[0])
galosrpg[galosrpg.map(i => i.id).indexOf(sender)].brigaL = Number(KL4) - 1
fs.writeFileSync("./database/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg))
MD = sabrpg[AB].money
sabrpg[AB].money = Number(MD) + Number(args[0])
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(brigawin)
}
}
} else {
reply(`Voc√™ n√£o possui galos! üêìüòø`)
}
break

case 'cassino':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
horacass = moment.tz('America/Sao_Paulo').format('HH')
diacass = moment.tz('America/Sao_Paulo').format('DD')
mmcass = moment.tz('America/Sao_Paulo').format('MM')
AB = sabrpg.map(i => i.id).indexOf(sender)
if(Number(args[0]) > Number(sabrpg[AB].money)) return reply(`Voc√™ n√£o possui saldo suficiente para efetuar essa aposta...`)
if(Number(sabrpg[AB].limiteC) === 0 && Number(sabrpg[AB].horaC) === Number(horacass)) return reply(`*Voc√™ j√° apostou muito hoje...* Suas chances est√£o esgotadas! Por favor, volte mais tarde! üòîüò≠`)
HC = Number(sabrpg[AB].horaC) + 1
//acabou o limite...
if(Number(horacass) > Number(sabrpg[AB].horaC) && Number(sabrpg[AB].diaC) === Number(diacass) && Number(sabrpg[AB].mC) === Number(mmcass)) {
sabrpg[AB].limiteC = 20
sabrpg[AB].horaC = horacass
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`üòùü§™ Mas j√° mlk? Bora apostar ent√£o, eu ainda vou sugar muito teu dinheiro!`)
}
//passar do dia pro outro...
if(Number(sabrpg[AB].limiteC) === 0 && Number(diacass) > Number(sabrpg[AB].diaC)) {
sabrpg[AB].limiteC = 20
sabrpg[AB].horaC = horacass
sabrpg[AB].diaC = diacass
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`üí∞üåü ${tempo} caro jogador, como est√° a sua sorte hj?`)
}
//passar do m√™s pro outro...
if(Number(sabrpg[AB].limiteC) === 0 && Number(mmcass) > Number(sabrpg[AB].mC)) {
sabrpg[AB].limiteC = 30
sabrpg[AB].horaC = horacass
sabrpg[AB].diaC = diacass
sabrpg[AB].mC = mmcass
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`üìÜüó£ Primeira aposta do m√™s? Eu ainda vou sugar muito teu dinheiro todo...`)
}
if(Number(sabrpg[AB].limiteC) > 0) {
if(!q) {
return reply(`Voc√™ deve escolher uma quantia para apostar... Ex: ${prefix+command} 100 _(voc√™ estar√° apostando R$ 100.00)_`)
}
if(Number(args[0]) < 10) return reply(`N√£o √© poss√≠vel apostar menos que R$ 10.00`)
if(Number(args[0]) > 20000) return reply(`N√£o √© poss√≠vel apostar mais que R$ 20000.00! üòø`)
if(!Number(args[0])) return reply(`*${args[0]}* n√£o √© n√∫mero! üòø`)
frutasC = JSON.parse(fs.readFileSync("./arquivos/json/slots.json"));
resulC = `${frutasC[Math.floor(Math.random()*frutasC.length)]} : ${frutasC[Math.floor(Math.random()*frutasC.length)]} : ${frutasC[Math.floor(Math.random()*frutasC.length)]}`
if(resulC == `ü¶¥ : ü¶¥ : ü¶¥`) {
CC = Number(sabrpg[AB].limiteC) - 1
sabrpg[AB].money = 50
sabrpg[AB].limiteC = CC
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
reply(`‚Ä¢ *[${resulC}]* - √ìia a bruxa passando... Todo o dinheiro da sua conta agora √© dela!`)
}
if(resulC == `üç´ : üç´ : üç´`){cmrpg = 1000};
if(resulC == `üçî : üçî : üçî`){cmrpg = 600};
if(resulC == `ü•© : ü•© : ü•©`){cmrpg = 400};
if(resulC == `üçï : üçï : üçï`){cmrpg = 250};
if(resulC == `üå∂Ô∏è : üå∂Ô∏è : üå∂Ô∏è`){cmrpg = 200};
if(resulC == `üç™ : üç™ : üç™`){cmrpg = 100};
if(resulC == `üçó : üçó : üçó`){cmrpg = 80};
if(resulC == `üå≠ : üå≠ : üå≠`){cmrpg = 70};
if(resulC == `ü•û : ü•û : ü•û`){cmrpg = 60};
if(resulC == `ü•ì : ü•ì : ü•ì`){cmrpg = 50};
if((resulC == `üßá : üßá : üßá`) || (resulC == `üçû : üçû : üçû`) || (resulC == `ü•ê : ü•ê : ü•ê`) || (resulC == `ü•• : ü•• : ü••`) || (resulC == `üçé : üçé : üçé`) || (resulC == `üçå : üçå : üçå`) || (resulC == `üçì : üçì : üçì`)){cmrpg = 40};
if((resulC == `üçê : üçê : üçê`) || (resulC == `üçä : üçä : üçä`) || (resulC == `üçã : üçã : üçã`) || (resulC == `üçâ : üçâ : üçâ`) || (resulC == `üçá : üçá : üçá`) || (resulC == `üçí : üçí : üçí`) || (resulC == `üçë : üçë : üçë`) || (resulC == `ü•≠ : ü•≠ : ü•≠`) || (resulC == `üçç : üçç : üçç`) || (resulC == `ü•ù : ü•ù : ü•ù`) || (resulC == `üçÖ : üçÖ : üçÖ`) || (resulC == `ü•ë : ü•ë : ü•ë`) || (resulC == `üåΩ : üåΩ : üåΩ`) || (resulC == `ü•ï : ü•ï : ü•ï`)){cmrpg = 30}
if((resulC == `üç´ : üç´ : üç´`) || (resulC == `üçî : üçî : üçî`) || (resulC == `ü•© : ü•© : ü•©`) || (resulC == `üçï : üçï : üçï`) || (resulC == `üå∂Ô∏è : üå∂Ô∏è : üå∂Ô∏è`) || (resulC == `üç™ : üç™ : üç™`) || (resulC == `üçó : üçó : üçó`) || (resulC == `üå≠ : üå≠ : üå≠`) || (resulC == `ü•û : ü•û : ü•û`) || (resulC == `ü•ì : ü•ì : ü•ì`) || (resulC == `üßá : üßá : üßá`) || (resulC == `üçû : üçû : üçû`) || (resulC == `ü•ê : ü•ê : ü•ê`) || (resulC == `ü•• : ü•• : ü••`) || (resulC == `üçé : üçé : üçé`) || (resulC == `üçå : üçå : üçå`) || (resulC == `üçì : üçì : üçì`) || (resulC == `üçê : üçê : üçê`) || (resulC == `üçä : üçä : üçä`) || (resulC == `üçã : üçã : üçã`) || (resulC == `üçâ : üçâ : üçâ`) || (resulC == `üçá : üçá : üçá`) || (resulC == `üçí : üçí : üçí`) || (resulC == `üçë : üçë : üçë`) || (resulC == `ü•≠ : ü•≠ : ü•≠`) || (resulC == `üçç : üçç : üçç`) || (resulC == `ü•ù : ü•ù : ü•ù`) || (resulC == `üçÖ : üçÖ : üçÖ`) || (resulC == `ü•ë : ü•ë : ü•ë`) || (resulC == `üåΩ : üåΩ : üåΩ`) || (resulC == `ü•ï : ü•ï : ü•ï`)) {
var Vit√≥ria = "Voc√™ acaba de ganhar"
var CC = Number(sabrpg[AB].limiteC) - 1
var MR = sabrpg[AB].money
var TT = Number(args[0]) * Number(cmrpg)
var TC = Number(TT) + Number(args[0])
var VT = Number(MR) + Number(TC) * 5
var Ctxt = `R$ ${Number(TC).toFixed(2)}`
sabrpg[AB].money = VT
sabrpg[AB].limiteC = CC
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
} else {
var Vit√≥ria = "Voc√™ perdeu! Como puni√ß√£o, voc√™ perder√°"
var CC = Number(sabrpg[AB].limiteC) - 1
var MR = sabrpg[AB].money
var VT = Number(MR) - Number(args[0])
var Ctxt = `R$ ${Number(args[0]).toFixed(2)}`
sabrpg[AB].money = VT
sabrpg[AB].limiteC = CC
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
}
const cassino = `‚Ä¢ *[${resulC}]* - ${Vit√≥ria} ${Ctxt}` 
reply(cassino)
}
break

case 'dadoapostado':
setTimeout(() => {reagir(from, "üé≤")}, 300)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
var [d1, d2] = q.split('/')
if(!d1) return reply(`Digite o valor do dado que voc√™ acha que ir√° cair... Ap√≥s isso, coloque uma (/) ao lado e coloque uma quantia a ser apostada.\n‚Äì\nEx: ${prefix+command} 5/25 _(voc√™ estar√° apostando R$ 25.00 no dado 5)_`)
if(!d2) return reply(`Voc√™ n√£o disse quanto ir√° apostar...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
if(Number(sabrpg[AB].money) < Number(d2)) return reply(`Sua aposta √© muito alta para o saldo na sua conta... Por favor, escolha uma aposta menor.`)
if(!Number(d1)) return reply(`${d1} n√£o √© n√∫mero!`)
if(!Number(d2)) return reply(`${d2} n√£o √© n√∫mero!`)
if(Number(d2) > 100) return reply(`N√£o √© poss√≠vel apostar mais do que R$ 100.00`)
if(Number(d1) < 1 || Number(d1) > 6) return reply(`Este n√∫mero no dado n√£o existe...`)
reply(`Sorteando dado(s)!`)
dadoale = Math.floor(Math.random() * 5) + 1
enviarfigu(`./database/data/media/sticker/dados/${dadoale}.webp`)
if(Number(dadoale) === Number(d1)) {
DD = Number(sabrpg[AB].money) + Number(d2)
sabrpg[AB].money = DD
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
setTimeout(() => {
BC = sabrpg.map(i => i.id).indexOf(sender)
mention(`üéâüåü Parab√©ns *@${sender.split("@")[0]}*, voc√™ ganhou R$ *${Number(d2).toFixed(2)}* por acertar a previs√£o do dado.`)
}, 5000)
} else {
DD = Number(sabrpg[AB].money) - Number(d2)
sabrpg[AB].money = DD
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
setTimeout(() => {
BD = sabrpg.map(i => i.id).indexOf(sender)
mention(`üòø Infelizmente *@${sender.split("@")[0]}*, voc√™ perdeu *R$ ${Number(d2).toFixed(2)}* por errar a previs√£o do dado.`)
}, 5000)
}
break

case 'caracoroa': //BY : SANDRO MD V11 
setTimeout(() => {reagir(from, "ü™ô")}, 300)
if(!isModobn) return reply(mess.warningMB(prefix))
if(!JSON.stringify(sabrpg).includes(sender)) return reply(`${tempo} usu√°rio(a), novo(a) por aqui? Use *${prefix}Rgcity* para se registrar na City.`)
var [d1, d2] = q.split('/')
if(Number(d2) > 1000) return reply("Tbm n√£o pode passar de 1000 n√© meu camarada kkk")
if(d1.length == 0) return reply(`Digite o lado que a moeda que voc√™ acha que ir√° cair, ou seja, cara ou coroa... Ap√≥s isso, coloque uma (/) ao lado e coloque a quantia que voc√™ deseja apostar, por exemplo: 1.\n‚Äì\n‚Ä¢ Ex: ${prefix+command} cara/25 _(voc√™ estar√° apostando R$25.00 na posi√ß√£o do lado da cara da moeda)_`);
if(d1.toLowerCase() != "cara" && d1.toLowerCase() != "coroa") return reply("S√≥ pode cara ou coroa.")
if(!d2) return reply(`Voc√™ n√£o disse quanto ir√° apostar...`)
AB = sabrpg.map(i => i.id).indexOf(sender)
if(Number(sabrpg[AB].money) < Number(d2)) return reply(`Sua aposta √© muito alta para o saldo na sua conta... Por favor, escolha uma aposta menor.`)
if(!Number(d2)) return reply(`${d2} n√£o √© um n√∫mero!`)
if(Number(d2) > 100) return reply(`N√£o √© poss√≠vel apostar mais do que R$ 100.00`)
reply(`Sorteando... Aguarde, daqui a pouco o resultado sai!`)
ladosDaMoeda = ["coroa", "cara"];
pegarInfo = ladosDaMoeda[Math.floor(Math.random() * ladosDaMoeda.length)];
enviarfigu(`./database/data/media/sticker/caracoroa/${pegarInfo}.webp`)
if(pegarInfo === d1) {
DD = Number(sabrpg[AB].money) + Number(d2)
sabrpg[AB].money = DD
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
setTimeout(() => {
BC = sabrpg.map(i => i.id).indexOf(sender)
mention(`üéâüåü Parab√©ns *@${sender.split("@")[0]}*, voc√™ ganhou R$ *${Number(d2).toFixed(2)}* por acertar a posi√ß√£o da moeda.\n‚Ä¢ O resultado da posi√ß√£o do lado da moeda era a : *${pegarInfo}*`)}, 5000)
} else {
DD = Number(sabrpg[AB].money) - Number(d2)
sabrpg[AB].money = DD
fs.writeFileSync("./database/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg))
setTimeout(() => {
BD = sabrpg.map(i => i.id).indexOf(sender)
mention(`üòø Infelizmente *@${sender.split("@")[0]}*, voc√™ perdeu *R$ ${Number(d2).toFixed(2)}* por errar a posi√ß√£o da moeda.\n‚Ä¢ O resultado da posi√ß√£o do lado da moeda era a : *${pegarInfo}*`)}, 5000)
}
break

case 'lojas_sc':
case 'lojas':
mention(`${tempo} *@${sender.split("@")[0]}*, bem vindo a minha loja de RPG!\n‚Äî‚Äì\n‚ù±‚ù± Lojas de Cavalos: *${prefix}lojadecavalos*\n‚ù±‚ù± Lojas de Galos: *${prefix}lojadegalos*\n‚Äî‚Äì\nüõçÔ∏è *Produtos:*\n*1.* Comprar Seguran√ßa *[R$ 600.00]*\n‚ùë‚Üí ${prefix}comprarseguran√ßa 1 | Voc√™ consegue *40% de prote√ß√£o*!\n*2.* Comprar Seguran√ßa *[R$ 1200.00]*\n‚ùë‚Üí ${prefix}comprarseguran√ßa 2 | Voc√™ consegue *60% de prote√ß√£o*!\n*3.* Comprar Seguran√ßa *[R$ 1800.00]*\n‚ùë‚Üí ${prefix}comprarseguran√ßa 3 | Voc√™ consegue *80% de prote√ß√£o*!`)
break

case 'lojadecavalos':
setTimeout(() => {reagir(from, "üêé")}, 300)
if(JSON.stringify(cavalosrpg).includes(sender)) {
AC = cavalosrpg.map(a => a.id).indexOf(sender)
if(Number(cavalosrpg[AC].level) < 4) {
uparcavalo = `R$ ${Number(Number(cavalosrpg[AC].level)*200).toFixed(2)}`
} else {
uparcavalo = `Lv. M√°x`
}
} else {
uparcavalo = `R$ 200.00`
}
txt = `${tempo} *@${sender.split("@")[0]}*, Seja bem vindo(a) √† loja de cavalos:\n‚Äî\n‚ù±‚ù± ${prefix}comprarestabulo *[R$ 500.00]* - De in√≠cio √© necess√°rio voc√™ comprar.\n‚ù±‚ù± ${prefix}upcavalo - Fa√ßa um upload em seu(s) cavalo(s). *[${uparcavalo}]*\n‚Äî\nüêé *Comprar Cavalos:*\n‚ù±‚ù± ${prefix}comprarcavalo 1 *[R$ 500.00]*\n‚ù±‚ù± ${prefix}comprarcavalo 2 *[R$ 1000.00]*\n‚ù±‚ù± ${prefix}comprarcavalo 3 *[R$ 1500.00]*\n‚ù±‚ù± ${prefix}comprarcavalo 4 *[R$ 2000.00]*\n‚Äî\nüåæ *Equipamentos:*\n‚ù±‚ù± ${prefix}comprarsela *[R$ 200.00]* - Compre uma sela para o seu cavalo.\n‚ù±‚ù± ${prefix}cdcv3 *[R$ 200.00]* - Verifique o status atual de seu alaz√£o.\n‚ù±‚ù± ${prefix}atadura *[R$ 250.00]* - Caso tenha alguma fratura em alaz√£o.\n‚Äî\nüè™ *Vendas:*\n‚ù±‚ù± Para vender seu alaz√£o, use o comando ao lado: *${prefix}vendercavalo*\n‚ù±‚ù± Para vender seu est√°bulo, use o comando ao lado: *${prefix}venderestabulo*`
mention(txt)
break

case 'lojadegalos':
setTimeout(() => {reagir(from, "üêî")}, 300)
if(JSON.stringify(galosrpg).includes(sender)) {
AD = galosrpg.map(b => b.id).indexOf(sender)
if(Number(galosrpg[AD].level) < 6) {
LV = `R$ ${Number(galosrpg[AD].level) * 100}.00`
} else {
LV = `Lv. M√°x`
}
PC = LV
} else {
PC = `R$ 100.00`
}
txt = `*${tempo}* @${sender.split('@')[0]}, Seja bem vindo(a) √† loja de galos:\nüêìüè∑ *Loja de Galos:*\n‚ù±‚ù± ${prefix}comprargalinheiro *[R$ 500.00]*\n‚ù±‚ù± ${prefix}comprargalo 1 *[R$ 100.00]*\n‚ù±‚ù± ${prefix}comprargalo 6 *[R$ 550.00]*\n‚ù±‚ù± ${prefix}comprargalo 12 *R$ 1000.00]*\n‚ù±‚ù± ${prefix}comprargalinha *[R$ 100.00]*\n‚ù±‚ù± ${prefix}upgalo *[${PC}]*\n‚Äì‚Äì\nüêìüè∑ *Vendas:*\n‚ù±‚ù± Venda de Galos: *${prefix}vendergalo (quantidade)*\n‚ù±‚ù± Venda de Galinhas: *${prefix}vendergalinha (quantidade)*`
mention(txt)
break

case 'image_viewonce':
sandro.sendMessage(from, {image: {url: fotobot}, viewOnce: true}, {quoted: info});
break;

case 'audio_viewonce':
sandro.sendMessage(from, {audio: {url: `https://yurimodz-apis.xyz/api/dl/ytaudio?url=https://youtu.be/o4lB81AnDSM?si=9zXDqAWwDNPDPkTU&apikey=${API_KEY_sandro}`}, mimetype: "audio/mpeg", viewOnce: true}, {quoted: info});
break;

case 'video_viewonce':
sandro.sendMessage(from, {video: {url: `https://yurimodz-apis.xyz/api/dl/ytvideo?url=https://youtu.be/o4lB81AnDSM?si=9zXDqAWwDNPDPkTU&apikey=${API_KEY_sandro}`}, viewOnce: true}, {quoted: info});
break;

case 'text_newsletter':
sandro.sendMessage(from, {text: "Testando mensagem...", contextInfo: {forwardingScore: 1000000, isForwarded: true, forwardedNewsletterMessageInfo: {newsletterJid: "120363173003902460@newsletter"}}}, {quoted: info});
break;



//=======(FIM-EFEITOS-MARCAR)=========\\

default:

//===(CR√âDITOS : SANDRO MD V11)==\\

if(isGroup && isBotGroupAdmins && !isGroupAdmins) {
if(isAntiCtt || Antiloc || isAnticatalogo) {
if(type === 'contactMessage' || type === 'contactsArrayMessage' || type === 'locationMessage' || type === 'productMessage') {
if(isGroupAdmins) return sandro.sendMessage(from, {text: mess.antisRandomMessage()}, {quoted: info})
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify(groupMembers).includes(sender)) return
sandro.groupParticipantsUpdate(from, [sender], 'remove')
clear = `üóë${"\n".repeat(255)}üóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™·¥Ö·¥Ä* ‚úÖ`
sandro.sendMessage(from, {text: clear, contextInfo : { forwardingScore: 500, isForwarded:true}})
sandro.sendMessage(from, {text: 'Reporte aos adminstradores do grupo sobre o ocorrido.', mentions: groupAdmins})
}}}

if(isGroup && isAntiFlood && !SoDono && !isPremium && !isnit && isBotGroupAdmins && !isGroupAdmins && !isBot) { 
if(isLimitec == null){
var limitefl = limitefll.limitefl
} else {
var limitefl = isLimitec
}
if(budy.length >= limitefl){
setTimeout( () => {
return reply(mess.charactersAnti())
console.log(colors.red('Deram spam de caracteres..'))
}, 100)
setTimeout(async () => {
if(IS_DELETE) {
setTimeout(() => {
sandro.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}
if(!JSON.stringify(groupMembers).includes(sender)) return  
sandro.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
}
}

//INICIO DE COMANDOS SEM PREFIXO
switch(testat){
}

const EnvAudio_SMP = async (direcao, nome1, nome2, nome3, nome4, nome5) => {
bla = [nome1, nome2, nome3, nome4, nome5]
for ( i of bla) {
if(i == undefined) return  
if(messagesC.includes(i)) {
sandro.sendMessage(from, {audio: {url: direcao}, mimetype: "audio/mpeg", ptt:true})
}}}

const EnvAudio2_SMP = async (direcao, nome1, nome2, nome3, nome4, nome5) => {
bla = [nome1, nome2, nome3, nome4, nome5]
for ( i of bla) {
if(i == undefined) return  
if(messagesC.includes(i)) {
sandro.sendMessage(from, {audio: {url: direcao}, mimetype: "audio/mpeg", ptt:true})
}}}

const EnvTXT_SMP = async (texto, nome1, nome2, nome3, nome4, nome5) => {
bla = [nome1, nome2, nome3, nome4, nome5]
for ( i of bla) {
if(i == undefined) return  
if(messagesC.includes(i)) {
sandro.sendMessage(from, {text: texto})
}}}

const EnvAudio2_GTTS = async (lingua, texto, txt1, txt2, txt3, txt4, txt5) => {
bla = [txt1, txt2, txt3, txt4, txt5]
for ( i of bla) {
if(i == undefined) return
if(budy2.includes(i)) {
var gtt = require('./arquivos/funcoes/gtts')(lingua)
ranm = getRandom('.mp3')
rano = getRandom('.ogg')
gtt.save(ranm, texto, function() {
exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
DLT_FL(ranm)
buffer = fs.readFileSync(rano)
sandro.sendMessage(from, {audio: buffer, ptt:true}, {quoted: selo})
DLT_FL(rano)
})
})
}}}

if(JSON.stringify(music).includes(from)) {
AB = music.map(i => i.groupId).indexOf(from)
if(JSON.stringify(music[AB].usus).includes(sender)) {
BC = music[AB].usus.map(i => i.id).indexOf(sender)
if(budy2.toLowerCase().replace("√°", "a") === `audio` && isGroup) {
reagir(from, "‚úÖÔ∏è")
link = music[AB].usus[BC].urlAudio.replace("#sandroKey#", API_KEY_sandro)
music[AB].usus.splice(BC, 1)
fs.writeFileSync("./database/data/music.json", JSON.stringify(music, null, 2))
try {
sandro.sendMessage(from, {audio: {url: link}, mimetype: "audio/mpeg"}, {contextInfo: {participant: sender, remoteJid: from}}).catch(e => {reply(mess.error())})
} catch (e) {
reply(mess.error())
}
}
if(budy2.toLowerCase().replace("√≠", "i") === `video` && isGroup) {
reagir(from, "‚úÖÔ∏è")
link = music[AB].usus[BC].urlVideo.replace("#sandroKey#", API_KEY_sandro)
music[AB].usus.splice(BC, 1)
fs.writeFileSync("./database/data/music.json", JSON.stringify(music, null, 2))
try {
sandro.sendMessage(from, {video: {url: link}, mimetype: "video/mp4"}, {contextInfo: {participant: sender, remoteJid: from}}).catch(e => {
reply(mess.error())})
} catch (e) {
reply(mess.error())
}}
if(budy2.toLowerCase() === `doc` && isGroup) {
reagir(from, "‚úÖÔ∏è")
link = music[AB].usus[BC].urlAudio.replace("#sandroKey#", API_KEY_sandro)
nome = music[AB].usus[BC].title
music[AB].usus.splice(BC, 1)
fs.writeFileSync("./database/data/music.json", JSON.stringify(music, null, 2))
try {
sandro.sendMessage(from, {document: {url: link}, fileName: nome+'.mp3', mimetype: "audio/mpeg"}, {contextInfo: {participant: sender, remoteJid: from}}).catch(e => {
reply(mess.error())})
} catch (e) {
reply(mess.error())
}}}}

var hora_sla = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

const cmdsticker = Object.keys(info.message)[0] == "stickerMessage" ? info.message.stickerMessage.fileSha256.toString('base64') : ""

switch (cmdsticker) {
 
case '42,109,136,252,54,54,117,34,1,79,251,75,13,1,146,67,235,130,95,88,130,240,59,117,201,146,212,108,23,140,227,223':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
sandro.groupSettingUpdate(from, 'not_announcement')
break}

switch (cmdsticker) {

case '179,213,105,251,171,115,119,247,203,199,222,213,27,15,190,112,118,93,89,163,254,73,208,251,66,95,98,98,38,164,152,43':
if(!isGroup) return reply(enviar.msg.grupo)
if(!isGroupAdmins) return reply(enviar.msg.adm)
if(!isBotGroupAdmins) return reply(enviar.msg.Badmin)
sandro.groupSettingUpdate(from, 'announcement')
break} 

//==================== COME√áO DO AUTO RESPOSTA

if(isAutorepo) {

if(budy2.includes("bot corno")){
if(info.key.fromMe) return 
reply("Corno √© voc√™, seu animal")
}

if (budy.includes("karalho") || budy.includes("Karalho") || budy.includes("KARALHO")) {
    const respostasKaralho = [
        "Eita, que palavr√£o pesado!",
        "Cuidado com as palavras, hein?",
        "Olha a educa√ß√£o, meu amigo!",
        "Calma a√≠! Vamos manter a paz.",
        "Precisa disso? Vamos conversar direito!"
    ];

    // Seleciona uma resposta aleat√≥ria
    const respostaAleatoria = respostasKaralho[Math.floor(Math.random() * respostasKaralho.length)];
    
    reply(respostaAleatoria);
}

if (budy.includes("porra") || budy.includes("Porra") || budy.includes("PORRA")) {
    const respostasPorra = [
        "Eita, olha o palavr√£o a√≠!",
        "Porra? Vamos pegar leve nas palavras!",
        "Que boca suja, hein?",
        "Calma l√°! T√° bravo por qu√™?",
        "Olha o respeito, meu amigo!"
    ];

    // Seleciona uma resposta aleat√≥ria
    const respostaAleatoria = respostasPorra[Math.floor(Math.random() * respostasPorra.length)];
    
    reply(respostaAleatoria);
}

if (budy.includes("amor") || budy.includes("Amor") || budy.includes("AMOR")) {
    const respostasAmor = [
        "O amor √© lindo, n√£o √©?",
        "Ah, o amor! Sempre t√£o inspirador.",
        "Sem amor, o mundo n√£o seria o mesmo.",
        "Falar de amor aquece o cora√ß√£o.",
        "O amor √© a resposta para tudo!"
    ];

    // Seleciona uma resposta aleat√≥ria
    const respostaAleatoria = respostasAmor[Math.floor(Math.random() * respostasAmor.length)];
    
    reply(respostaAleatoria);
}

if (budy.includes("Toma no cu") || budy.includes("TOMA NO CU") || budy.includes("Vai toma no cu")) {
    const respostasOfensivas = [
        "Olha o n√≠vel, hein?",
        "Respeita aqui, por favor.",
        "Eita! Que agressividade!",
        "Vamos manter a calma, t√°?",
        "Precisa falar assim? Paz √© melhor!"
    ];

    // Seleciona uma resposta aleat√≥ria
    const respostaAleatoria = respostasOfensivas[Math.floor(Math.random() * respostasOfensivas.length)];
    
    reply(respostaAleatoria);
}

if(budy.includes("Puta") || budy.includes("PUTA") || budy.includes("PUTONA") || budy.includes("puta")) {
    const respostasPalavrao = [
        "Que boca suja, hein?",
        "Olha o palavr√£o a√≠!",
        "Pega leve com as palavras!",
        "Eita! Vamos manter o respeito.",
        "Voc√™ fala assim com todo mundo?"
    ];

    // Seleciona uma resposta aleat√≥ria
    const respostaAleatoria = respostasPalavrao[Math.floor(Math.random() * respostasPalavrao.length)];
    
    reply(respostaAleatoria);
}

if(budy.includes("Sandro") || budy.includes("sandro") || budy.includes("SANDRO") || budy.includes("sandroo")) {
    const mensagens = [
        "O Sandro √© meu criador.",
        "Sandro √© incr√≠vel! Sempre cuida de mim.",
        "Se tem algu√©m especial, esse algu√©m √© o Sandro.",
        "Eu s√≥ existo gra√ßas ao Sandro.",
        "O Sandro sabe como fazer as coisas acontecerem!"
    ];

    // Seleciona uma mensagem aleat√≥ria
    const mensagemAleatoria = mensagens[Math.floor(Math.random() * mensagens.length)];
    
    reply(mensagemAleatoria);
}

if (budy2.includes("boa noite")) {
    const mensagens = [
        "Boa noite! Durma bem e sonhe bonito!",
        "Espero que voc√™ tenha uma noite tranquila!",
        "Boa noite! Que seus sonhos sejam doces!",
        "Durma bem! Amanh√£ ser√° um novo dia cheio de oportunidades.",
        "Boa noite! Aproveite para descansar e recarregar as energias."
    ];

    // Seleciona uma mensagem aleat√≥ria
    const mensagemAleatoria = mensagens[Math.floor(Math.random() * mensagens.length)];

    reply(mensagemAleatoria);
}

if (budy2.includes("boa tarde")) {
    const mensagens = [
        "Boa tarde! Espero que sua tarde seja cheia de paz e realiza√ß√µes!",
        "Boa tarde! Aproveite cada momento e fa√ßa desta tarde algo especial.",
        "Boa tarde! Que a energia do dia continue te motivando at√© o fim do dia.",
        "Boa tarde! Que sua tarde seja leve e cheia de boas surpresas.",
        "Boa tarde! Continue firme, o dia ainda reserva coisas incr√≠veis para voc√™!"
    ];

    // Seleciona uma mensagem aleat√≥ria
    const mensagemAleatoria = mensagens[Math.floor(Math.random() * mensagens.length)];

    reply(mensagemAleatoria);
}

if (budy2.includes("bom dia")) {
    const mensagens = [
        "Bom dia! Que seu dia seja repleto de alegrias e realiza√ß√µes!",
        "Bom dia! Aproveite cada momento e fa√ßa de hoje um dia especial.",
        "Bom dia! Que a luz do sol ilumine seu caminho e traga boas energias!",
        "Bom dia! Sorria e espalhe coisas boas ao seu redor!",
        "Bom dia! Um novo dia, uma nova chance de conquistar seus sonhos."
    ];

    // Seleciona uma mensagem aleat√≥ria
    const mensagemAleatoria = mensagens[Math.floor(Math.random() * mensagens.length)];

    reply(mensagemAleatoria);
}

if(budy.includes("vamos namorar") || budy.includes("Vamos namorar") || budy.includes("namorar cmg") || budy.includes("que namorar comigo") || budy.includes("Quer namorar cmg") || budy.includes("Namorar cmg")){
if (SoDono) {
sandro.sendPresenceUpdate('composing', from)
audiomenu = await fs.readFileSync("./database/audios/gracinha.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
} else {
sandro.sendPresenceUpdate('composing', from)
audiomenu = await fs.readFileSync("./database/audios/possibilidade.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await sleep (5000) 
reply(`Mais prefiro o ${NickDono} msm, me desculpa a√≠, quem sabe na pr√≥xima?`)
sleep (7000)
blabla = fs.readFileSync('./database/sticker/yurimodz.webp')
sandro.sendMessage(from, { sticker: blabla },{ quoted: selo})
}
}

if(budy.includes("te amo") || budy.includes("Te amo") || budy.includes("TE AMO") || budy.includes("te amo")){
blabla = fs.readFileSync('./database/sticker/teamo.webp')
sandro.sendMessage(from, { sticker: blabla },{ quoted: selo})
await sleep (1000)
audiomenu = await fs.readFileSync("./database/audios/teamo.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("meu amor") || budy.includes("Meu amor")){
audiomenu = await fs.readFileSync("./database/audios/beijo.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("tudo bem") || budy.includes("Tudo bem") || budy.includes("TUDO BEM") || budy.includes("tudo bem")) { 
blabla = fs.readFileSync('./database/sticker/bem.webp')
sandro.sendMessage(from, {sticker: blabla}, {quoted: selo})
await sleep (2500)
audiomenu = await fs.readFileSync("./database/audios/bem.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("pica") || budy.includes("meu pau") || budy.includes("rola") || budy.includes("Pika")){
audiomenu = await fs.readFileSync("./database/audios/pau.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("gostosa") || budy.includes("Gostosa") || budy.includes("GOSTOSA") || budy.includes("Totosa")){
if (SoDono) {
audiomenu = await fs.readFileSync("./database/audios/gostosa.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
blabla = fs.readFileSync('./database/sticker/gostosamestre.webp')
sandro.sendMessage(from, {sticker: blabla}, {quoted: info})
} else if (!isGroupAdmins) {
blabla = fs.readFileSync('./database/sticker/gostosa.webp')
sandro.sendMessage(from, {sticker: blabla}, {quoted: selo})
} else {
audiomenu = await fs.readFileSync("./database/audios/gostosa1.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}
}

if(budy.includes("estou triste") || budy.includes("Estou triste") || budy.includes("ESTOU TRISTE") || budy.includes("eu estou triste")){
bla = fs.readFileSync("./database/sticker/triste.webp")
sandro.sendMessage(from, {sticker: bla}, {quoted: selo})
await sleep (4000)
sandro.sendPresenceUpdate('composing', from)
reply("POIS BEM N FIQUE ASSIM,OUVE ESSA M√öSICA PRA TE ALEGRAR")
audiomenu = await fs.readFileSync("./database/audios/sozinho.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("corno") || budy.includes("Corno")){
audiomenu = await fs.readFileSync("./database/audios/corno.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}


if(budy.includes("Dono da sandrozinha") || budy.includes("dono da sandro") || budy.includes("Dono da sandro") || budy.includes("dono da sandrozinha")) {
reply("Enviando o contato do meu dono...")
await sleep(1500)
                let vcard =
                    'BEGIN:VCARD\n'
                    + 'VERSION:3.0\n'
                    + 'N:;SANDRO MD V11;;;\n'
                    + 'FN:SANDRO MD V11\n'
                    + 'item1.TEL;waid=553195595444:553195595444\n'
                    + 'item1.X-ABLabel:Celular\n'
                    + 'END:VCARD'
    await sandro.sendMessage(from, 
                { 
                contacts: { 
                displayName: 'SANDRO MD V11', 
                contacts: [{vcard}] 
                }
                })
                await sandro.sendMessage(from, {text: `*üõ°Ô∏è O contato dele caso voc√™ use imune: wa.me/+553195595444*`}, {quoted: info})
}


if(budy.includes("nada n√£o") || budy.includes("n√© nada n√£o") || budy.includes("N√â NADA N√ÉO") || budy.includes("nada n") || budy.includes("Nada n√£o")) {
bla = fs.readFileSync("./database/sticker/teodeio.webp")
sandro.sendMessage(from, {sticker: bla}, {quoted: selo})
await sleep (2000)
sandro.sendPresenceUpdate('composing', from)
reply("ENT√ÉO PARA DE ME CHAMAR PORRA")
}

if(budy.includes("hentai") || budy.includes("Hentai") || budy.includes("HENTAI") || budy.includes("hentai") || budy.includes("hentaii")){
blabla = fs.readFileSync('./database/sticker/hentai.webp')
sandro.sendMessage(from, { sticker: blabla },{ quoted: selo})
}

if(budy.includes("vadia") || budy.includes("Vadia") || budy.includes("VADIA") || budy.includes("vadia")) { 
audiomenu = await fs.readFileSync("./database/audios/vadia.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await sleep (1500)
bla = fs.readFileSync("./database/sticker/vadia2.webp")
sandro.sendMessage(from, {sticker: bla}, {quoted: info})
}

if(budy.includes("au au") || budy.includes("Au au") || budy.includes("AU AU") || budy.includes("Auuu") || budy.includes("Quer namorar cmg")){
audiomenu = await fs.readFileSync("./database/audios/auau.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await sleep (2000) 
blabla = fs.readFileSync('./database/sticker/auau.webp')
sandro.sendMessage(from, { sticker: blabla },{ quoted: selo})
}

if(budy.includes("bot chato") || budy.includes("Bot chato") || budy.includes("Sua chata") || budy.includes("Chata")){ 
bla = fs.readFileSync("./database/sticker/chato.webp")
sandro.sendMessage(from, {sticker: bla}, {quoted: info})
await sleep (1000)
audiomenu = await fs.readFileSync("./database/audios/chato.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("gay") || budy.includes("Gay")){
audiomenu = await fs.readFileSync("./arquivos/audio/audio1.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("maconha") || budy.includes("Maconha") || budy.includes("Maconheiro")){
audiomenu = await fs.readFileSync("./arquivos/audio/audio2.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("bugado") || budy.includes("Bugado")){
audiomenu = await fs.readFileSync("./arquivos/audio/bug2.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("pix") || budy.includes("Pix")){
audiomenu = await fs.readFileSync("./arquivos/audio/audio4.mp3")
sandro.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
}

if(budy.includes("fofo") || budy.includes("Fofo") || budy.includes("FOFO") || budy.includes("fofo")){
blabla = fs.readFileSync('./database/sticker/fofa.webp')
sandro.sendMessage(from, { sticker: blabla },{ quoted: selo})
await sleep (2000) 
reply("N√£o me chama de fofo voc√™ que √© fofa(o)")
}

 if(budy.includes("Puta") || budy.includes("puta")) {{}
bla = fs.readFileSync("./database/sticker/puta.webp")
sandro.sendMessage(from, {sticker: bla}, {quoted: info})
}
}

if(messagesC.includes('exec')) {
if(!SoDono && !isnit && !issupre && !ischyt) return
try{
paramsQuoted = info.message.extendedTextMessage.contextInfo.quotedMessage.conversation || info.message.extendedTextMessage.contextInfo.quotedMessage.extendedTextMessage.text;	
return eval(`${paramsQuoted}`)
console.log(`[EXEC]~> ${paramsQuoted}`)
}catch(e){
reply(e)
}
}

//=========[--ANTI PALAVR√ÉO --]==========\\

if(isGroup && isPalavrao && isBotGroupAdmins && !SoDono && !isGroupAdmins) {
 if(dataGp[0].antipalavrao.palavras.some(i => budy2.includes(i.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "")))) {
setTimeout(() => {
if(!JSON.stringify(groupMembers).includes(sender)) return
sandro.groupParticipantsUpdate(from, [sender], 'remove')
setTimeout(() => {
sandro.sendMessage(from, {delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
}, 2000)
sandro.sendMessage(from, {text: mess.permissionDenied_rUser()})
}
}

 //===============(SIMIH-1)===============\\
    
if (isGroup && isSimi && budy != undefined) {
if(type == 'imageMessage') return 
if(type == 'audioMessage') return 
if(type == 'stickerMessage') return   
if(info.key.fromMe) return 
muehe = await simih(budy)
sandro.sendMessage(from, {text: muehe}, {quoted: info}).catch(e => {
reply("N√£o entendi! Por favor, me explique!") 
})
}


if (isSimi2 && !isCmd && isGroup) {
if (type == 'conversation' || type == 'extendedTextMessage') {
if (info.key.fromMe) return
if (type == 'extendedTextMessage' && prefix.includes(info.message.extendedTextMessage.contextInfo.quotedMessage.conversation[0])) return
insert(type, info)
const sami = await response(budy)
if (sami) sandro.sendMessage(from, {text: sami}, {quoted: info})
}
}

//========================================\\

hora2 = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

if (isCmd) {
    if (command === '') { // Verifica se o comando est√° vazio (apenas o prefixo foi enviado)
        reply(`·¥ò·¥Ä Ä·¥Ä ·¥úÍú±·¥Ä Ä ·¥è Íú±·¥Ä…¥·¥Ö Ä·¥è- ô·¥è·¥õ, ·¥á·¥Ñ Ä·¥á·¥†·¥Ä ·¥ú·¥ç ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö·¥è ·¥Ä·¥ò·¥èÍú± ·¥è ·¥ò Ä·¥áÍú∞…™x·¥è *${prefix}*.
‚îè‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îì
‚îÉ‚ñ¢ ·¥áx·¥á·¥ç·¥ò ü·¥è: ${prefix}menu
‚îÉ‚ñ¢ ·¥è ü·¥Ä: ${pushname}
‚îó‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îõ`);
    } else {
        reply(`·¥áÍú±Íú±·¥á ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö·¥è …¥·¥Ä·¥è ·¥áx…™Íú±·¥õ·¥á
‚îè‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îì
‚îÉ·¥è ü·¥Ä: ${pushname}
‚îÉ·¥Ñ·¥ç·¥Ö: ${prefix}${command}
‚îÉ·¥úÍú±·¥á: ${prefix}menu
‚îÉ·¥†…™·¥ò: ${isChVip}
‚îó‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îõ`);
    }
}
}
}
}

//========================================\\

const nmrdn = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net`

async function vipFunctionTempo() {
if(premium.length > 0) {
for (y of premium) {
if(y.save != Number(moment.tz('America/Sao_Paulo').format('DD'))) {
y.save = Number(moment.tz('America/Sao_Paulo').format('DD'))
fs.writeFileSync("./database/usuarios/premium.json", JSON.stringify(premium))
if(y.infinito == false) {
if(y.dias > 1) {y.dias -= 1
fs.writeFileSync("./database/usuarios/premium.json", JSON.stringify(premium))
} else {
sandro.sendMessage(y.id, {text: `‚ö†Ô∏è *ATEN√á√ÉO!* Seus dias como usu√°rio premium acabam de terminar, para realizar a renova√ß√£o entre em contato com o n√∫mero abaixo:\n‚Ä¢ Contato: *http://wa.me/+55 31 9559-5444 *\n‚Äì‚Äì\n‚Ä¢ Desde j√° muito obrigado pela aten√ß√£o, desculpe-me o inc√¥modo.\n‚Ä¢ *Essa mensagem √© autom√°tica*, caso seja um engano entre em contato com n√∫mero acima e saiba mais!`})
AB = premium.map(b => b.id).indexOf(y.id)
premium.splice(AB, 1)
fs.writeFileSync("./database/usuarios/premium.json", JSON.stringify(premium))
}}}}}}

async function tmpCardAluguelFunction() {
if(aluguel.length > 0) {
for(x of aluguel) {if(x.save != Number(moment.tz('America/Sao_Paulo').format('DD')) && x.cortesia == false) {
if(x.tempo > 1) {
if(Number(x.tempo) === 8 || Number(x.tempo) === 4 || Number(x.tempo) === 3 || Number(x.tempo) === 2) {
sandro.sendMessage(x.cliente, {text: `üòø‚ö†Ô∏è Ol√°, acabo de verificar que nosso contrato no grupo *${aluguel[aluguel.map(m => m.id).indexOf(x.id)].nome}* termina em ${Number(x.tempo) === 8 ? `1 semana (7 dias)` : Number(x.tempo) !== 2 ? `${x.tempo - 1} dias` : `24 horas (amanh√£)`}...\n‚Ä¢ N√£o deixe de fechar contrato novamente com nossa equipe! *Qualquer d√∫vida, entre em contato com meu propriet√°rio.*`})
}
x.save = Number(moment.tz('America/Sao_Paulo').format('DD'))
x.tempo -= 1
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
} else {
sandro.sendMessage(x.id, {text: `*O tempo limite deste grupo acabou!üòøüíî* Para a renova√ß√£o do contrato entre em contato com o meu dono: *wa.me/${nmrdn.split('@')[0]}*`})
sandro.sendMessage(nmrdn, {text: `ü§ìüóëÔ∏è S√≥ passando pra avisar que o tempo limite do grupo *${x.nome}* expirou agora... Visto que o(a) *@${x.cliente.split('@')[0]}* n√£o renovou o contrato, eu sa√≠ do grupo dele(a) e apaguei os registros! üåü`, mentions: [x.cliente]})
GP = grupos.map(i => i.id).indexOf(x.id)
grupos.splice(GP, 1)
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
RT = aluguel.map(i => i.id).indexOf(x.id)
grupo = x.id
aluguel.splice(RT, 1)
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
await sleep(4000)
sandro.groupLeave(grupo)
}}}}}

async function tmpCardCortesiaAluguel() {
if(aluguel.length > 0) {
for( x of aluguel ) {
if(x.save != Number(moment.tz('America/Sao_Paulo').format('HH')) && x.cortesia == true) {
if(x.tempo > 0) {
x.save = Number(moment.tz('America/Sao_Paulo').format('HH'))
x.tempo -= 1
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
} else {
sandro.sendMessage(x.id, {text: `üåüüí≥ *O cart√£o cortesia 24h deste grupo expirou!* Caso se veja interessado em nossos servi√ßos, favor entrar em contato com meu dono: *wa.me/${nmrdn.split('@')[0]}*`})
sandro.sendMessage(nmrdn, {text: `ü§ìüóëÔ∏èS√≥ passando pra avisar que o cart√£o cortesia do grupo *${x.nome}* expirou agora... Visto que n√£o houve altera√ß√£o em meus registros, eu sa√≠ do grupo e apaguei os dados! üåü`})
GP = grupos.map(i => i.id).indexOf(x.id)
grupos.splice(GP, 1)
fs.writeFileSync("./database/grupos/aluguel/grupos.json", JSON.stringify(grupos, null, 2))
aluguel.splice(aluguel.map(i => i.id).indexOf(x.id), 1)
fs.writeFileSync("./database/grupos/aluguel/aluguel.json", JSON.stringify(aluguel, null, 2))
await sleep(4000)
sandro.groupLeave(x.id)
}}}}}

async function FunctionEnvMsg() {
sandro.sendMessage(nmrdn, {text: `O que √© buceta, que tu me chama?`})
}

vipFunctionTempo(); // Executar a fun√ß√£o do premium tempor√°rio, quando os dias zerar.
tmpCardAluguelFunction(); // Quando o aluguel oficial do grupo (assinado), sem ser o teste.
tmpCardCortesiaAluguel(); // Quando o cart√£o cortesia do grupo acabar, ele ir√° notificar.

startFunctionSab().catch(async(error) => {
if(JSON.stringify(error).includes(API_KEY_sandro)) {
return console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o: " + error)
} else if(String(error).includes("Erro: aborted")) {
file = require.resolve("./connect.js")  
delete require.cache[file]
require(file)
} else {
return console.log("Ocorreu um erro: " + error)
}
})

}
}
}

//===== [In√≠cio - √Årea de Atualiza√ß√µes] =====\\

fs.watchFile('./menus/menu.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O Menu foi editada, irei reiniciar...');
process.exit()
}
})

let file = require.resolve(__filename)
fs.watchFile(file, () => {
fs.unwatchFile(file);
console.log(colors.red(`Altera√ß√µes salvas - '${__filename}'`));
delete require.cache[file]
require(file)
})
//
//===== [Fim - √Årea de Atualiza√ß√µes] =====\\

startConnect().catch(async(error) => {
return console.log(colors.red("Aparentemente, ocorreu um erro ao obter a conex√£o entre o bot e o WhatsApp Web: " + error))
})